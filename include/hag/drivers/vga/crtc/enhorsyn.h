//Copyright 2023-Present riplin

#pragma once

#include <hag/drivers/vga/crtc/regtype.h>
#include <hag/drivers/vga/crtc/data.h>

namespace Hag::VGA::CRTController
{

namespace Register
{

enum
{
    EndHorizontalSyncPosition = 0x05,                       //E_H_SY_P CR5
};

}

typedef uint8_t EndHorizontalSyncPosition_t;

namespace EndHorizontalSyncPosition
{
    enum //Mask
    {
        EndHorizontalSyncPositionLow = 0x1F,        //5 bit value = 5 least significant bits of the character clock counter value at which time
                                                    //              HSYNC becomes inactive. To obtain this value, add the desired HSYNC puls width in
                                                    //              character clocks to the Start Horizontal Sync Position value, also in character clocks.
                                                    //              The 5 least significant bits of this sum are programmed into this field.
                                                    //              This allows a maximum HSYNC pulse width of 31 character clocks. This pulse width can be
                                                    //              extended by 32 DCLKs via bit 5 of CR5D.
        HorizontalSkew = 0x60,                      //HOR-SKW       These bits control the skew of the HSYNC signal. A binary 00 equals to no HSYNC delay.
                                                    //              For some modes, it is necessary to provide an HSYNC signal that takes up the entire
                                                    //              blanking interval. Some internal timings are generated by the falling edge of the
                                                    //              HSYNC signal. To guarantee the signals are latched properly, HSYNC is asserted
                                                    //              before the end of the display enable signal, and then skewed several character clock times
                                                    //              to provide the proper screen centering.
                                                    //              00 = Zero character clock skew
                                                    //              01 = One character clock skew
                                                    //              10 = Two character clock skew
                                                    //              11 = Three character clock skew
        EndHorizontalBlankHigh = 0x80               //EHB b5 bit 5 of the End Horizontal Blanking
    };

    namespace Shift
    {
        enum
        {
            EndHorizontalSyncPositionLow = 0x00,
            HorizontalSkew = 0x05,
            EndHorizontalBlankHigh = 0x07
        };
    }

    inline EndHorizontalSyncPosition_t Read(VGA::Register_t controllerIndexRegister)
    {
        CRTControllerIndex::Write(controllerIndexRegister, Register::EndHorizontalSyncPosition);
        return EndHorizontalSyncPosition_t(CRTControllerData::Read(controllerIndexRegister + 1));
    }

    inline void Write(VGA::Register_t controllerIndexRegister, EndHorizontalSyncPosition_t value)
    {
        CRTControllerData::Write(controllerIndexRegister, Register::EndHorizontalSyncPosition, CRTControllerData_t(value));
    }

}

}
