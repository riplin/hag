//Copyright 2025-Present riplin

#include <i86.h>
#include <stdio.h>
#include <string.h>

#include <hag/system/bda.h>
#include <hag/system/pci.h>
#include <hag/vesa/vidmodes.h>
#include <hag/drivers/vga/vidmodes.h>
#include <hag/drivers/vga/miscout.h>
#include <hag/drivers/vga/featctl.h>
#include <hag/drivers/vga/dacmask.h>
#include <hag/drivers/vga/dacdata.h>
#include <hag/drivers/vga/dacwridx.h>
#include <hag/drivers/vga/attribc/index.h>
#include <hag/drivers/vga/attribc/data.h>
#include <hag/drivers/vga/attribc/attrmode.h>
#include <hag/drivers/vga/attribc/colplnen.h>
#include <hag/drivers/vga/attribc/horpxpan.h>
#include <hag/drivers/vga/crtc/index.h>
#include <hag/drivers/vga/crtc/data.h>
#include <hag/drivers/vga/crtc/hortotal.h>
#include <hag/drivers/vga/crtc/curstrsl.h>
#include <hag/drivers/vga/crtc/curendsl.h>
#include <hag/drivers/vga/crtc/verrtcen.h>
#include <hag/drivers/vga/gfxc/index.h>
#include <hag/drivers/vga/gfxc/data.h>
#include <hag/drivers/vga/gfxc/srdata.h>
#include <hag/drivers/vga/gfxc/rdplnsel.h>
#include <hag/drivers/vga/gfxc/gfxcmode.h>
#include <hag/drivers/vga/gfxc/mmmctrl.h>
#include <hag/drivers/vga/sqrc/index.h>
#include <hag/drivers/vga/sqrc/data.h>
#include <hag/drivers/vga/sqrc/reset.h>
#include <hag/drivers/vga/sqrc/clkmod.h>
#include <hag/drivers/vga/sqrc/enwrtpl.h>
#include <hag/drivers/matrox/shared/sqrc/memodctl.h>
#include <hag/drivers/vga/attribc/index.h>
#include <hag/drivers/vga/attribc/data.h>
#include <hag/drivers/vga/attribc/palette.h>
#include <hag/drivers/vga/attribc/colplnen.h>
#include <hag/drivers/vga/attribc/pixelpad.h>
#include <hag/drivers/matrox/shared/crtcext/index.h>
#include <hag/drivers/matrox/shared/crtcext/data.h>
#include <hag/drivers/matrox/shared/crtcext/hrcntext.h>
#include <hag/drivers/matrox/shared/crtcext/adgenext.h>
#include <hag/drivers/matrox/shared/crtcext/hrhlfcnt.h>
#include <hag/drivers/matrox/shared/crtcext/misc.h>
#include <hag/drivers/matrox/shared/crtcext/mempg.h>
#include <hag/drivers/matrox/shared/crtcext/vrcntext.h>
#include <hag/drivers/matrox/shared/pci/idx/miscctrl.h>
#include <hag/drivers/matrox/shared/pci/idx/muxctrl.h>
#include <hag/drivers/matrox/shared/pci/idx/genctrl.h>
#include <hag/drivers/matrox/shared/pci/idx/curctrl.h>
#include <hag/drivers/matrox/shared/pci/idx/pclkctrl.h>

#include <support/allocatr.h>
#include <hag/testing/mock.h>

extern uint8_t Font8x8[];
extern uint8_t* GraphicsFont8x8;
extern uint8_t Font8x16[];

class MockMystique : public Hag::Testing::Mock::PCI::Device
{
public:
    inline MockMystique(Hag::IAllocator& allocator)
        : Device("Mystique")
        , m_allocator(allocator)
        , m_Config(NULL)
        , m_Indexed(NULL)
        , m_ControlAperture(NULL)
        , m_ConfigSnapshot(NULL)
        , m_IndexedSnapshot(NULL)
        , m_ControlApertureSnapshot(NULL)
    {
        m_Config = allocator.AllocateAs<uint8_t>(sizeof(s_Config));
        m_Indexed = allocator.AllocateAs<uint8_t>(sizeof(s_Indexed));
        m_ControlAperture = allocator.AllocateAs<uint8_t>(16 * 1024);

        m_ConfigSnapshot = allocator.AllocateAs<uint8_t>(sizeof(s_Config));
        m_IndexedSnapshot = allocator.AllocateAs<uint8_t>(sizeof(s_Indexed));
        m_ControlApertureSnapshot = allocator.AllocateAs<uint8_t>(16 * 1024);
    }

    virtual ~MockMystique()
    {
        m_allocator.Free(m_ControlApertureSnapshot);
        m_ControlApertureSnapshot = NULL;

        m_allocator.Free(m_IndexedSnapshot);
        m_IndexedSnapshot = NULL;

        m_allocator.Free(m_ConfigSnapshot);
        m_ConfigSnapshot = NULL;

        m_allocator.Free(m_ControlAperture);
        m_ControlAperture = NULL;

        m_allocator.Free(m_Indexed);
        m_Indexed = NULL;

        m_allocator.Free(m_Config);
        m_Config = NULL;
    }

    virtual void Report(Device* instance1)
    {

    }

    virtual bool HasDifferences(Device* instance1)
    {
        return false;
    }

    virtual void Reset()
    {
        memcpy(m_Config, s_Config, sizeof(s_Config));
        memcpy(m_ConfigSnapshot, s_Config, sizeof(s_Config));

        memcpy(m_Indexed, s_Indexed, sizeof(s_Indexed));
        memcpy(m_IndexedSnapshot, s_Indexed, sizeof(s_Indexed));

        //TODO: properly reset to sane values
        memset(m_ControlAperture, 0, 16 * 1024);
        memset(m_ControlApertureSnapshot, 0, 16 * 1024);
    }

    virtual void Snapshot()
    {
        memcpy(m_ConfigSnapshot, m_Config, sizeof(s_Config));
        memcpy(m_IndexedSnapshot, m_Indexed, sizeof(s_Indexed));
        memcpy(m_ControlApertureSnapshot, m_ControlAperture, 16 * 1024);
    }

    virtual void Rollback()
    {
        memcpy(m_Config, m_ConfigSnapshot, sizeof(s_Config));
        memcpy(m_Indexed, m_IndexedSnapshot, sizeof(s_Indexed));
        memcpy(m_ControlAperture, m_ControlApertureSnapshot, 16 * 1024);
    }

    virtual uint32_t Read32(uint8_t offset)
    {
        uint32_t val = *(uint32_t*)(m_Config + offset);
        //printf("PCI read offset: 0x%02X, 0x%08X\n", offset, val);
        return val;
    }

    virtual void Write8(uint8_t offset, uint8_t value)
    {
        if (offset == 0x44)
        {
            value &= 0xFC;
        }

        if (offset == 0x45)
        {
            value &= 0x3F;
        }

        if (offset == 0x46)
        {
            value = 0x00;
        }

        if (offset == 0x47)
        {
            value = 0x00;
        }

        //printf("PCI write offset: 0x%02X, 0x%02X\n", offset, value);

        m_Config[offset] = value;
        
        if (offset >= 0x48 && offset <= 0x4B)
        {
            uint32_t index = *(uint32_t*)(m_Config + 0x44);
            if (index < 16 * 1024)
            {
                *(uint32_t*)(m_ControlAperture + index) = *(uint32_t*)(m_Config + 0x48);
                if (index == 0x3C08)
                {
                    m_Indexed[m_Config[0x3C00]] = m_Config[0x3C0A];
                }
            }
        }
    }

    virtual void Write16(uint8_t offset, uint16_t value)
    {
        if (offset == 0x44)
        {
            value &= 0x3FFC;
        }

        if (offset == 0x46)
        {
            value = 0x0000;
        }

        //printf("PCI write offset: 0x%02X, 0x%04X\n", offset, value);

        ((uint16_t*)m_Config)[offset >> 1] = value;

        if (offset >= 0x48 && offset <= 0x4B)
        {
            uint32_t index = *(uint32_t*)(m_Config + 0x44);
            if (index < 16 * 1024)
            {
                *(uint32_t*)(m_ControlAperture + index) = *(uint32_t*)(m_Config + 0x48);
                if (index == 0x3C08)
                {
                    m_Indexed[m_Config[0x3C00]] = m_Config[0x3C0A];
                }
            }
        }
    }

    virtual void Write32(uint8_t offset, uint32_t value)
    {
        if (offset == 0x44)
        {
            value &= 0x3FFC;
        }
        //printf("PCI write offset: 0x%02X, 0x%08X\n", offset, value);

        ((uint32_t*)m_Config)[offset >> 2] = value;
        
        if (offset >= 0x48 && offset <= 0x4B)
        {
            uint32_t index = *(uint32_t*)(m_Config + 0x44);
            if (index < 16 * 1024)
            {
                *(uint32_t*)(m_ControlAperture + index) = *(uint32_t*)(m_Config + 0x48);
                if (index == 0x3C08)
                {
                    m_Indexed[m_Config[0x3c00]] = m_Config[0x3C0A];
                }
            }
        }
    }

    virtual void Snoop8(uint16_t port, uint8_t value)
    {
        if (port == 0x3C8)
        {
            //printf("PCI Snoop port: 0x%04X, 0x%02X\n", port, value);
            m_ControlAperture[0x3C00] = value;

            if (value < 44)
            {
                m_ControlAperture[0x3C0A] = m_Indexed[value];
                //printf("Setting 0x3C0A to index 0x%02X value: 0x%02X\n", value, m_Indexed[value]);

                uint32_t index = *(uint32_t*)(m_Config + 0x44);
                if (index == 0x3C08)
                {
                    *(uint32_t*)(m_Config + 0x48) = m_ControlAperture[index];
                }
            }
        }
    }

    virtual void Snoop16(uint16_t port, uint16_t value)
    {

    }

private:
    Hag::IAllocator& m_allocator;

    uint8_t* m_Config;
    uint8_t* m_Indexed;
    uint8_t* m_ControlAperture;

    uint8_t* m_ConfigSnapshot;
    uint8_t* m_IndexedSnapshot;
    uint8_t* m_ControlApertureSnapshot;

    static uint8_t s_Config[256];
    static uint8_t s_Indexed[44];
    //static uint8_t s_ControlAperture[16 * 1024];
};

uint8_t MockMystique::s_Config[256] = 
{
    0x2B, 0x10, 0x1A, 0x05, 0x87, 0x00, 0x80, 0x02, 0x02, 0x00, 0x00, 0x03, 0x00, 0x20, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xE0, 0x08, 0x00, 0x80, 0xE1, 0x00, 0x00, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x01, 0x00, 0x00,
    0x21, 0x4F, 0x0F, 0x5F, 0x08, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

uint8_t MockMystique::s_Indexed[44] =
{
    0xBF, 0x0D, 0x00, 0x1B, 0x99, 0xFB, 0xF7, 0x9D, 0x9F, 0x7D, 0xBF, 0xE8, 0x00, 0x00, 0x09, 0x20,
    0x11, 0x11, 0x00, 0x00, 0x1F, 0x08, 0x70, 0x10, 0x40, 0x00, 0x07, 0x31, 0xCB, 0x0D, 0x14, 0xB2,
    0xD1, 0xAA, 0x1E, 0x6C, 0x01, 0x19, 0x66, 0x01, 0x0E, 0x75, 0x1E, 0x40
};

#if 1

#define RETURN(L)           \
    printf("%s\n", L);      \
    return;

#define RETURN_ARG(L, A)  \
    printf("%s\n", L);      \
    return A;

#else

#define RETURN(Label)           \
    return;

#define RETURN_ARG(Label, Arg)  \
    return Arg;

#endif

#if 0
#define LABEL(F, L)         \
L:                          \
printf("%s.%s\n", #F, #L);
#else
#define LABEL(F, L)         \
L:
#endif


Hag::VGA::Sequencer::ClockingMode_t ToggleScreenOnOff(Hag::VGA::Sequencer::ClockingMode_t screenToggle)
{
    using namespace Hag::VGA;
//    mov   dx, VGA_SequenceIndex         ;Port 0x3c4
//    mov   al, VGA_SEQIdx_ClockingMode   ;0x1
//    out   dx, al                        ;Write Index
//    inc   dx                            ;Move to sequence data port
//    in    al, dx                        ;read data port
    Sequencer::ClockingMode_t originalClockingMode = Sequencer::ClockingMode::Read();

//    mov   dh, al                        ;store original value
//    and   ax, 20dfh                     ;Filter ah to only VGA_SEQ1_ScreenOff, and filter out screen off in original value
    screenToggle &= Sequencer::ClockingMode::ScreenOff;

//    or    al, ah                        ;set screen off bit in original value
    Sequencer::ClockingMode_t newClockingMode = (originalClockingMode & ~Sequencer::ClockingMode::ScreenOff) | screenToggle;
//    mov   ah, dh                        ;ah = original register value
//    mov   dh, 03h                       ;Restore port high byte
//    out   dx, al                        ;write updated register value
    Sequencer::ClockingMode::Write(newClockingMode);
//    ret
    return originalClockingMode;
}

Hag::VGA::Sequencer::ClockingMode_t TurnScreenOn()
{
    return ToggleScreenOnOff(Hag::VGA::Sequencer::ClockingMode::ScreenOn);
}

Hag::VGA::Sequencer::ClockingMode_t TurnScreenOff()
{
    //mov   ah, 20h
    return ToggleScreenOnOff(Hag::VGA::Sequencer::ClockingMode::ScreenOff);
}

bool IsMDAHiResEnhanced()//Offset 0x3094
{
    using namespace Hag::System;
    //     push  ax
    //     mov   al, byte ptr ds:[BDA_EGAFeatureBitSwitches];Offset 0x488
    //     and   al, BDA_EFBS_AdapterTypeMask  ;0xf
    //     cmp   al, BDA_EFBS_MDAHiResEnhanced ;0x3
    //     je    Found                         ;Offset 0x30a0
    //     cmp   al, BDA_EFBS_MDAHiResEnhanced_2;0x9 Also check the other one
    // Found:                                  ;Offset 0x30a0
    //     pop   ax
    //     ret
    BDA::EGAFeatureBitSwitches_t adapterType = BDA::EGAFeatureBitSwitches::Get() & BDA::EGAFeatureBitSwitches::AdapterTypeMask;
    return (adapterType == BDA::EGAFeatureBitSwitches::MDAHiResEnhanced) ||
           (adapterType == BDA::EGAFeatureBitSwitches::MDAHiResEnhanced_2);
}

uint8_t GetNumberOfActiveScanlines()//Offset 0x3054
{
    using namespace Hag;
    using namespace Hag::System;

    REGPACK r;
    memset(&r, 0, sizeof(r));

    //;
    //;
    //;                                               000h means it's determined another way
    //;                                               All others are decremented by one and returned.
    //;Offset 0x3080                                    Display mode:
    static uint8_t NumberOfActiveScanlinesPerModePlusOne[] =
    {
        0x00,   // 0x00
        0x00,   // 0x01
        0x00,   // 0x02
        0x00,   // 0x03
        0x01,   // 0x04
        0x01,   // 0x05
        0x01,   // 0x06
        0x00,   // 0x07
        0x03,   // 0x08
        0x01,   // 0x09
        0x01,   // 0x0a
        0x01,   // 0x0b
        0x01,   // 0x0c
        0x01,   // 0x0d
        0x01,   // 0x0e
        0x02,   // 0x0f
        0x02,   // 0x10
        0x04,   // 0x11
        0x04,   // 0x12
        0x01    // 0x13
    };

    // ;
    // ;outputs:
    // ;   al = number of active scan lines
    // ;        0 = 200
    // ;        1 = 350
    // ;        2 = 400
    // ;        3 = 480
    // ;
    //     mov   al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    //     push  bx
    //     lea   bx, [NumberOfActiveScanlinesPerModePlusOne];Offset 0x3080
    //     cmp   al, BDA_DM_320x200_256_Color_Graphics;0x13
    //     ja    Label0x3066                   ;Offset 0x3066
    if (BDA::DisplayMode::Get() > VGA::VideoMode::G320x200x8bppC)
        goto Label0x3066;

    r.h.al = NumberOfActiveScanlinesPerModePlusOne[BDA::DisplayMode::Get()];
    //     xlatb cs:[bx]
    //     dec   al                            ;Subtract one to see if it turns negative (and thus, not set)
    r.h.al--;
    //     jns   Label0x307d                   ;Offset 0x307d
    if (r.h.al != 0xFF)
        goto Label0x307d;

    // Label0x3066:                            ;Offset 0x3066
LABEL(GetNumberOfActiveScanlines, Label0x3066);

    //     mov   al, 02h                       ;400 Scan lines
    r.h.al = 0x02;

    //     test  byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_LineMode400;Offset 0x489 0x10
    //     jne   Label0x307d                   ;Offset 0x307d
    if ((BDA::VideoDisplayDataArea::Get() & BDA::VideoDisplayDataArea::LineMode400) != 0)
        goto Label0x307d;

    //     dec   ax                            ;350 Scan lines
    r.w.ax--;

    //     call  IsMDAHiResEnhanced            ;Offset 0x3094
    //     je    Label0x307d                   ;Offset 0x307d
    if (IsMDAHiResEnhanced())
        goto Label0x307d;

    //     cmp   byte ptr ds:[BDA_DisplayMode], BDA_DM_80x25_Monochrome_Text;Offset 0x449 0x7
    //     je    Label0x307d                   ;Offset 0x307d
    if (BDA::DisplayMode::Get() == VGA::VideoMode::T80x25x1bppM)
        goto Label0x307d;
    //     dec   ax                            ;200 Scan lines
    r.w.ax--;

    // Label0x307d:                            ;Offset 0x307d
LABEL(GetNumberOfActiveScanlines, Label0x307d);
    //     pop   bx
    //     ret   
    return r.h.al;
}

extern Hag::System::BDA::VideoParameterTable VideoParameters[];

Hag::System::BDA::VideoParameterTable* GetVideoParameterTable()//Offset 0x2fe4
{
    using namespace Hag;
    using namespace Hag::System;

    REGPACK r;
    memset(&r, 0, sizeof(r));

//        +------------------------ 200 Scan lines
//        |
//        |     +------------------ 350 Scan lines
//        |     |
//        |     |     +------------ 400 Scan lines
//        |     |     |
//        |     |     |     +------ 480 Scan lines
//        |     |     |     |
//        |     |     |     |       Display mode:
    static uint8_t Data0x3004[] =                   //Offset 0x3004
    {
        0x00, 0x13, 0x17, 0x00,   // 0x00
        0x01, 0x14, 0x17, 0x00,   // 0x01
        0x02, 0x15, 0x18, 0x00,   // 0x02
        0x03, 0x16, 0x18, 0x00,   // 0x03
        0x04, 0x00, 0x00, 0x00,   // 0x04
        0x05, 0x00, 0x00, 0x00,   // 0x05
        0x06, 0x00, 0x00, 0x00,   // 0x06
        0x00, 0x07, 0x19, 0x00,   // 0x07
        0x00, 0x00, 0x08, 0x00,   // 0x08
        0x09, 0x00, 0x00, 0x00,   // 0x09
        0x0A, 0x00, 0x00, 0x00,   // 0x0a
        0x0B, 0x00, 0x00, 0x00,   // 0x0b
        0x0C, 0x00, 0x00, 0x00,   // 0x0c
        0x0D, 0x00, 0x00, 0x00,   // 0x0d
        0x0E, 0x00, 0x00, 0x00,   // 0x0e
        0x00, 0x11, 0x00, 0x00,   // 0x0f
        0x00, 0x12, 0x00, 0x00,   // 0x10
        0x00, 0x00, 0x00, 0x1A,   // 0x11
        0x00, 0x00, 0x00, 0x1B,   // 0x12
        0x1C, 0x00, 0x00, 0x00    // 0x13
    };

    // mov       al, BDA_VPCB_VideoParameterTable;0x0
    // call      LookupVideoParameterControlBlockPointer;Offset 0x317d
    //We have a direct pointer

    // mov       al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    r.h.al = BDA::DisplayMode::Get();

    // cbw
    r.h.ah = 0;

    // shl       ax, 01h
    r.w.ax <<= 1;

    // shl       ax, 01h
    r.w.ax <<= 1;

    // mov       di, ax
    r.w.di = r.w.ax;

    // call      GetNumberOfActiveScanlines;Offset 0x3054
    r.h.al = GetNumberOfActiveScanlines();

    // add       di, ax
    r.w.di += r.w.ax;

    // mov       al, byte ptr cs:[di + Data0x3004];Offset 0x3004
    r.h.al = Data0x3004[r.w.di];


    // mov       ah, 40h
    // mul       ah
    // add       si, ax
    // ret
    return &VideoParameters[r.h.al];
}

void Func0x2ea3()//Offset 0x2ea3
{
    //Check alternate implementation
    // Label0x2ea3:                            ;Offset 0x2ea3
    // mov       ah, byte ptr es:[si]
    // inc       si
    // out       dx, ax
    // inc       ax
    // loop      Label0x2ea3               ;Offset 0x2ea3
    // ret
}

void Func0x2ebb(uint8_t cl, uint8_t ah)//Offset 0x2ebb
{
    //Check alternate implementation
    using namespace Hag;
    using namespace Hag::System;

    REGPACK r;
    memset(&r, 0, sizeof(r));

    //     mov       dx, VGA_AttributeControllerIndex;Port 0x3c0
    // Label0x2ebe:                            ;Offset 0x2ebe
    //     cmp       al, ah
    //     jb        Label0x2ec7               ;Offset 0x2ec7
    //     ja        Label0x2ed0               ;Offset 0x2ed0
    //     inc       ax
    //     mov       cl, 01h
    // Label0x2ec7:                            ;Offset 0x2ec7
    //     out       dx, al
    //     push      ax
    //     lodsb     byte ptr es:[si]
    //     out       dx, al
    //     pop       ax
    //     inc       ax
    //     loop      Label0x2ebe               ;Offset 0x2ebe
    // Label0x2ed0:                            ;Offset 0x2ed0
    //     ret
}

void Func0x2eb9(uint8_t cl)//Offset 0x2eb9
{
    //Check alternate implementation
    //mov       ah, 0ffh
    Func0x2ebb(cl, 0xFF);
}


void Func0x2e45(Hag::System::BDA::VideoParameterTable& videoParameterTable, Hag::VGA::Register_t baseVideoIOPort)//Offset 0x2e45
{
    using namespace Hag;
    using namespace Hag::System;

    REGPACK r;
    memset(&r, 0, sizeof(r));
    r.w.dx = baseVideoIOPort;

    //     mov       di, dx
    r.w.di = r.w.dx;

    //     cli
    SYS_ClearInterrupts();
    
    //     mov       dx, VGA_SequenceIndex     ;Port 0x3c4
    //     mov       ax, (VGA_SEQ0_AsyncReset SHL 8) OR VGA_SEQIdx_Reset;0x100
    //     out       dx, ax
    //     inc       ax
    VGA::Sequencer::Reset::Write(VGA::Sequencer::Reset::AsynchronousReset);
        
    //     mov       cx, 0004h
    r.w.cx = 0x0004;

    //     call      Func0x2ea3                ;Offset 0x2ea3
    //Func0x2ea3();
    VGA::SequencerData::Write(VGA::Sequencer::Register::Reset,
                              videoParameterTable.SequencerRegisters,
                              sizeof(videoParameterTable.SequencerRegisters));

    //     mov       dl, VGA_MiscellaneousWrite_lowbyte;Port 0x3c2
    //     lodsb     byte ptr es:[si]
    //     out       dx, al
    VGA::MiscellaneousOutput::Write(videoParameterTable.MiscellaneousOutputRegister);
    
    //     push      cx
    //     mov       cx, 8000h
    // Label0x2e5f:                            ;Offset 0x2e5f
    //     loop      Label0x2e5f               ;Offset 0x2e5f  Speed sensitive!
    //     pop       cx
    for (int i = 0; i < 8000; ++i); //BOOOO

    //     mov       dl, VGA_SequenceIndex_lowbyte;Port 0x3c4
    //     mov       ax, ((VGA_SEQ0_AsyncReset OR VGA_SEQ0_SyncReset) SHL 8) OR VGA_SEQIdx_Reset;0x300
    //     out       dx, ax
    VGA::Sequencer::Reset::Write(VGA::Sequencer::Reset::AsynchronousReset |
                                 VGA::Sequencer::Reset::SynchronousReset);
    //     sti
    SYS_RestoreInterrupts();

    //     call      TurnScreenOff             ;Offset 0x3109
    //     push      ax
    Hag::VGA::Sequencer::ClockingMode_t previousScreenOffState = TurnScreenOff();

    //     mov       dx, di
    //     mov       ax, VGA_CRTCIdx_VertRetraceEnd;0x0011
    //     out       dx, ax
    VGA::CRTController::VerticalRetraceEnd::Write(baseVideoIOPort, 0x00);

    //     mov       cl, 19h
    r.h.cl = 0x19;

    //     xor       ax, ax
    r.w.ax = 0;

    //     call      Func0x2ea3                ;Offset 0x2ea3
    //Func0x2ea3();
    VGA::CRTControllerData::Write(baseVideoIOPort,
                                  VGA::CRTController::Register::HorizontalTotal,
                                  videoParameterTable.CRTCRegisters,
                                  sizeof(videoParameterTable.CRTCRegisters));

    //     push      si
    //     add       dl, 06h                   ;Port 0x3ca
    //     in        al, dx
    VGA::FeatureControl::Read();

    //     xor       ax, ax
    //     out       dx, al
    SYS_WritePortByte(0x3CA, 0x00);     //This is an undocumented register!

    //     mov       al, 10h            //Skipping palette colors?
    //     add       si, ax
    //     mov       cl, 01h
    //     call      Func0x2eb9                ;Offset 0x2eb9
    VGA::AttributeController::AttributeMode::Write(
        videoParameterTable.AttributeControllerRegisters[VGA::AttributeController::Register::AttributeMode]);

    //     inc       ax //Skip 0x11
    //     inc       si
    //     mov       cl, 02h
    //     call      Func0x2eb9                ;Offset 0x2eb9
    VGA::AttributeController::ColorPlane::Write(
        videoParameterTable.AttributeControllerRegisters[VGA::AttributeController::Register::ColorPlane]);
    VGA::AttributeController::HorizontalPixelPanning::Write(
        videoParameterTable.AttributeControllerRegisters[VGA::AttributeController::Register::HorizontalPixelPanning]);

    //     mov       dl, VGA_GraphicsControllerIndex_lowbyte;Port 0x3ce
    //     mov       cl, 09h
    //     xor       ax, ax
    //     call      Func0x2ea3                ;Offset 0x2ea3
    VGA::GraphicsControllerData::Write(VGA::GraphicsController::Register::SetResetData,
                                       videoParameterTable.GraphicsControllerRegisters,
                                       sizeof(videoParameterTable.GraphicsControllerRegisters));
    //     pop       si
    //     pop       ax

    //previousScreenOffState
    //     call      ToggleScreenOnOff         ;Offset 0x310b
    ToggleScreenOnOff(previousScreenOffState);
    
    //     pop       dx
    //     pop       cx
    //     ret
}

void Func0x2e39(Hag::System::BDA::VideoParameterTable& videoParameterTable)//Offset 0x2e39
{
    // push      cx
    // push      dx
    // call      Func0x2fe4                ;Offset 0x2fe4
    //Func0x2fe4();
    // add       si, 0005h
    // mov       dx, word ptr ds:[BDA_VideoBaseIOPort];Offset 0x463
    Func0x2e45(videoParameterTable, Hag::System::BDA::VideoBaseIOPort::Get());
}

void SavePaletteToDynamicParams()//Offset 0x2eff
{
    //Copies the currently selected palette values into the dynamic param save area.
    //Should probably implement this to be 100% compatible.

    //     push      ds
    //     push      es
    //     push      si
    //     mov       al, BDA_VPCB_DynamicParamSaveArea;0x4
    //     call      LookupVideoParameterControlBlockPointer;Offset 0x317d
    //     pop       si
    //     pop       ds
    //     je        Label0x2f12               ;Offset 0x2f12
    //     mov       cx, 0008h
    //     rep movsw
    //     inc       si
    //     movsb
    // Label0x2f12:                            ;Offset 0x2f12
    //     pop       ds
    //     ret
}

#pragma pack(push, 1);
struct PaletteData
{
    Hag::System::BDA::VideoDisplayDataArea_t mask;
    uint8_t val;
    uint16_t count;
    uint8_t colors[];
};
#pragma pack(pop);

extern PaletteData* Palettes[];
uint8_t Greyscale(uint8_t red, uint8_t green, uint8_t blue)//Offset 0x2fcc
{
    //dh red, ch green, cl blue
    // mov       al, 4dh
    // mul       dh         ;red
    // mov       dx, ax
    // mov       al, 97h
    // mul       ch         ;green
    // add       dx, ax
    // mov       al, 1ch
    // mul       cl         ;blue
    // add       ax, dx
    // add       ax, 0080h
    // mov       al, ah
    // ret
    return ((0x4D * uint16_t(red)) +
            (0x97 * uint16_t(green)) +
            (0x1c * uint16_t(blue)) + 0x80) >> 8;
}

void LoadColorPalette(uint16_t count, uint16_t paletteIndex)//Offset 0x2f93
{
    using namespace Hag;
    using namespace Hag::System;
    uint8_t red = 0;
    uint8_t green = 0;
    uint8_t blue = 0;
    uint8_t greyscale = 0;
    uint16_t colorIndex = 0;
    uint16_t tripleCount = 0;

    //     test      byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_GrayScale OR BDA_VDDA_MonochromeMonitor;Offset 0x489 0x6
    //     jne       Label0x2fa6               ;Offset 0x2fa6
    if ((BDA::VideoDisplayDataArea::Get() & 
        (BDA::VideoDisplayDataArea::GrayScale | BDA::VideoDisplayDataArea::MonochromeMonitor)) != 0x00)
        goto Label0x2fa6;

    // Label0x2f9a:                            ;Offset 0x2f9a
    //     lodsb     byte ptr es:[si]
    //     out       dx, al
    //     lodsb     byte ptr es:[si]
    //     out       dx, al
    //     lodsb     byte ptr es:[si]
    //     out       dx, al
    //     loop      Label0x2f9a               ;Offset 0x2f9a
    tripleCount = count * 3;
    for (uint16_t idx = 0; idx < tripleCount; idx+=3)
    {
        VGA::RAMDACData::Write(Palettes[paletteIndex]->colors[idx + 0]);
        VGA::RAMDACData::Write(Palettes[paletteIndex]->colors[idx + 1]);
        VGA::RAMDACData::Write(Palettes[paletteIndex]->colors[idx + 2]);
    }
    //     ret
    return;


    // Label0x2fa6:                            ;Offset 0x2fa6
LABEL(LoadColorPalette, Label0x2fa6);
    for (uint16_t i = 0; i < count; ++i)
    {
        //     push      cx
        //     push      dx
        //     mov       dh, byte ptr es:[si]
        red = Palettes[paletteIndex]->colors[colorIndex];

        //     inc       si
        ++colorIndex;

        //     mov       ch, byte ptr es:[si]
        green = Palettes[paletteIndex]->colors[colorIndex];

        //     inc       si
        ++colorIndex;

        //     mov       cl, byte ptr es:[si]
        blue = Palettes[paletteIndex]->colors[colorIndex];

        //     inc       si
        ++colorIndex;

        //     call      Greyscale                ;Offset 0x2fcc
        greyscale = Greyscale(red, green, blue);

        //     pop       dx
        //     pop       cx
        //     out       dx, al
        VGA::RAMDACData::Write(greyscale);
        //     jmp       Label0x2fbc               ;Offset 0x2fbc Speed sensitive!
        // Label0x2fbc:                            ;Offset 0x2fbc
        //     out       dx, al
        VGA::RAMDACData::Write(greyscale);

        //     jmp       Label0x2fbf               ;Offset 0x2fbf Speed sensitive!
        // Label0x2fbf:                            ;Offset 0x2fbf
        //     out       dx, al
        VGA::RAMDACData::Write(greyscale);

        //     loop      Label0x2fa6               ;Offset 0x2fa6
    }
    //     ret
}

void LoadCompressedPalette(uint16_t count, uint16_t paletteIndex)//Offset 0x319b
{
    using namespace Hag;

    REGPACK r;
    memset(&r, 0, sizeof(r));

    for (uint16_t i = 0; i < count; ++i)
    {
        // Label0x319b:                            ;Offset 0x319b
        //     lodsb byte ptr es:[si]
        r.h.al = Palettes[paletteIndex]->colors[i];
        
        //     mov   ah, al
        r.h.ah = r.h.al;

        //     mov   bx, 0003h
        for (uint8_t c = 0; c < 3; ++c)
        {
            // Label0x31a2:                            ;Offset 0x31a2
            //     shl   ah, 01h
            r.h.ah <<= 1;

            //     shl   ah, 01h
            r.h.ah <<= 1;

            //     xor   al, al
            r.h.al = 0;

            //     test  ah, 0c0h
            //     je    Label0x31b7                   ;Offset 0x31b7
            if ((r.h.ah & 0xC0) == 0x00)
                goto Label0x31b7;

            //     jns   Label0x31b5                   ;Offset 0x31b5
            if ((r.h.ah & 0x80) == 0x00)//0x40
                goto Label0x31b5;

            //     jnp   Label0x31b3                   ;Offset 0x31b3
            if ((r.h.ah & 0xC0) == 0x80)
                goto Label0x31b3;

            //     add   al, 15h
            r.h.al += 0x15;

            // Label0x31b3:                            ;Offset 0x31b3
        LABEL(LoadCompressedPalette, Label0x31b3);
            
            //     add   al, 15h
            r.h.al += 0x15;

            // Label0x31b5:                            ;Offset 0x31b5
        LABEL(LoadCompressedPalette, Label0x31b5);

            //     add   al, 15h
            r.h.al += 0x15;

            // Label0x31b7:                            ;Offset 0x31b7
        LABEL(LoadCompressedPalette, Label0x31b7);

            //     out   dx, al
            VGA::RAMDACData::Write(r.h.al);

            //     dec   bx
            //     jne   Label0x31a2                   ;Offset 0x31a2
        }
        //     loop  Label0x319b                   ;Offset 0x319b
    }
    //     ret
}

void LoadPalette(Hag::VGA::DACWriteIndex_t startIndex, uint16_t paletteIndex)//Offset 0x2f5f
{
    using namespace Hag;
    using namespace Hag::System;

    //     mov       dx, VGA_DACWriteIndex     ;Port 0x3c8
    //     out       dx, al
    VGA::DACWriteIndex::Write(startIndex);

    //     inc       dx
    //     mov       ax, word ptr es:[si - 04h]
    BDA::VideoDisplayDataArea_t videoDisplayDataAreaMask = Palettes[paletteIndex]->mask;
    uint8_t val = Palettes[paletteIndex]->val;

    //     mov       cx, word ptr es:[si - 02h]
    uint16_t count = Palettes[paletteIndex]->count;

    //     test      byte ptr ds:[BDA_VideoDisplayDataArea], al;Offset 0x489
    //     je        Label0x2f7b               ;Offset 0x2f7b
    if ((BDA::VideoDisplayDataArea::Get() & videoDisplayDataAreaMask) == 0)
        goto Label0x2f7b;

    //     add       si, cx
    //     add       si, 0004h
    ++paletteIndex;

    //     mov       ax, word ptr es:[si - 04h]
    videoDisplayDataAreaMask = Palettes[paletteIndex]->mask;
    val = Palettes[paletteIndex]->val;

    // Label0x2f7b:                            ;Offset 0x2f7b
LABEL(LoadPalette, Label0x2f7b);

    //     or        ah, ah
    //     je        Label0x2f8d               ;Offset 0x2f8d
    if (val == 0x00)
        goto Label0x2f8d;

    //     jns       LoadColorPalette                ;Offset 0x2f93
    if ((val & 0x80) == 0x00)
    {
        LoadColorPalette(count, paletteIndex);
        return;
    }

    // Label0x2f81:                            ;Offset 0x2f81
    //     lodsb     byte ptr es:[si]
    //     out       dx, al
    //     jmp       Label0x2f86               ;Offset 0x2f86 Speed sensitive!
    // Label0x2f86:                            ;Offset 0x2f86
    //     out       dx, al
    //     jmp       Label0x2f89               ;Offset 0x2f89 Speed sensitive!
    // Label0x2f89:                            ;Offset 0x2f89
    //     out       dx, al
    //     loop      Label0x2f81               ;Offset 0x2f81

    //LoadMonochromePalette
    for (uint16_t idx = 0; idx < count; ++idx)
    {
        uint8_t color = Palettes[paletteIndex]->colors[idx];
        VGA::RAMDACData::Write(color);
        VGA::RAMDACData::Write(color);
        VGA::RAMDACData::Write(color);
    }

    //     ret
    return;

    // Label0x2f8d:                            ;Offset 0x2f8d
LABEL(LoadPalette, Label0x2f8d);
    //     push      bx
    //     call      LoadCompressedPalette                ;Offset 0x319b
    LoadCompressedPalette(count, paletteIndex);
    //     pop       bx
    //     ret
}

void LoadColorPaletteAtOffset0(uint16_t paletteIndex)//Offset 0x2f5d
{
    //    xor       al, al
    LoadPalette(0, paletteIndex);
}

void InitializePalette()//Offset 0x2f14
{
    using namespace Hag;
    using namespace Hag::System;

    REGPACK r;
    memset(&r, 0, sizeof(r));


    //     mov       dx, VGA_DACMask           ;Port 0x3c6
    //     mov       al, 0ffh
    //     out       dx, al
    VGA::DACMask::Write(0xFF);

    //     push      cs
    //     pop       es
    //     call      GetNumberOfActiveScanlines;Offset 0x3054
    r.h.al = GetNumberOfActiveScanlines();

    //     mov       ah, al
    r.h.ah = r.h.al;

    //     mov       al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    r.h.al = BDA::DisplayMode::Get();

    //     cmp       ax, BDA_DM_320x200_256_Color_Graphics;0x0013
    //     je        Label0x2f43               ;Offset 0x2f43
    if (r.w.ax == VGA::VideoMode::G320x200x8bppC)
        goto Label0x2f43;
    
    //     lea       si, [Data0x337a]          ;Offset 0x337a
    r.w.si = 2;//Data0x337a

    //     jb        Label0x2f3f               ;Offset 0x2f3f
    if (r.w.ax < VGA::VideoMode::G320x200x8bppC)
        goto Label0x2f3f;

    //     lea       si, [Data0x3402]          ;Offset 0x3402
    r.w.si = 4;//Data0x3402

    //     cmp       al, BDA_DM_80x25_Monochrome_Text;0x7
    //     je        Label0x2f3f               ;Offset 0x2f3f
    if (r.h.al == VGA::VideoMode::T80x25x1bppM)
        goto Label0x2f3f;

    //     cmp       al, BDA_DM_640x350_Monochrome_Graphics;0xf
    //     je        Label0x2f3f               ;Offset 0x2f3f
    if (r.h.al == VGA::VideoMode::G640x350x1bppM)
        goto Label0x2f3f;

    //     lea       si, [Data0x32f2]          ;Offset 0x32f2
    r.w.si = 0;//Data0x32f2

    // Label0x2f3f:                            ;Offset 0x2f3f
LABEL(InitializePalette, Label0x2f3f);

    //     call      LoadColorPaletteAtOffset0                ;Offset 0x2f5d
    LoadColorPaletteAtOffset0(r.w.si);

    //     ret
    return;

    // Label0x2f43:                            ;Offset 0x2f43
LABEL(InitializePalette, Label0x2f43);

    //     lea       si, [Data0x3446]          ;Offset 0x3446
    r.w.si = 5;//Data0x3446

    //     call      LoadColorPaletteAtOffset0                ;Offset 0x2f5d
    LoadColorPaletteAtOffset0(r.w.si);

    //     lea       si, [Data0x346e]          ;Offset 0x346e
    r.w.si = 7;//Data0x346e

    //     mov       al, 10h
    r.h.al = 0x10;

    //     call      LoadPalette                ;Offset 0x2f5f
    LoadPalette(r.h.al, r.w.si);

    //     lea       si, [Data0x3482]          ;Offset 0x3482
    r.w.si = 8;//Data0x3482

    //     mov       al, 20h
    r.h.al = 0x20;

    //     call      LoadPalette                ;Offset 0x2f5f
    LoadPalette(r.h.al, r.w.si);

    //     ret
}

void InitializeAndSavePalettes(Hag::System::BDA::VideoParameterTable& videoParameterTable)//Offset 0x152a
{
    using namespace Hag;
    using namespace Hag::System;

    //     test  byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_PaletteLoadingEnabled;Offset 0x489 0x8
    //     jne   PaletteLoadingDisabled        ;Offset 0x1548
    if ((BDA::VideoDisplayDataArea::Get() & BDA::VideoDisplayDataArea::PaletteLoadingDisabled) != 0)
        goto PaletteLoadingDisabled;

    //     push  si
    //     xor   ax, ax
    //     mov   cx, 0010h
    //     call  Func0x2eb9                    ;Offset 0x2eb9
    VGA::AttributeControllerData::Write(VGA::AttributeController::Register::Palette0, videoParameterTable.AttributeControllerRegisters, 0x10);

    //     inc   ax                            ;Skip 0x11
    //     inc   si
    //     mov   cl, 01h
    //     call  Func0x2eb9                    ;Offset 0x2eb9
    VGA::AttributeController::ColorPlane::Write(
        videoParameterTable.AttributeControllerRegisters[VGA::AttributeController::Register::ColorPlane]);

    //     pop   si
    //     call  SavePaletteToDynamicParams                    ;Offset 0x2eff
    SavePaletteToDynamicParams();

    //     call  InitializePalette                    ;Offset 0x2f14
    InitializePalette();

    // PaletteLoadingDisabled:                 ;Offset 0x1548
LABEL(InitializeAndSavePalettes, PaletteLoadingDisabled);
    //     ret
}

Hag::VGA::VideoMode_t VesaToLegacyModeEquivalent(Hag::VGA::VideoMode_t videoMode)//Offset 0x64cd
{
    using namespace Hag;

    //     cmp  al, 20h                        ;Under VESA 0x100 640x400x256
    //     jb   Label0x64e5                    ;Offset 0x64e5
    if (videoMode < 0x20)
        return videoMode;

    //     cmp  al, 22h                        ;VESA 0x102 VESA_MODE_800x600x16
    //     je   Label0x64df                    ;Offset 0x64df
    if (videoMode == 0x22)
        return VGA::VideoMode::G640x480x4bppC;

    //     cmp  al, 28h                        ;Under VESA 0x108 VESA_MODE_80x60xText
    //     jb   Label0x64e3                    ;Offset 0x64e3
    if (videoMode < 0x28)
        return VGA::VideoMode::G320x200x8bppC;

    //     cmp  al, 2dh                        ;Under VESA 0x10d (320x200x32K)
    //     mov  al, 03h                        ;VGA 80x25 16 color text
    //     jb   Label0x64e5                    ;Offset 0x64e5
    if (videoMode < 0x2d)
        return VGA::VideoMode::T80x25x4bppC;

    // Label0x64df:                            ;Offset 0x64df
    //     mov  al, 12h                        ;640x480   16 color
    //     jmp  Label0x64e5                    ;Offset 0x64e5
    return VGA::VideoMode::G640x480x4bppC;

    // Label0x64e3:                            ;Offset 0x64e3
    //     mov  al, 13h                        ;320x200 256 color
    // Label0x64e5:                            ;Offset 0x64e5
    //     ret
}

void ClearScreen()//Offset 0x2ca5
{
    using namespace Hag;
    using namespace Hag::System;

    //     test      byte ptr ds:[BDA_VideoModeOptions], BDA_VMO_DontClearDisplay;Offset 0x487 0x80
    //     jne       Label0x2ce2               ;Offset 0x2ce2
    if (BDA::VideoModeOptions::Get() & BDA::VideoModeOptions::DontClearDisplay)
        return;

    //     cmp       word ptr ds:[BDA_VideoBufferSize], 00h;Offset 0x44c
    //     je        Label0x2ce2               ;Offset 0x2ce2
    if (BDA::VideoBufferSize::Get() == 0x0000)
        return;

    //     push      bx
    //     push      cx
    //     push      dx
    //     mov       al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    //     call      VesaToLegacyModeEquivalent                ;Offset 0x64cd
    VGA::VideoMode_t videoMode = VesaToLegacyModeEquivalent(BDA::DisplayMode::Get());

    //     mov       bx, 0a000h                ;Segment 0xa000
    uint16_t segment = 0xA000;

    //     mov       cx, 8000h
    uint16_t count = 0x8000;

    // Label0x2cd5:                            ;Offset 0x2cd5
    //     xor       dx, dx
    uint16_t value = 0x0000;

    //     cmp       al, BDA_DM_80x25_Monochrome_Text;0x7
    //     ja        Label0x2cd5               ;Offset 0x2cd5
    if (videoMode <= VGA::VideoMode::T80x25x1bppM)
    {
        //     mov       bh, 0b0h                  ;Segment 0xb000
        segment = 0xB000;

        //     mov       ch, 40h
        count = 0x4000;

        //     mov       dx, 0720h                 ;Attribute + space
        value = 0x0720;
        //     je        Label0x2cd7               ;Offset 0x2cd7
        if (videoMode != VGA::VideoMode::T80x25x1bppM)
        {
            //     mov       bh, 0b8h                  ;Segment 0xb800
            segment = 0xB800;

            //     cmp       al, BDA_DM_80x25_16_Color_Text;0x3
            //     jbe       Label0x2cd7               ;Offset 0x2cd7
            if (videoMode > VGA::VideoMode::T80x25x4bppC)
            {
                value = 0x0000;
            }
            // Label0x2cd7:                            ;Offset 0x2cd7
        }
    }
    //     mov       es, bx
    //     mov       ax, dx
    //     xor       di, di
    //     rep stosw
    uint16_t* ptr = FARPointer(segment, 0x0000).ToPointer<uint16_t>(count);
    for (uint16_t i = 0; i < count; ++i)
    {
        *ptr = value;
        ++ptr;
    }
    
    //     pop       dx
    //     pop       cx
    //     pop       bx
    // Label0x2ce2:                            ;Offset 0x2ce2
    //     ret
}

bool Func0x30a2()
{
    using namespace Hag;
    using namespace Hag::System;

    //     push  ax
    //     mov   al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    //     call  VesaToLegacyModeEquivalent                    ;Offset 0x64cd
    VGA::VideoMode_t mode = VesaToLegacyModeEquivalent(BDA::DisplayMode::Get());

    //     cmp   al, BDA_DM_80x25_Monochrome_Text;0x7
    //     je    Label0x30b3                   ;Offset 0x30b3
    if (mode == VGA::VideoMode::T80x25x1bppM)
        return true;

    //     cmp   al, BDA_DM_80x25_16_Color_Text;0x3
    //     ja    Label0x30b3                   ;Offset 0x30b3
    if (mode > VGA::VideoMode::T80x25x4bppC)
        return false;

    //     xor   al, al
    // Label0x30b3:                            ;Offset 0x30b3
    //     pop   ax
    //     ret
    return true;
}

//Data0x2d0e              DW (VGA_SEQ2_Mask2 SHL 8) OR VGA_SEQIdx_MapMask;0x0402
//                        DW ((VGA_SEQ4_Unknown1 OR VGA_SEQ4_MemSize256k OR VGA_SEQ4_CPUAnyMap) SHL 8) OR VGA_SEQIdx_MemoryMode;0x0704
//                        DW (VGA_GCTL4_Map2 SHL 8) OR VGA_GCTLIdx_ReadMapSelect;0x0204
//                        DW (VGA_GCTL5_BLU SHL 8) OR VGA_GCTLIdx_GraphicMode;0x0005
//                        DW (VGA_GCTL6_Mem_A0000_AFFFF SHL 8) OR VGA_GCTLIdx_Miscellaneous;0x0406
void ConfigureFontLoadMemoryMapping()//Offset 0x2ce3
{
    using namespace Hag;
    using namespace Hag::Matrox;

    VGA::Sequencer::EnableWritePlane::Write(VGA::Sequencer::EnableWritePlane::Plane3);
    Shared::Sequencer::MemoryModeControl::Write(
        Hag::Matrox::Shared::Sequencer::MemoryModeControl::Unknown1 |
        Hag::Matrox::Shared::Sequencer::MemoryModeControl::ExtendedMemoryAddress |
        Hag::Matrox::Shared::Sequencer::MemoryModeControl::SequentialAddressingMode);
    
    VGA::GraphicsController::ReadPlaneSelect::Write(VGA::GraphicsController::ReadPlaneSelect::Plane3);
    VGA::GraphicsController::GraphicsControllerMode::Write(VGA::GraphicsController::GraphicsControllerMode::Mode0);
    VGA::GraphicsController::MemoryMapModeControl::Write(VGA::GraphicsController::MemoryMapModeControl::A0000HtoAFFFFH);
}

//Data0x2d18              DW ((VGA_SEQ2_Mask0 OR VGA_SEQ2_Mask1) SHL 8)OR VGA_SEQIdx_MapMask;0x0302
//                        DW ((VGA_SEQ4_Unknown1 OR VGA_SEQ4_MemSize256k) SHL 8) OR VGA_SEQIdx_MemoryMode;0x0304
//                        DW (VGA_GCTL4_Map0 SHL 8) OR VGA_GCTLIdx_ReadMapSelect;0x0004
//                        DW (VGA_GCTL5_OddEven SHL 8) OR VGA_GCTLIdx_GraphicMode;0x1005
//                        DW ((VGA_GCTL6_AlphaMode OR VGA_GCTL6_ChainEven OR VGA_GCTL6_Mem_B8000_BFFFF) SHL 8) OR VGA_GCTLIdx_Miscellaneous;0x0e06
//                        DW ((VGA_GCTL6_AlphaMode OR VGA_GCTL6_ChainEven OR VGA_GCTL6_Mem_B0000_B7FFF) SHL 8) OR VGA_GCTLIdx_Miscellaneous;0x0a06
void ConfigureTextMemoryMapping()//Offset 0x2ce9
{
    using namespace Hag;
    using namespace Hag::System;
    using namespace Hag::Matrox;

    VGA::Sequencer::EnableWritePlane::Write(VGA::Sequencer::EnableWritePlane::Plane2);
    Shared::Sequencer::MemoryModeControl::Write(
        Hag::Matrox::Shared::Sequencer::MemoryModeControl::Unknown1 |
        Hag::Matrox::Shared::Sequencer::MemoryModeControl::ExtendedMemoryAddress);
    
    VGA::GraphicsController::ReadPlaneSelect::Write(VGA::GraphicsController::ReadPlaneSelect::Plane1);
    VGA::GraphicsController::GraphicsControllerMode::Write(VGA::GraphicsController::GraphicsControllerMode::OddEvenAddressing);
    if (BDA::VideoBaseIOPort::Get() == VGA::Register::CRTControllerIndexD)
        VGA::GraphicsController::MemoryMapModeControl::Write(
            VGA::GraphicsController::MemoryMapModeControl::ChainOddEvenPlanes |
            VGA::GraphicsController::MemoryMapModeControl::B8000HtoBFFFFH);
    else
    VGA::GraphicsController::MemoryMapModeControl::Write(
        VGA::GraphicsController::MemoryMapModeControl::ChainOddEvenPlanes |
        VGA::GraphicsController::MemoryMapModeControl::B0000HtoB7FFFH);
}

void Func0x2d47(uint8_t* font, uint16_t count, uint16_t val, uint16_t val2)//Offset 0x2d47
{
    static uint8_t Data0x2dbe[] = { 0x00, 0x40, 0x80, 0xC0, 0x20, 0x60, 0xA0, 0xE0 };

    REGPACK r;
    memset(&r, 0, sizeof(r));
    r.w.cx = count;
    r.w.dx = val;   //?
    r.w.bx = val2;  //bh = font height? bl = ?
    uint16_t saveCX = 0;
    uint16_t saveBX = 0;
    uint8_t* siPointer = font;
    FARPointer ptr;

    //     mov       si, bp
    //     push      es
    //     pop       ds
    //     mov       ax, 0a000h                ;Segment 0xa000
    r.w.ax = 0xA000;

    //     mov       es, ax
    ptr.Segment = r.w.ax;

    //     jcxz      Label0x2da6               ;Offset 0x2da6
    if (r.w.cx = 0x0000)
        goto Label0x2da6;

    // Label0x2d52:                            ;Offset 0x2d52
LABEL(Func0x2d47, Label0x2d52);

    //     push      cx
    saveCX = r.w.cx;
    //     mov       cl, 05h
    r.h.cl = 0x05;

    //     shl       dx, cl
    r.w.dx <<= r.h.cl;

    //     push      bx
    saveBX = r.w.bx;

    //     and       bx, 0007h
    r.w.bx &= 0x0007;

    //     add       dh, byte ptr cs:[bx + Data0x2dbe];Offset 0x2dbe
    r.h.dh += Data0x2dbe[r.w.bx];
    //     pop       bx
    r.w.bx = saveBX;

    //     mov       di, dx
    r.w.di = r.w.dx;
    ptr.Offset = r.w.dx;
    
    //     mov       dl, bh
    r.h.dl = r.h.bh;

    //     xor       dh, dh
    r.h.dh = 0x00;

    //     or        dl, dl
    //     jne       Label0x2d6d               ;Offset 0x2d6d
    if (r.h.dl != 0x00)
        goto Label0x2d6d;

    //     mov       dl, 10h
    r.h.dl = 0x10;

    // Label0x2d6d:                            ;Offset 0x2d6d
LABEL(Func0x2d47, Label0x2d6d);

    //     pop       ax
    r.w.ax = saveCX;

    // Label0x2d6e:                            ;Offset 0x2d6e
LABEL(Func0x2d47, Label0x2d6e);

    //     or        bh, bh
    //     jne       Label0x2d9a               ;Offset 0x2d9a
    if (r.h.bh != 0x00)
        goto Label0x2d9a;

    //     cmp       al, 99h
    //     je        Label0x2d8c               ;Offset 0x2d8c
    if (r.h.al == 0x99)
        goto Label0x2d8c;

    //     cmp       al, 96h
    //     je        Label0x2d8c               ;Offset 0x2d8c
    if (r.h.al == 0x96)
        goto Label0x2d8c;

    //     cmp       al, 87h
    //     je        Label0x2d8c               ;Offset 0x2d8c
    if (r.h.al == 0x87)
        goto Label0x2d8c;

    //     cmp       al, 90h
    //     je        Label0x2d8c               ;Offset 0x2d8c
    if (r.h.al == 0x90)
        goto Label0x2d8c;

    //     cmp       al, 8fh
    //     je        Label0x2d8c               ;Offset 0x2d8c
    if (r.h.al == 0x8F)
        goto Label0x2d8c;

    //     cmp       al, 68h
    //     je        Label0x2d8c               ;Offset 0x2d8c
    if (r.h.al == 0x68)
        goto Label0x2d8c;

    //     jmp       Label0x2d9a               ;Offset 0x2d9a
    goto Label0x2d9a;

    // Label0x2d8c:                            ;Offset 0x2d8c
LABEL(Func0x2d47, Label0x2d8c);

    //     mov       cx, 0008h
    r.w.cx = 0x0008;

    //     rep movsb
    memcpy(ptr.ToPointer<uint8_t>(8), siPointer, 8);
    r.w.di += 8;
    ptr.Offset += 8;
    siPointer += 8;

    //     inc       si
    ++siPointer;

    //     mov       cx, 0007h
    r.w.cx = 0x0007;

    //     rep movsb
    memcpy(ptr.ToPointer<uint8_t>(7), siPointer, 7);
    r.w.di += 7;
    ptr.Offset += 7;
    siPointer += 7;

    //     inc       di
    ++r.w.di;
    ++ptr.Offset;

    //     jmp       Label0x2d9e               ;Offset 0x2d9e
    goto Label0x2d9e;

    // Label0x2d9a:                            ;Offset 0x2d9a
LABEL(Func0x2d47, Label0x2d9a);

    //     mov       cx, dx
    r.w.cx = r.w.dx;

    //     rep movsb
    memcpy(ptr.ToPointer<uint8_t>(r.w.dx), siPointer, r.w.dx);
    ptr.Offset += r.w.dx;
    siPointer += r.w.dx;
    
    // Label0x2d9e:                            ;Offset 0x2d9e
LABEL(Func0x2d47, Label0x2d9e);

    //     sub       di, dx
    r.w.di -= r.w.dx;
    ptr.Offset -= r.w.dx;

    //     add       di, 0020h
    r.w.di += 0x0020;
    ptr.Offset += 0x0020;

    //     dec       ax
    --r.w.ax;

    //     jne       Label0x2d6e               ;Offset 0x2d6e
    if (r.w.ax != 0x0000)
        goto Label0x2d6e;

    // Label0x2da6:                            ;Offset 0x2da6
LABEL(Func0x2d47, Label0x2da6);

    //     or        bl, bl
    //     jns       Label0x2db3               ;Offset 0x2db3
    if ((r.h.bl & 0x80) == 0x00)
        goto Label0x2db3;

    //     mov       dl, byte ptr [si]
    r.h.dl = *siPointer;

    //     inc       si
    ++siPointer;

    //     inc       cx
    ++r.w.cx;

    //     or        dl, dl
    //     jne       Label0x2d52               ;Offset 0x2d52
    if (r.h.dl != 0x00)
        goto Label0x2d52;

    //     dec       cx
    --r.w.cx;

    // Label0x2db3:                            ;Offset 0x2db3
LABEL(Func0x2d47, Label0x2db3);

    //     or        bh, bh
    //     jne       Label0x2db9               ;Offset 0x2db9
    if (r.h.bh != 0x00)
        goto Label0x2db9;
        
    //     mov       bh, 0eh
    r.h.bh = 0x0E;

    // Label0x2db9:                            ;Offset 0x2db9
LABEL(Func0x2d47, Label0x2db9);

    //     push      ds
    //     pop       es
    //     mov       ds, cx                    ;I'm guessing cx is zero here...
    //     ret
}

void Func0x1645()//Offset 0x1645
{
    //TODO
    //     mov   al, BDA_VPCB_SecondaryCharSetOverride;0x6
    //     call  LookupVideoParameterControlBlockPointer;Offset 0x317d
    //     je    Label0x1683                   ;Offset 0x1683
    //     mov   al, 07h
    //     call  Func0x30b5                    ;Offset 0x30b5
    //     jne   Label0x1683                   ;Offset 0x1683
    //     lodsw word ptr es:[si]
    //     cmp   al, byte ptr ds:[BDA_PointHeightOfCharacterMatrix];Offset 0x485
    //     jne   Label0x1683                   ;Offset 0x1683
    //     push  ax
    //     xchg  al, ah
    //     and   al, 7fh
    //     xchg  ax, bx
    //     inc   si
    //     les   bp, es:[si]
    //     xor   dx, dx
    //     mov   cx, 0100h
    //     call  Func0x2d47                    ;Offset 0x2d47
    //     pop   ax
    //     shl   ah, 01h
    //     shl   ah, 01h
    //     add   ah, 10h
    //     mov   dx, VGA_SequenceIndex         ;Port 0x3c4
    //     mov   al, VGA_SEQIdx_CharacterMapSelect;0x3
    //     out   dx, al
    //     inc   dx
    //     in    al, dx
    //     and   ax, 2c13h
    //     or    al, ah
    //     out   dx, al
    // Label0x1683:                            ;Offset 0x1683
    //     ret
}

void Func0x1612()//Offset 0x1612
{
    //TODO
    //     mov   al, BDA_VPCB_AlphaNumCharSetOverride;0x8
    //     call  LookupVideoParameterControlBlockPointer;Offset 0x317d
    //     je    Label0x1644                   ;Offset 0x1644
    //     mov   al, 0bh
    //     call  Func0x30b5                    ;Offset 0x30b5
    //     jne   Label0x1644                   ;Offset 0x1644
    //     lodsw word ptr es:[si]
    //     xchg  al, ah
    //     xchg  ax, bx
    //     lodsw word ptr es:[si]
    //     xchg  ax, cx
    //     lodsw word ptr es:[si]
    //     xchg  ax, dx
    //     lodsw word ptr es:[si]
    //     xchg  ax, bp
    //     lodsw word ptr es:[si]
    //     push  word ptr es:[si]
    //     mov   es, ax
    //     call  Func0x2d47                    ;Offset 0x2d47
    //     call  Func0x2dc6                    ;Offset 0x2dc6
    //     pop   ax
    //     cmp   al, 0ffh
    //     je    Label0x1644                   ;Offset 0x1644
    //     dec   ax
    //     mov   byte ptr ds:[BDA_RowsOnScreen], al;Offset 0x484
    // Label0x1644:                            ;Offset 0x1644
    //     ret
}

void Func0x2d24(uint16_t val1, uint16_t val2, uint8_t* ptr, uint16_t count)//Offset 0x2d24
{
    REGPACK r;
    memset(&r, 0, sizeof(r));
    r.w.ax = val1;
    r.w.bx = val2;
    r.w.cx = count;
    uint8_t* bpPointer = ptr;
    // cbw
    r.h.ah = 0;

    // dec       ax
    --r.w.ax;

    // js        Func0x2d47                ;Offset 0x2d47
    if (r.w.ax < 0x0000)
    {
        Func0x2d47(bpPointer, r.w.cx, r.w.dx, r.w.bx);
        return;
    }
    // mov       cx, 0100h
    r.w.cx = 0x0100;

    // xor       dx, dx
    r.w.dx = 0x0000;

    // push      cs
    // pop       es
    // lea       bp, [Font8x16]            ;Offset 0x3f20
    bpPointer = Font8x16;

    // mov       bh, 00h
    r.h.bh = 0x00;

    // dec       ax
    --r.w.ax;

    // js        Func0x2d47                ;Offset 0x2d47
    if (r.w.ax < 0x0000)
    {
        Func0x2d47(bpPointer, r.w.cx, r.w.dx, r.w.bx);
        return;
    }

    // lea       bp, [Font8x8]             ;Offset 0x3720
    bpPointer = Font8x8;

    // mov       bh, 08h
    r.h.bh = 0x08;

    // dec       ax
    --r.w.ax;

    // js        Func0x2d47                ;Offset 0x2d47
    if (r.w.ax < 0x0000)
    {
        Func0x2d47(bpPointer, r.w.cx, r.w.dx, r.w.bx);
        return;
    }

    // lea       bp, [Font8x16]            ;Offset 0x3f20
    bpPointer = Font8x16;

    // mov       bh, 10h
    r.h.bh = 0x10;

    // call      Func0x2d47
    Func0x2d47(bpPointer, r.w.cx, r.w.dx, r.w.bx);
}

void SelectAndLoadFont()//Offset 0x1549
{
    using namespace Hag;
    using namespace Hag::System;

    //     call  ConfigureFontLoadMemoryMapping                    ;Offset 0x2ce3
    ConfigureFontLoadMemoryMapping();

    //     call  GetNumberOfActiveScanlines    ;Offset 0x3054
    uint8_t scanLines = GetNumberOfActiveScanlines();

    //     mov   ax, 0002h
    uint16_t val = 0x02;
    uint16_t val2 = 0x00;
    
    //     dec   al
    //     js    Label0x1565                   ;Offset 0x1565
    if (scanLines == 0)
        goto Label0x1565;
    
    //     mov   al, 03h
    val = 0x03;

    //     jne   Label0x1563                   ;Offset 0x1563
    if (scanLines > 1)
        goto Label0x1563;

    //     mov   al, 01h
    val = 0x01;

    //     cmp   byte ptr ds:[BDA_DisplayMode], BDA_DM_80x25_Monochrome_Text;Offset 0x449 0x7
    //     jne   Label0x1565                   ;Offset 0x1565
    if (BDA::DisplayMode::Get() != VGA::VideoMode::T80x25x1bppM)
        goto Label0x1565;

    // Label0x1563:                            ;Offset 0x1563
LABEL(SelectAndLoadFont, Label0x1563);

//     mov   ah, 80h
    val2 = 0x80;

    // Label0x1565:                            ;Offset 0x1565
LABEL(SelectAndLoadFont, Label0x1565);

    //     mov   bl, ah
    //     call  Func0x2d24                    ;Offset 0x2d24
    Func0x2d24(val, val2, NULL, 0x0000);

    //     call  Func0x1612                    ;Offset 0x1612
    Func0x1612();

    //     call  Func0x1645                    ;Offset 0x1645
    Func0x1645();

    //     call  ConfigureTextMemoryMapping                    ;Offset 0x2ce9
    ConfigureTextMemoryMapping();

    //     ret
}

void Func0x15ee()//Offset 0x15ee
{
    //TODO
    //     mov   al, BDA_VPCB_GrahicsCharSetOverride;0xc
    //     call  LookupVideoParameterControlBlockPointer;Offset 0x317d
    //     je    Label0x1611                   ;Offset 0x1611
    //     mov   al, 07h
    //     call  Func0x30b5                    ;Offset 0x30b5
    //     jne   Label0x1611                   ;Offset 0x1611
    //     lodsb byte ptr es:[si]
    //     dec   ax
    //     mov   byte ptr ds:[BDA_RowsOnScreen], al;Offset 0x484
    //     lodsw word ptr es:[si]
    //     mov   word ptr ds:[BDA_PointHeightOfCharacterMatrix], ax;Offset 0x485
    //     lodsw word ptr es:[si]
    //     mov   word ptr ds:[INT_43_HandlerOfs], ax;Offset 0x10c
    //     lodsw word ptr es:[si]
    //     mov   word ptr ds:[INT_43_HandlerSeg], ax;Offset 0x10e
    // Label0x1611:                            ;Offset 0x1611
    //     ret
}

void Func0x1574()
{
    //TODO
    //     call  GetNumberOfActiveScanlines    ;Offset 0x3054
    //     dec   al
    //     js    Label0x158e                   ;Offset 0x158e
    //     lea   ax, [Font8x16]                ;Offset 0x3f20
    //     mov   word ptr ds:[INT_43_HandlerOfs], ax;Offset 0x10c
    //     mov   ax, cs
    //     mov   word ptr ds:[INT_43_HandlerSeg], ax;Offset 0x10e
    //     jne   Label0x158e                   ;Offset 0x158e
    //     mov   ax, 0bd70h
    //     int   6dh
    // Label0x158e:                            ;Offset 0x158e
    //     xor   ax, ax
    //     mov   word ptr ds:[BDA_CursorEndScanLine], ax;Offset 0x460
    //     call  Func0x15ee                    ;Offset 0x15ee
    //     ret
}

void Func0x1597()
{
    //TODO
    //     mov   al, BDA_VPCB_PaletterProfileTable;0xa
    //     call  LookupVideoParameterControlBlockPointer;Offset 0x317d
    //     je    Label0x15ed                   ;Offset 0x15ed
    //     mov   al, 14h
    //     call  Func0x30b5                    ;Offset 0x30b5
    //     jne   Label0x15ed                   ;Offset 0x15ed
    //     lodsb byte ptr es:[si]
    //     or    al, al
    //     je    Label0x15bb                   ;Offset 0x15bb
    //     mov   ax, 1420h
    //     js    Label0x15b3                   ;Offset 0x15b3
    //     mov   al, byte ptr ds:[BDA_PointHeightOfCharacterMatrix];Offset 0x485
    // Label0x15b3:                            ;Offset 0x15b3
    //     dec   ax
    //     xchg  al, ah
    //     mov   dx, word ptr ds:[BDA_VideoBaseIOPort];Offset 0x463
    //     out   dx, ax
    // Label0x15bb:                            ;Offset 0x15bb
    //     test  byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_PaletteLoadingEnabled;Offset 0x489 0x8
    //     jne   Label0x15ed                   ;Offset 0x15ed
    //     push  es
    //     push  si
    //     add   si, 0003h
    //     lodsw word ptr es:[si]
    //     xchg  ax, cx
    //     lodsw word ptr es:[si]
    //     les   si, es:[si]
    //     jcxz  Label0x15d6                   ;Offset 0x15d6
    //     mov   ah, 10h
    //     call  Func0x2ebb                    ;Offset 0x2ebb
    // Label0x15d6:                            ;Offset 0x15d6
    //     pop   si
    //     pop   es
    //     add   si, 000bh
    //     lodsw word ptr es:[si]
    //     xchg  ax, cx
    //     lodsw word ptr es:[si]
    //     les   si, es:[si]
    //     jcxz  Label0x15ed                   ;Offset 0x15ed
    //     mov   dx, VGA_DACWriteIndex         ;Port 0x3c8
    //     out   dx, al
    //     inc   dx
    //     call  Func0x2f93                    ;Offset 0x2f93
    // Label0x15ed:                            ;Offset 0x15ed
    //     ret
}

void ActivateAttributeController()
{
    using namespace Hag;
    using namespace Hag::System;

    // push  dx
    // mov   dx, word ptr ds:[BDA_VideoBaseIOPort];Offset 0x463
    // add   dl, 06h                       ;Port 0x3?a
    // in    al, dx
    VGA::InputStatus1::Read(BDA::VideoBaseIOPort::Get() + 0x06);

    // mov   dl, VGA_AttributeControllerIndex_lowbyte;Port 0x3c0
    // mov   al, VGA_ATTR_PaletteAddressSource;0x20
    // out   dx, al
    VGA::AttributeControllerIndex::Write(VGA::AttributeControllerIndex::EnableVideoDisplay);

    // pop   dx
    // ret
}

void Func0x1499(Hag::VGA::VideoMode_t& videoMode, Hag::System::BDA::VideoModeOptions_t& videoModeOptions);

void Func0x13cf(Hag::VGA::VideoMode_t& videoMode, Hag::System::BDA::VideoModeOptions_t& videoModeOptions, Hag::VGA::Register_t& videoBaseIOPort)//Offset 0x13cf
{
    using namespace Hag;
    using namespace Hag::System;
    using namespace Hag::Matrox::Shared;

    REGPACK r;
    memset(&r, 0, sizeof(r));
    uint16_t saveDX = 0;

    //;
    //;inputs:
    //;   al = display mode
    //;   ah = video mode options
    //;   si = video base io port
    //;
    //;
    r.h.al = videoMode;
    r.h.ah = videoModeOptions;
    r.w.si = videoBaseIOPort;

    //     push      bx
    //     push      cx
    //     push      dx
    //     push      bp
    //     push      es

    //     push      ax
    //     call      TurnScreenOff             ;Offset 0x3109
    r.h.al = TurnScreenOff();

    //     mov       dx, ax
    r.w.dx = r.w.ax;

    //     pop       ax
    //     push      dx
    saveDX = r.w.dx;

    //     mov       byte ptr ds:[BDA_DisplayMode], al;Offset 0x449
    BDA::DisplayMode::Get() = r.h.al;
    
    //     mov       byte ptr ds:[BDA_VideoModeOptions], ah;Offset 0x487
    BDA::VideoModeOptions::Get() = r.h.ah;

    //     mov       word ptr ds:[BDA_VideoBaseIOPort], si;Offset 0x463
    BDA::VideoBaseIOPort::Get() = r.w.si;

    //     push      ax
    //     push      dx
    //     mov       dx, MGA_CRTCExtensionIndex;Port 0x3de
    //     mov       al, MGA_CRTCExt_HorCounterExt;0x1
    //     out       dx, al
    //     inc       dx
    //     in        al, dx
    //     or        al, MGA_CRTCEXT1_HorSyncOff OR MGA_CRTCEXT1_VerSyncOff;0x30
    //     out       dx, al
    //     pop       dx
    //     pop       ax
    CRTCExtension::HorizontalCounterExtensions::Write(
        CRTCExtension::HorizontalCounterExtensions::Read() |
        CRTCExtension::HorizontalCounterExtensions::HorizontalSyncOff |
        CRTCExtension::HorizontalCounterExtensions::VerticalSyncOff);

    //     call      Func0x1499                ;Offset 0x1499
    Func0x1499(r.h.al, r.h.ah);

    //     xor       ax, ax
    r.w.ax = 0;

    //     mov       es, ax
    r.w.es = r.w.ax;

    //     mov       byte ptr ds:[BDA_ActiveDisplayNumber], al;Offset 0x462
    BDA::ActiveDisplayNumber::Get() = r.h.al;

    //     mov       word ptr ds:[BDA_VideoBufferOffset], ax;Offset 0x44e
    BDA::VideoBufferOffset::Get() = r.w.ax;

    //     lea       di, ds:[DBA_CursorPositionPage0];Offset 0x450
    //     mov       cx, 0008h
    //     rep stosw
    BDA::CursorPositions::Clear();

    //     call      GetVideoParameterTable                ;Offset 0x2fe4
    BDA::VideoParameterTable& videoParameterTable = *GetVideoParameterTable();

    //     xor       ax, ax
    r.w.ax = 0;

    //     lodsb     byte ptr es:[si]
    //     mov       word ptr ds:[BDA_NumberOfScreenColumns], ax;Offset 0x44a
    BDA::NumberOfScreenColumns::Get() = videoParameterTable.NumCharacterColumns;
    
    //     lodsb     byte ptr es:[si]
    //     mov       byte ptr ds:[BDA_RowsOnScreen], al;Offset 0x484
    BDA::RowsOnScreen::Get() = videoParameterTable.NumScreenRowsMinus1;
    
    //     lodsb     byte ptr es:[si]
    //     mov       word ptr ds:[BDA_PointHeightOfCharacterMatrix], ax;Offset 0x485
    BDA::PointHeightOfCharacterMatrix::Get() = videoParameterTable.CharacterMatrixHeightInPoints;

    //     lodsw     word ptr es:[si]
    //     mov       word ptr ds:[BDA_VideoBufferSize], ax;Offset 0x44c
    BDA::VideoBufferSize::Get() = videoParameterTable.VideoBufferSize;

    //     mov       ax, word ptr es:[si + 0fh]
    //     xchg      al, ah
    //     mov       word ptr ds:[BDA_CursorEndStartScanLine], ax;Offset 0x460
    BDA::CursorScanLines::Get().Start = videoParameterTable.CRTCRegisters[VGA::CRTController::Register::CursorStartScanLine];
    BDA::CursorScanLines::Get().End = videoParameterTable.CRTCRegisters[VGA::CRTController::Register::CursorEndScanLine];

    //     call      Func0x2e39                ;Offset 0x2e39
    Func0x2e39(videoParameterTable);

    //     mov       dx, VGA_AttributeControllerIndex;Port 0x3c0
    //     mov       al, VGA_ATTR_ColorSelect  ;0x14
    //     out       dx, al
    //     xor       al, al
    r.h.al = 0;
    //     out       dx, al
    VGA::AttributeController::PixelPadding::Write(0);

    //     push      ax
    //     push      dx
    //     mov       dx, MGA_CRTCExtensionIndex;Port 0x3de
    //     mov       al, MGA_CRTCExt_HorCounterExt;0x1
    //     out       dx, al
    //     inc       dx
    //     in        al, dx
    //     and       al, NOT (MGA_CRTCEXT1_HorSyncOff OR MGA_CRTCEXT1_VerSyncOff);0xcf
    //     out       dx, al
    //     pop       dx
    //     pop       ax
    CRTCExtension::HorizontalCounterExtensions::Write(
        CRTCExtension::HorizontalCounterExtensions::Read() |
        ~(CRTCExtension::HorizontalCounterExtensions::HorizontalSyncOff |
        CRTCExtension::HorizontalCounterExtensions::VerticalSyncOff));

    //     call      InitializeAndSavePalettes                ;Offset 0x152a
    InitializeAndSavePalettes(videoParameterTable);

    //     call      ClearScreen               ;Offset 0x2ca5
    ClearScreen();

    //     lea       si, [SelectAndLoadFont]          ;Offset 0x1549
    //     call      Func0x30a2                ;Offset 0x30a2
    //     je        Label0x145c               ;Offset 0x145c
    //     lea       si, [Func0x1574]          ;Offset 0x1574
    // Label0x145c:                            ;Offset 0x145c
    //     call      si
    if (Func0x30a2())
        SelectAndLoadFont();
    else
        Func0x1574();

    //     call      Func0x1597                ;Offset 0x1597
    Func0x1597();

    //     call      ActivateAttributeController                ;Offset 0x30c9
    ActivateAttributeController();

    //     pop       ax
    //     call      TurnScreenOn              ;Offset 0x3105
    TurnScreenOn();
    
    static BDA::CRTModeControlRegValue_t CRTModeControlRegValue[] =
    {
        BDA::CRTModeControlRegValue::Monochrome |
        BDA::CRTModeControlRegValue::VideoEnabled |
        BDA::CRTModeControlRegValue::Blinking,//0x2c
        BDA::CRTModeControlRegValue::VideoEnabled |
        BDA::CRTModeControlRegValue::Blinking,//0x28
        BDA::CRTModeControlRegValue::Mode2Or3Text |
        BDA::CRTModeControlRegValue::Monochrome |
        BDA::CRTModeControlRegValue::VideoEnabled |
        BDA::CRTModeControlRegValue::Blinking,//0x2d
        BDA::CRTModeControlRegValue::Mode2Or3Text |
        BDA::CRTModeControlRegValue::VideoEnabled |
        BDA::CRTModeControlRegValue::Blinking,//0x29
        BDA::CRTModeControlRegValue::Mode4Or5Graphics |
        BDA::CRTModeControlRegValue::VideoEnabled |
        BDA::CRTModeControlRegValue::Blinking,//0x2a
        BDA::CRTModeControlRegValue::Mode4Or5Graphics |
        BDA::CRTModeControlRegValue::Monochrome |
        BDA::CRTModeControlRegValue::VideoEnabled |
        BDA::CRTModeControlRegValue::Blinking,//0x2e
        BDA::CRTModeControlRegValue::Mode4Or5Graphics |
        BDA::CRTModeControlRegValue::Monochrome |
        BDA::CRTModeControlRegValue::VideoEnabled |
        BDA::CRTModeControlRegValue::GraphicsOperation,//0x1e
        BDA::CRTModeControlRegValue::Mode2Or3Text |
        BDA::CRTModeControlRegValue::VideoEnabled |
        BDA::CRTModeControlRegValue::Blinking//0x29
    };

    //     mov       al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    //     cmp       al, BDA_DM_80x25_Monochrome_Text;0x7
    //     ja        Label0x1486               ;Offset 0x1486
    if (BDA::DisplayMode::Get() <= VGA::VideoMode::T80x25x1bppM)
    {
        //     mov       ah, al
        //     lea       bx, [CRTModeControlRegValue]           ;Offset 0x4a8
        //     xlatb     cs:[bx]
        //     mov       byte ptr ds:[BDA_CRTModeControlRegValue], al;Offset 0x465
        BDA::CRTModeControlRegValue::Get() = CRTModeControlRegValue[BDA::DisplayMode::Get()];

        //     mov       al, 30h
        //     cmp       ah, BDA_DM_640x200_BW_Graphics;0x6
        //     jne       Label0x1483               ;Offset 0x1483
        //     mov       al, 3fh
        // Label0x1483:                            ;Offset 0x1483
        //     mov       byte ptr ds:[BDA_CGAColorPaletteMaskSetting], al;Offset 0x466
        BDA::CGAColorPaletteMaskSetting::Get() = BDA::DisplayMode::Get() == VGA::VideoMode::G640x200x1bppM ? 0x3f : 0x30;
    }
    // Label0x1486:                            ;Offset 0x1486
    //     mov       al, byte ptr ds:[BDA_VideoDisplayDataArea];Offset 0x489
    //     and       al, BDA_VDDA_Reserved     ;0x20
    //     je        Label0x1492               ;Offset 0x1492
    //if ((BDA::VideoDisplayDataArea::Get() & BDA::VideoDisplayDataArea::Reserved) != 0x00)
    //{
        //     and       byte ptr ds:[BDA_VideoDisplayDataArea], NOT BDA_VDDA_Reserved;Offset 0x489 0xdf
        BDA::VideoDisplayDataArea::Get() &= ~BDA::VideoDisplayDataArea::Reserved;
    //}
    // Label0x1492:                            ;Offset 0x1492
    
    //     pop       es
    //     pop       bp
    //     pop       dx
    //     pop       cx
    //     pop       bx

    //     pop       ax
    //     ret
}

void Func0x13cc(Hag::VGA::VideoMode_t& videoMode, Hag::System::BDA::VideoModeOptions_t& videoModeOptions, Hag::VGA::Register_t& videoBaseIOPort)//Offset 0x13cc
{
    //;
    //;inputs:
    //;   al = display mode
    //;   ah = video mode options
    //;   si = video base io port
    //;
    //;
    //and       ah, NOT BDA_VMO_DontClearDisplay;0x7f
    videoModeOptions &= ~Hag::System::BDA::VideoModeOptions::DontClearDisplay;
    Func0x13cf(videoMode, videoModeOptions, videoBaseIOPort);
}

void DeactivateAndInvokeSystemHandler(Hag::VGA::VideoMode_t videoMode, Hag::System::BDA::VideoModeOptions_t videoModeOptions)//Offset 0x13aa
{
    using namespace Hag::System;
    // mov  byte ptr ds:[BDA_RowsOnScreen], 18h;Offset 0x484 0x18
    BDA::RowsOnScreen::Get() = 0x18;

    // or   ah, BDA_VMO_Inactive           ;0x8
    videoModeOptions |= BDA::VideoModeOptions::Inactive;

    // mov  byte ptr ds:[BDA_VideoModeOptions], ah;Offset 0x487
    BDA::VideoModeOptions::Get() = videoModeOptions;

    // cbw
    // int  42h
    // ret
    //printf("Invoke system int 10h handler.\n");
}

void DeactivateAndForward(Hag::VGA::VideoMode_t videoMode, Hag::System::BDA::VideoModeOptions_t videoModeOptions)//Offset 0x1399
{
    using namespace Hag::System;

    // mov  word ptr ds:[BDA_PointHeightOfCharacterMatrix], 0eh;Offset 0x485 0xe
    BDA::PointHeightOfCharacterMatrix::Get() = 0x0E;

    // call DeactivateAndInvokeSystemHandler                     ;Offset 0x13aa
    DeactivateAndInvokeSystemHandler(videoMode, videoModeOptions);

    // mov  word ptr ds:[BDA_CursorEndStartScanLine], 0b0ch;Offset 0x460
    BDA::CursorScanLines::Get().Start = 0x0B;
    BDA::CursorScanLines::Get().End = 0x0C;

    // pop  ax
    // ret
}

void Func0x13ba(Hag::VGA::VideoMode_t& videoMode, Hag::System::BDA::VideoModeOptions_t& videoModeOptions)//Offset 0x13ba
{
    //;
    //;inputs:
    //;   al = display mode
    //;   ah = video mode options
    //;
    //;
    //    test      ah, BDA_VMO_Monochrome    ;0x2
    //    je        DeactivateAndForward                ;Ofset 0x1399
    if ((videoModeOptions & Hag::System::BDA::VideoModeOptions::Monochrome) == 0)
    {
        DeactivateAndForward(videoMode, videoModeOptions);
        RETURN("Func0x13ba.Return 1");
    }
    //    mov       si, VGA_CRTControllerIndexB;Port 0x3b4
    Hag::VGA::Register_t videoBaseIOPort = Hag::VGA::Register::CRTControllerIndexB;

    //    cmp       al, BDA_DM_80x25_Monochrome_Text;0x7
    //    je        Func0x13cf                ;Offset 0x13cf
    if (videoMode == Hag::VGA::VideoMode::T80x25x1bppM)
    {
        Func0x13cf(videoMode, videoModeOptions, videoBaseIOPort);
        RETURN("Func0x13ba.Return 2");
    }
    //    cmp       al, BDA_DM_640x350_Monochrome_Graphics;0xf
    //    je        Func0x13cf                ;Offset 0x13cf
    if (videoMode == Hag::VGA::VideoMode::G640x350x1bppM)
    {
        Func0x13cf(videoMode, videoModeOptions, videoBaseIOPort);
        RETURN("Func0x13ba.Return 3");
    }
    //    mov       al, BDA_DM_80x25_Monochrome_Text;0x7
    videoMode = Hag::VGA::VideoMode::T80x25x1bppM;
    Func0x13cc(videoMode, videoModeOptions, videoBaseIOPort);

    RETURN("Func0x13ba.Return 4");
}

void Func0x149c(Hag::VGA::VideoMode_t& videoMode, Hag::System::BDA::VideoModeOptions_t& modeOptions)//Offset 0x149c
{
    using namespace Hag;
    using namespace Hag::System;

    REGPACK r;
    memset(&r, 0, sizeof(r));
    uint8_t* siPointer = NULL;
    bool isLower = false;

    r.h.al = videoMode;
    r.h.ah = modeOptions;
    
    //Data0x1520              DB 080h, VGA_CRTControllerIndexB_lowbyte, 0FFh, BDA_DH_80x25Monochrome, 002h;0x80 0xB4 0xFF 0x30 0x02
    static uint8_t Data0x1520[] = 
    {
        0x80,
        (uint8_t)VGA::CRTControllerIndex::CRTCRegisterIndex,
        0xFF,
        BDA::DetectedHardware::Monochrome80x25,
        BDA::VideoModeOptions::Monochrome
    };
    //Data0x1525              DB 001h, VGA_CRTControllerIndexD_lowbyte, BDA_DH_80x25Monochrome, 000h, 000h;0x01 0xD4 0x30 0x00 0x00
    static uint8_t Data0x1525[] =
    {
        0x01,
        (uint8_t)VGA::CRTControllerIndex::CRTCRegisterIndex,
        BDA::DetectedHardware::Monochrome80x25,
        0x00,
        BDA::VideoModeOptions::Color
    };

    //     test      byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_VGA;Offset 0x489 0x1
    //     je        Label0x151f               ;Offset 0x151f
    if ((BDA::VideoDisplayDataArea::Get() & BDA::VideoDisplayDataArea::VGA) == 0)
        goto Label0x151f;

    //     cmp       al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    //     je        Label0x151f               ;Offset 0x151f
    if (r.h.al == BDA::DisplayMode::Get())
        goto Label0x151f;

    //     push      bx
    //     push      dx
    //Unnecessary

    //     lea       si, [Data0x1520]          ;Offset 0x1520
    siPointer = Data0x1520;

    //     cmp       al, BDA_DM_80x25_Monochrome_Text;0x7
    //     je        Label0x14bb               ;Offset 0x14bb
    if (r.h.al == VGA::VideoMode::T80x25x1bppM)
        goto Label0x14bb;

    //     cmp       al, BDA_DM_640x350_Monochrome_Graphics;0xf
    //     je        Label0x14bb               ;Offset 0x14bb
    if (r.h.al == VGA::VideoMode::G640x350x1bppM)
        goto Label0x14bb;

    //     add       si, 0005h
        siPointer = Data0x1525;

    // Label0x14bb:                            ;Offset 0x14bb
LABEL(Func0x149c, Label0x14bb);

    //     xchg      ax, bx
    {
        uint16_t tmp = r.w.ax;
        r.w.ax = r.w.bx;
        r.w.bx = tmp;
    }

    //     mov       al, byte ptr ds:[BDA_VideoBaseIOPort];Offset 0x463
    r.h.al = uint8_t(BDA::VideoBaseIOPort::Get());

    //     cmp       al, byte ptr cs:[si + 01h]
    //     je        Label0x151c               ;Offset 0x151c
    if (r.h.al == siPointer[1])
        goto Label0x151c;

    //     mov       ah, bl
    r.h.ah = r.h.bl;

    //     mov       al, byte ptr ds:[BDA_DetectedHardware];Offset 0x410
    r.h.al = BDA::DetectedHardware::Get();

    //     and       al, BDA_DH_InitialVideoModeMask;0x30
    r.h.al &= BDA::DetectedHardware::InitialVideoModeMask;

    //     mov       bl, BDA_DM_80x25_Monochrome_Text;0x7
    r.h.bl = VGA::VideoMode::T80x25x1bppM;

    //     cmp       al, byte ptr cs:[si + 02h]
    //     je        Label0x151c               ;Offset 0x151c
    if (r.h.al == siPointer[2])
        goto Label0x151c;

    //     mov       bl, BDA_DM_80x25_16_Color_Text;0x3
    r.h.bl = VGA::VideoMode::T80x25x4bppC;

    //     cmp       al, byte ptr cs:[si + 03h]
    //     js        Label0x151c               ;Offset 0x151c
    if (r.h.al < siPointer[3])
        goto Label0x151c;

    //     mov       bl, ah
    r.h.bl = r.h.ah;

    //     and       bh, 0fdh
    r.h.bh &= ~BDA::VideoModeOptions::Monochrome;

    //     or        bh, byte ptr cs:[si + 04h]
    r.h.bh |= siPointer[4];

    //     mov       al, byte ptr ds:[BDA_EGAFeatureBitSwitches];Offset 0x488
    r.h.al = BDA::EGAFeatureBitSwitches::Get();

    //     and       al, BDA_EFBS_AdapterTypeMask;0xf
    r.h.al &= BDA::EGAFeatureBitSwitches::AdapterTypeMask;

    //     sub       al, BDA_EFBS_MDAColor40x25_2;0x6
    r.h.al -= BDA::EGAFeatureBitSwitches::MDAColor40x25_2;

    //     cmp       al, BDA_EFBS_CGAMono80x25 ;0x5
    //     ja        Label0x151c               ;Offset 0x151c
    if (r.h.al > BDA::EGAFeatureBitSwitches::CGAMono80x25)
        goto Label0x151c;

    //     sub       al, BDA_EFBS_MDAHiResEnhanced;0x3
    isLower = r.h.al <= BDA::EGAFeatureBitSwitches::MDAHiResEnhanced;
    r.h.al -= BDA::EGAFeatureBitSwitches::MDAHiResEnhanced;

    //     cbw
    r.h.ah = ((r.h.al & 0x80) != 0) ? 0xFF : 0x00;

    //     mov       al, BDA_EFBS_CGAMono80x25_2;0xb
    r.h.al = BDA::EGAFeatureBitSwitches::CGAMono80x25_2;

    //     jbe       Label0x14f9               ;Offset 0x14f9
    if (isLower)
        goto Label0x14f9;

    //     mov       al, BDA_EFBS_MDAHiResEnhanced_2;0x9
    r.h.al = BDA::EGAFeatureBitSwitches::MDAHiResEnhanced_2;

    // Label0x14f9:                            ;Offset 0x14f9
LABEL(Func0x149c, Label0x14f9);

    //     mov       dl, byte ptr ds:[BDA_VideoDisplayDataArea];Offset 0x489
    r.h.dl = BDA::VideoDisplayDataArea::Get();

    //     mov       dh, dl
    r.h.dh = r.h.dl;

    //     and       dx, 807fh
    r.h.dl &= ~BDA::VideoDisplayDataArea::LineMode200;
    r.h.dh &= BDA::VideoDisplayDataArea::LineMode200;

    //     rol       dh, 01h
    r.h.dh = (r.h.dh << 1) | (r.h.dh >> 7);

    //     and       dh, byte ptr cs:[si]
    r.h.dh &= siPointer[0];

    //     sub       al, dh
    r.h.al -= r.h.dh;

    //     and       ah, byte ptr cs:[si]
    r.h.ah &= siPointer[0];

    //     or        dl, ah
    r.h.dl |= r.h.ah;

    //     and       byte ptr ds:[BDA_EGAFeatureBitSwitches], BDA_EFBS_FeatureConnectorMask;Offset 0x488 0xf0
    BDA::EGAFeatureBitSwitches::Get() &= BDA::EGAFeatureBitSwitches::FeatureConnectorMask;

    //     or        byte ptr ds:[BDA_EGAFeatureBitSwitches], al;Offset 0x488
    BDA::EGAFeatureBitSwitches::Get() |= r.h.al;

    //     mov       byte ptr ds:[BDA_VideoDisplayDataArea], dl;Offset 0x489
    BDA::VideoDisplayDataArea::Get() = r.h.dl;

    // Label0x151c:                            ;Offset 0x151c
LABEL(Func0x149c, Label0x151c);

    //     xchg      ax, bx
    {
        uint16_t tmp = r.w.ax;
        r.w.ax = r.w.bx;
        r.w.bx = tmp;
    }

    //     pop       dx
    //     pop       bx
    // Label0x151f:                            ;Offset 0x151f
LABEL(Func0x149c, Label0x151f);
    //     ret
    videoMode = r.h.al;
    modeOptions = r.h.ah;
}

bool IsExtensionReg7Writeable()//Offset 0x5606
{
    using namespace Hag::Matrox;
    // push dx
    // mov  dx, MGA_CRTCExtensionIndex     ;Port 0x3de
    // mov  al, MGA_CRTCExt_Reserved7      ;0x7
    // out  dx, al
    Shared::CRTCExtensionIndex::Write(0x07);

    // in   ax, dx
    Shared::CRTCExtensionData_t save = Shared::CRTCExtensionData::Read();

    // push ax
    // mov  ax, 0a007h                     ;Unknown values.
    // out  dx, ax                         ;It seems to be checking if extension reg 7 is writeable.
    Shared::CRTCExtensionData::Write(0x07, 0x0A);

    // in   ax, dx
    // cmp  ah, 0a0h
    bool equal = Shared::CRTCExtensionData::Read() == 0x0A;
    
    // pop  ax
    // out  dx, ax
    Shared::CRTCExtensionData::Write(0x07, save);

    //printf("IsExtensionReg7Writeable : %s\n", save ? "Yes" : "No");
    // pop  dx
    // ret
    return equal;
}

uint8_t Data0x7814 = 0xEE;

void Func0x6257()//Offset 0x6257
{
    using namespace Hag;
    using namespace Hag::System;
    using namespace Hag::Matrox;
    
    REGPACK r;
    memset(&r, 0, sizeof(r));
    PCI::Device_t mystique = 0;
    
    //     push bx
    //     push cx
    //     push dx
    //     push si
    //     push di
    //     call IsExtensionReg7Writeable       ;Offset 0x5606
    //     je   Label0x62db                    ;Offset 0x62db
    if (IsExtensionReg7Writeable())
        goto Label0x62db;
    //     push es
    //     push ds
    //     push cs
    //     pop  ds
    //     call FindMystique                   ;Offset 0x57c6
    PCI::FindDevice(0x102B, 0x051A, mystique);
    //printf("PCI device found: 0x%04X\n", mystique);

    //     mov  cl, MGA_INDD_MiscellaneousControl;0x1e
    //     call ReadIndexedRegister            ;Offset 0x5bab
    //     and  cl, NOT (MGA_MISCCTRL_MAFC_MASK OR MGA_MISCCTRL_DAC_Bit_MASK);0xf1
    //     mov  ch, cl
    //     mov  cl, MGA_INDD_MiscellaneousControl;0x1e
    //     call WriteIndexedRegister           ;Offset 0x5b90
    Shared::PCI::Indexed::MiscellaneousControl::Write(mystique,
        Shared::PCI::Indexed::MiscellaneousControl::Read(mystique) &
        ~(Shared::Indexed::MiscellaneousControl::MAFCFuncSelect | Shared::Indexed::MiscellaneousControl::VGADACBitDepth));
    
    //     mov  cl, MGA_INDD_MultiplexControl  ;0x19
    //     xor  ch, ch                         ;MGA_MULCTRL_Depth8
    //     call WriteIndexedRegister           ;Offset 0x5b90
    Shared::PCI::Indexed::MultiplexControl::Write(mystique, Shared::Indexed::MultiplexControl::Bits8p);

    //     mov  cl, MGA_INDD_GeneralControl    ;0x1d
    //     call ReadIndexedRegister            ;Offset 0x5bab
    //     and  cl, NOT MGA_GENCTRL_PedestalControl_MASK;0xef
    //     mov  al, byte ptr cs:[Data0x7814]   ;Offset 0x7814
    //     and  al, 01h
    //     shl  al, 04h                        ;Pedestal Control
    //     or   cl, al
    //     mov  ch, MGA_INDD_GeneralControl    ;0x1d
    //     xchg cl, ch
    //     call WriteIndexedRegister           ;Offset 0x5b90
    Shared::PCI::Indexed::GeneralControl::Write(mystique,
        (Shared::PCI::Indexed::GeneralControl::Read(mystique) &
        ~Shared::Indexed::GeneralControl::PedestalControl) |
        ((Data0x7814 & 0x01) << 4));

    //     mov  cl, MGA_INDD_GeneralControl    ;0x1d
    //     call ReadIndexedRegister            ;Offset 0x5bab
    //     and  cl, NOT MGA_GENCTRL_GreenSyncOut_MASK;0xdf
    //     mov  al, byte ptr cs:[Data0x7814]   ;Offset 0x7814
    //     and  al, MGA_GENCTRL_GreenSyncOut_MASK;0x20
    //     or   cl, al
    //     mov  ch, MGA_INDD_GeneralControl    ;0x1d
    //     xchg cl, ch
    //     call WriteIndexedRegister           ;Offset 0x5b90
    Shared::PCI::Indexed::GeneralControl::Write(mystique,
        (Shared::PCI::Indexed::GeneralControl::Read(mystique) &
        ~Shared::Indexed::GeneralControl::GreenChannelSync) |
        (Data0x7814 & Shared::Indexed::GeneralControl::GreenChannelSync));

    //     mov  cl, MGA_INDD_GeneralControl    ;0x1d
    //     call ReadIndexedRegister            ;Offset 0x5bab
    //     and  cl, MGA_GENCTRL_PedestalControl_MASK OR MGA_GENCTRL_GreenSyncOut_MASK;0x30
    //     mov  ch, MGA_INDD_GeneralControl    ;0x1d
    //     xchg cl, ch
    //     call WriteIndexedRegister           ;Offset 0x5b90
    Shared::PCI::Indexed::GeneralControl::Write(mystique,
        Shared::PCI::Indexed::GeneralControl::Read(mystique) &
        (Shared::Indexed::GeneralControl::PedestalControl |
        Shared::Indexed::GeneralControl::GreenChannelSync));

    //     mov  cl, MGA_INDD_CursorControl     ;0x6
    //     mov  ch, MGA_CURCTRL_CursorDisabled ;0x0
    //     call WriteIndexedRegister           ;Offset 0x5b90
    Shared::PCI::Indexed::CursorControl::Write(mystique,
        Shared::Indexed::CursorControl::Disabled);

    //     mov  cl, MGA_INDD_PixelClockControl ;0x1a
    //     call ReadIndexedRegister            ;Offset 0x5bab
    //     and  cl, NOT MGA_PIXCLKCTRL_SelMASK ;0xfc
    //     or   cl, MGA_PIXCLKCTRL_SelPLL      ;0x1
    //     mov  ch, cl
    //     mov  cl, MGA_INDD_PixelClockControl ;0x1a
    //     call WriteIndexedRegister           ;Offset 0x5b90
    Shared::PCI::Indexed::PixelClockControl::Write(mystique,
        (Shared::PCI::Indexed::PixelClockControl::Read(mystique) &
        ~Shared::Indexed::PixelClockControl::ClockSelection) |
        Shared::Indexed::PixelClockControl::ClockPLL);

    //     pop  ds
    //     pop  es
    // Label0x62db:                            ;Offset 0x62db
LABEL(Func0x6257, Label0x62db);

    //     mov  ax, MGA_CRTCExt_AddrGeneratorExt SHL 8;0x0
    //     call MGAWriteCRTCExtensionRegister  ;Offset 0x3c4
    Shared::CRTCExtension::AddressGeneratorExtensions::Write(0x00);

    //     mov  ax, (MGA_CRTCExt_HorCounterExt SHL 8) OR MGA_CRTCEXT1_HorSyncOff OR MGA_CRTCEXT1_VerSyncOff;0x130
    //     call MGAWriteCRTCExtensionRegister  ;Offset 0x3c4
    Shared::CRTCExtension::HorizontalCounterExtensions::Write(
        Shared::CRTCExtension::HorizontalCounterExtensions::HorizontalSyncOff |
        Shared::CRTCExtension::HorizontalCounterExtensions::VerticalSyncOff);

    //     mov  ax, MGA_CRTCExt_VertCounterExt SHL 8;0x200
    //     call MGAWriteCRTCExtensionRegister  ;Offset 0x3c4
    Shared::CRTCExtension::VerticalCounterExtensions::Write(0x00);

    //     mov  dx, MGA_CRTCExtensionIndex     ;Port 0x3de
    //     mov  ah, byte ptr cs:[Data0x7814]   ;Offset 0x7814
    //     and  ah, MGA_CRTCEXT3_CompSyncEnable SHR 2;10h
    //     shl  ah, 02h                        ;MGA_CRTCEXT3_CompSyncEnable
    //     mov  al, MGA_CRTCExt_Misc           ;0x3
    //     out  dx, ax
    Shared::CRTCExtension::Miscellaneous::Write(
        (Data0x7814 & (Shared::CRTCExtension::Miscellaneous::CompositeSyncEnable >> 2)) << 2);

    //     mov  ax, MGA_CRTCExt_MemoryPage SHL 8;0x400
    //     call MGAWriteCRTCExtensionRegister  ;Offset 0x3c4
    Shared::CRTCExtension::MemoryPage::Write(0x00);

    //     mov  ax, MGA_CRTCExt_HorVidHalfCount SHL 8;0x500
    //     call MGAWriteCRTCExtensionRegister  ;Offset 0x3c4
    Shared::CRTCExtension::HorizontalHalfCount::Write(0x00);

    //     pop  di
    //     pop  si
    //     pop  dx
    //     pop  cx
    //     pop  bx
    //     ret
}

void Func0x1499(Hag::VGA::VideoMode_t& videoMode, Hag::System::BDA::VideoModeOptions_t& videoModeOptions)//Offset 0x1499
{
    //call      Func0x6257                ;Offset 0x6257
    Func0x6257();
    Func0x149c(videoMode, videoModeOptions);
}

bool SetVESAMode(Hag::Vesa::VideoMode_t videoMode)
{
    return true;
}

bool SetVideoMode(Hag::VGA::VideoMode_t videoMode)//Offset 0x12f0
{
    using namespace Hag;
    using namespace Hag::System;

    REGPACK r;
    memset(&r, 0, sizeof(r));
    uint16_t saveAX = 0;
    r.h.al = videoMode;

    //     push ax
    //     mov  ah, al
    r.h.ah = r.h.al;

    //     mov  al, byte ptr ds:[BDA_VideoDisplayDataArea];Offset 0x489
    r.h.al = BDA::VideoDisplayDataArea::Get();

    //     and  al, BDA_VDDA_Reserved          ;0x20
    r.h.al &= BDA::VideoDisplayDataArea::Reserved;

    //     je   Label0x12fd                    ;Offset 0x12fd
    if (r.h.al == 0)
        goto Label0x12fd;

    //     or   ah, BDA_DM_DONT_CLEAR_SCREEN   ;0x80
    r.h.ah |= VGA::VideoMode::DontClearDisplay;

    // Label0x12fd:                            ;Offset 0x12fd
LABEL(SetVideoMode, Label0x12fd);

    //     mov  al, byte ptr ds:[BDA_VideoModeOptions];Offset 0x487
    r.h.al = BDA::VideoModeOptions::Get();

    //     shl  ax, 01h                        ;Don't clear screen bit is now in carry flag
    //     xchg al, ah                         ;al = mode, ah = video mode options
    //     rcr  ax, 01h                        ;al no longer has clear screen bit, ah dont clear screen bit replaced.
    r.h.al &= ~BDA::VideoModeOptions::DontClearDisplay;
    r.h.al |= r.h.ah & BDA::VideoModeOptions::DontClearDisplay;
    r.h.ah &= ~BDA::VideoModeOptions::DontClearDisplay;
    {
        uint8_t x = r.h.al;
        r.h.al = r.h.ah;
        r.h.ah = x;
    }

    //     cmp  al, BDA_DM_320x200_256_Color_Graphics;0x13
    //     ja   Label0x136a                    ;Offset 0x136a
    if (r.h.al > VGA::VideoMode::G320x200x8bppC)
        goto Label0x136a;

    //     push ax
    saveAX = r.w.ax;

    //     cmp  al, BDA_DM_80x25_Monochrome_Text;0x7
    //     je   Label0x131c                    ;Offset 0x131c
    if (r.h.al == VGA::VideoMode::T80x25x1bppM)
        goto Label0x131c;

    //     cmp  al, BDA_DM_640x350_Monochrome_Graphics;0xf
    //     je   Label0x131c                    ;Offset 0x131c
    if (r.h.al == VGA::VideoMode::G640x350x1bppM)
        goto Label0x131c;

    //     mov  al, byte ptr ds:[BDA_DetectedHardware];Offset 0x410
    r.h.al = BDA::DetectedHardware::Get();

    //     and  al, NOT BDA_DH_InitialVideoModeMask;0xcf
    r.h.al &= ~BDA::DetectedHardware::InitialVideoModeMask;

    //     or   al, BDA_DH_80x25Color          ;0x20
    r.h.al |= BDA::DetectedHardware::Color80x25;

    //     jmp  Label0x1323                    ;Offset 0x1323
    goto Label0x1323;

    // Label0x131c:                            ;Offset 0x131c
LABEL(SetVideoMode, Label0x131c);

    //     mov  al, byte ptr ds:[BDA_DetectedHardware];Offset 0x410
    r.h.al = BDA::DetectedHardware::Get();

    //     and  al, NOT BDA_DH_InitialVideoModeMask;0xcf
    r.h.al &= ~BDA::DetectedHardware::InitialVideoModeMask;

    //     or   al, BDA_DH_80x25Monochrome     ;0x30
    r.h.al |= BDA::DetectedHardware::Monochrome80x25;

    // Label0x1323:                            ;Offset 0x1323
LABEL(SetVideoMode, Label0x1323);

    //     mov  byte ptr ds:[BDA_DetectedHardware], al;Offset 0x410
    BDA::DetectedHardware::Get() = r.h.al;

    //     pop  ax
    r.w.ax = saveAX;

    //     call Func0x149c                     ;Offset 0x149c
    Func0x149c(r.h.al, r.h.ah);

    //Don't set this pointer.
    //     mov  word ptr ds:[INT_43_HandlerOfs], offset Font8x8;Offset 0x10c Offset 0x3720
    //     mov  word ptr ds:[INT_43_HandlerSeg], cs;Offset 0x10e

    //     and  ah, 0f3h
    r.h.ah &= 0xF3;

    //     test byte ptr ds:[BDA_DetectedHardware], BDA_DH_InitialVideoModeMask;Offset 0x410 0x30
    //     je   Label0x1340                    ;Offset 0x1340
    if ((BDA::DetectedHardware::Get() & BDA::DetectedHardware::InitialVideoModeMask) == 0)
        goto Label0x1340;

    //     jp   Func0x13ba                     ;Offset 0x13ba
    if ((BDA::DetectedHardware::Get() & BDA::DetectedHardware::InitialVideoModeMask) == BDA::DetectedHardware::Monochrome80x25)
    {
        Func0x13ba(r.h.al, r.h.ah);
        RETURN_ARG("SetVideoMode.Return 1", true);
    }
    // Label0x1340:                            ;Offset 0x1340
LABEL(SetVideoMode, Label0x1340);

    //     test ah, 02h
    //     jne  Label0x1354                    ;Offset 0x1354
    if ((r.h.ah & 0x02) != 0)
        goto Label0x1354;
    //     mov  si, 3d4h
    r.w.si = 0x3D4;

    //     cmp  al, 07h
    //     je   Label0x1350                    ;Offset 0x1350
    if (r.h.al == 0x07)
        goto Label0x1350;

    //     cmp  al, 0fh
    //     jne  Func0x13cf                     ;Offset 0x13cf
    if (r.h.al != 0x0F)
    {
        Func0x13cf(r.h.al, r.h.ah, r.w.si);
        RETURN_ARG("SetVideoMode.Return 2", true);
    }
    // Label0x1350:                            ;Offset 0x1350
LABEL(SetVideoMode, Label0x1350);

    //     mov  al, 03h
    r.h.al = 0x03;

    //     jmp  Func0x13cc                     ;Offset 0x13cc
    Func0x13cc(r.h.al, r.h.ah, r.w.si);
    RETURN_ARG("SetVideoMode.Return 3", true);
    return true;
    // Label0x1354:                            ;Offset 0x1354
LABEL(SetVideoMode, Label0x1354);

    //     cmp  al, 02h
    //     jb   Label0x135f                    ;Offset 0x135f
    if (r.h.al < 0x02)
        goto Label0x135f;

    //     cmp  al, 03h
    //     ja   Label0x135f                    ;Offset 0x135f
    if (r.h.al > 0x03)
        goto Label0x135f;

    //     or   ah, 04h
    r.h.ah |= 0x04;

    // Label0x135f:                            ;Offset 0x135f
LABEL(SetVideoMode, Label0x135f);

    //     mov  word ptr ds:[BDA_PointHeightOfCharacterMatrix], 08h;Offset 0x485 0x8
    BDA::PointHeightOfCharacterMatrix::Get() = 0x08;

    //     call DeactivateAndInvokeSystemHandler                     ;Offset 0x13aa
    DeactivateAndInvokeSystemHandler(r.h.al, r.h.ah);

    // Label0x1368:                            ;Offset 0x1368
LABEL(SetVideoMode, Label0x1368);

    //     pop  ax
    //     ret
    RETURN_ARG("SetVideoMode.Return 4", true);

    // Label0x136a:                            ;Offset 0x136a
LABEL(SetVideoMode, Label0x136a);

    //     cmp  al, 6ah
    //     je   Label0x138d                    ;Offset 0x138d
    if (r.h.al == 0x6A)
        goto Label0x138d;

    //     mov  ah, al
    r.h.ah = r.h.al;

    //     and  ah, 0c0h
    r.h.ah &= 0xC0;

    //     or   ah, 01h
    r.h.ah |= 0x01;

    //     and  al, 3fh
    r.h.al &= 0x3F;

    //     cmp  al, 20h
    //     jb   Label0x1368                    ;Offset 0x1368
    if (r.h.al < 0x20)
        goto Label0x1368;

    //     cmp  al, 3fh
    //     ja   Label0x1368                    ;Offset 0x1368
    if (r.h.al > 0x3F)
        goto Label0x1368;

    //     sub  al, 20h
    r.h.al -= 0x20;

    //     push bx
    //     mov  bx, ax
    r.w.bx = r.w.ax;

    //     mov  ax, 04f02h
    //     int  10h
    //     pop  bx
    //     pop  ax
    //     ret
    RETURN_ARG("SetVideoMode.Return 5", SetVESAMode(r.w.bx));

    // Label0x138d:                            ;Offset 0x138d
LABEL(SetVideoMode, Label0x138d);

    //     pop  ax
    //     push bx
    //     mov  ax, 4f02h
    //     mov  bx, 0102h
    //     int  10h
    //     pop  bx
    //     ret
    RETURN_ARG("SetVideoMode.Return 6", SetVESAMode(0x102));
}

Hag::Testing::Mock::PortAndValue Matrox_Mystique_DefaultPortValues [] =
{
    { 0x03C2, 0x70 },
    { 0x03C4, 0xFF },
    { 0x03C5, 0xFF },
    { 0x03CA, 0x00 },
    { 0x03CC, 0x67 },
    { 0x03BA, 0xFF },
    { 0x03DA, 0x01 },
    { 0x03C3, 0xFF },
    { 0x03C6, 0xFF },
    { 0x03C7, 0x03 },
    { 0x03C8, 0x00 },
    { 0x03C9, 0x00 },
    { 0x03D4, 0xFF },
    { 0x03D5, 0xFF },
    { 0x0102, 0xFF },
    { 0x46E8, 0xFF }
};

uint8_t Matrox_Mystique_AttributeControllerRegisters[] =
{
    0x00,
    0x01,
    0x02,
    0x03,
    0x04,
    0x05,
    0x14,
    0x07,
    0x38,
    0x39,
    0x3A,
    0x3B,
    0x3C,
    0x3D,
    0x3E,
    0x3F,
    0x0C,
    0x00,
    0x0F,
    0x08,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
};

uint8_t Matrox_Mystique_RamdacControllerRegisters[] =
{
    0x00, 0x00, 0x00, //0
    0x00, 0x00, 0x2A, //1
    0x00, 0x2A, 0x00, //2
    0x00, 0x2A, 0x2A, //3
    0x2A, 0x00, 0x00, //4
    0x2A, 0x00, 0x2A, //5
    0x2A, 0x2A, 0x00, //6
    0x2A, 0x2A, 0x2A, //7
    0x00, 0x00, 0x15, //8
    0x00, 0x00, 0x3F, //9
    0x00, 0x2A, 0x15, //10
    0x00, 0x2A, 0x3F, //11
    0x2A, 0x00, 0x15, //12
    0x2A, 0x00, 0x3F, //13
    0x2A, 0x2A, 0x15, //14
    0x2A, 0x2A, 0x3F, //15
    0x00, 0x15, 0x00, //16
    0x00, 0x15, 0x2A, //17
    0x00, 0x3F, 0x00, //18
    0x00, 0x3F, 0x2A, //19
    0x2A, 0x15, 0x00, //20
    0x2A, 0x15, 0x2A, //21
    0x2A, 0x3F, 0x00, //22
    0x2A, 0x3F, 0x2A, //23
    0x00, 0x15, 0x15, //24
    0x00, 0x15, 0x3F, //25
    0x00, 0x3F, 0x15, //26
    0x00, 0x3F, 0x3F, //27
    0x2A, 0x15, 0x15, //28
    0x2A, 0x15, 0x3F, //29
    0x2A, 0x3F, 0x15, //30
    0x2A, 0x3F, 0x3F, //31
    0x15, 0x00, 0x00, //32
    0x15, 0x00, 0x2A, //33
    0x15, 0x2A, 0x00, //34
    0x15, 0x2A, 0x2A, //35
    0x3F, 0x00, 0x00, //36
    0x3F, 0x00, 0x2A, //37
    0x3F, 0x2A, 0x00, //38
    0x3F, 0x2A, 0x2A, //39
    0x15, 0x00, 0x15, //40
    0x15, 0x00, 0x3F, //41
    0x15, 0x2A, 0x15, //42
    0x15, 0x2A, 0x3F, //43
    0x3F, 0x00, 0x15, //44
    0x3F, 0x00, 0x3F, //45
    0x3F, 0x2A, 0x15, //46
    0x3F, 0x2A, 0x3F, //47
    0x15, 0x15, 0x00, //48
    0x15, 0x15, 0x2A, //49
    0x15, 0x3F, 0x00, //50
    0x15, 0x3F, 0x2A, //51
    0x3F, 0x15, 0x00, //52
    0x3F, 0x15, 0x2A, //53
    0x3F, 0x3F, 0x00, //54
    0x3F, 0x3F, 0x2A, //55
    0x15, 0x15, 0x15, //56
    0x15, 0x15, 0x3F, //57
    0x15, 0x3F, 0x15, //58
    0x15, 0x3F, 0x3F, //59
    0x3F, 0x15, 0x15, //60
    0x3F, 0x15, 0x3F, //61
    0x3F, 0x3F, 0x15, //62
    0x3F, 0x3F, 0x3F, //63
    0x00, 0x00, 0x00, //64
    0x00, 0x00, 0x00, //65
    0x00, 0x00, 0x00, //66
    0x00, 0x00, 0x00, //67
    0x00, 0x00, 0x00, //68
    0x00, 0x00, 0x00, //69
    0x00, 0x00, 0x00, //70
    0x00, 0x00, 0x00, //71
    0x00, 0x00, 0x00, //72
    0x00, 0x00, 0x00, //73
    0x00, 0x00, 0x00, //74
    0x00, 0x00, 0x00, //75
    0x00, 0x00, 0x00, //76
    0x00, 0x00, 0x00, //77
    0x00, 0x00, 0x00, //78
    0x00, 0x00, 0x00, //79
    0x00, 0x00, 0x00, //80
    0x00, 0x00, 0x00, //81
    0x00, 0x00, 0x00, //82
    0x00, 0x00, 0x00, //83
    0x00, 0x00, 0x00, //84
    0x00, 0x00, 0x00, //85
    0x00, 0x00, 0x00, //86
    0x00, 0x00, 0x00, //87
    0x00, 0x00, 0x00, //88
    0x00, 0x00, 0x00, //89
    0x00, 0x00, 0x00, //90
    0x00, 0x00, 0x00, //91
    0x00, 0x00, 0x00, //92
    0x00, 0x00, 0x00, //93
    0x00, 0x00, 0x00, //94
    0x00, 0x00, 0x00, //95
    0x00, 0x00, 0x00, //96
    0x00, 0x00, 0x00, //97
    0x00, 0x00, 0x00, //98
    0x00, 0x00, 0x00, //99
    0x00, 0x00, 0x00, //100
    0x00, 0x00, 0x00, //101
    0x00, 0x00, 0x00, //102
    0x00, 0x00, 0x00, //103
    0x00, 0x00, 0x00, //104
    0x00, 0x00, 0x00, //105
    0x00, 0x00, 0x00, //106
    0x00, 0x00, 0x00, //107
    0x00, 0x00, 0x00, //108
    0x00, 0x00, 0x00, //109
    0x00, 0x00, 0x00, //110
    0x00, 0x00, 0x00, //111
    0x00, 0x00, 0x00, //112
    0x00, 0x00, 0x00, //113
    0x00, 0x00, 0x00, //114
    0x00, 0x00, 0x00, //115
    0x00, 0x00, 0x00, //116
    0x00, 0x00, 0x00, //117
    0x00, 0x00, 0x00, //118
    0x00, 0x00, 0x00, //119
    0x00, 0x00, 0x00, //120
    0x00, 0x00, 0x00, //121
    0x00, 0x00, 0x00, //122
    0x00, 0x00, 0x00, //123
    0x00, 0x00, 0x00, //124
    0x00, 0x00, 0x00, //125
    0x00, 0x00, 0x00, //126
    0x00, 0x00, 0x00, //127
    0x00, 0x00, 0x00, //128
    0x00, 0x00, 0x00, //129
    0x00, 0x00, 0x00, //130
    0x00, 0x00, 0x00, //131
    0x00, 0x00, 0x00, //132
    0x00, 0x00, 0x00, //133
    0x00, 0x00, 0x00, //134
    0x00, 0x00, 0x00, //135
    0x00, 0x00, 0x00, //136
    0x00, 0x00, 0x00, //137
    0x00, 0x00, 0x00, //138
    0x00, 0x00, 0x00, //139
    0x00, 0x00, 0x00, //140
    0x00, 0x00, 0x00, //141
    0x00, 0x00, 0x00, //142
    0x00, 0x00, 0x00, //143
    0x00, 0x00, 0x00, //144
    0x00, 0x00, 0x00, //145
    0x00, 0x00, 0x00, //146
    0x00, 0x00, 0x00, //147
    0x00, 0x00, 0x00, //148
    0x00, 0x00, 0x00, //149
    0x00, 0x00, 0x00, //150
    0x00, 0x00, 0x00, //151
    0x00, 0x00, 0x00, //152
    0x00, 0x00, 0x00, //153
    0x00, 0x00, 0x00, //154
    0x00, 0x00, 0x00, //155
    0x00, 0x00, 0x00, //156
    0x00, 0x00, 0x00, //157
    0x00, 0x00, 0x00, //158
    0x00, 0x00, 0x00, //159
    0x00, 0x00, 0x00, //160
    0x00, 0x00, 0x00, //161
    0x00, 0x00, 0x00, //162
    0x00, 0x00, 0x00, //163
    0x00, 0x00, 0x00, //164
    0x00, 0x00, 0x00, //165
    0x00, 0x00, 0x00, //166
    0x00, 0x00, 0x00, //167
    0x00, 0x00, 0x00, //168
    0x00, 0x00, 0x00, //169
    0x00, 0x00, 0x00, //170
    0x00, 0x00, 0x00, //171
    0x00, 0x00, 0x00, //172
    0x00, 0x00, 0x00, //173
    0x00, 0x00, 0x00, //174
    0x00, 0x00, 0x00, //175
    0x00, 0x00, 0x00, //176
    0x00, 0x00, 0x00, //177
    0x00, 0x00, 0x00, //178
    0x00, 0x00, 0x00, //179
    0x00, 0x00, 0x00, //180
    0x00, 0x00, 0x00, //181
    0x00, 0x00, 0x00, //182
    0x00, 0x00, 0x00, //183
    0x00, 0x00, 0x00, //184
    0x00, 0x00, 0x00, //185
    0x00, 0x00, 0x00, //186
    0x00, 0x00, 0x00, //187
    0x00, 0x00, 0x00, //188
    0x00, 0x00, 0x00, //189
    0x00, 0x00, 0x00, //190
    0x00, 0x00, 0x00, //191
    0x00, 0x00, 0x00, //192
    0x00, 0x00, 0x00, //193
    0x00, 0x00, 0x00, //194
    0x00, 0x00, 0x00, //195
    0x00, 0x00, 0x00, //196
    0x00, 0x00, 0x00, //197
    0x00, 0x00, 0x00, //198
    0x00, 0x00, 0x00, //199
    0x00, 0x00, 0x00, //200
    0x00, 0x00, 0x00, //201
    0x00, 0x00, 0x00, //202
    0x00, 0x00, 0x00, //203
    0x00, 0x00, 0x00, //204
    0x00, 0x00, 0x00, //205
    0x00, 0x00, 0x00, //206
    0x00, 0x00, 0x00, //207
    0x00, 0x00, 0x00, //208
    0x00, 0x00, 0x00, //209
    0x00, 0x00, 0x00, //210
    0x00, 0x00, 0x00, //211
    0x00, 0x00, 0x00, //212
    0x00, 0x00, 0x00, //213
    0x00, 0x00, 0x00, //214
    0x00, 0x00, 0x00, //215
    0x00, 0x00, 0x00, //216
    0x00, 0x00, 0x00, //217
    0x00, 0x00, 0x00, //218
    0x00, 0x00, 0x00, //219
    0x00, 0x00, 0x00, //220
    0x00, 0x00, 0x00, //221
    0x00, 0x00, 0x00, //222
    0x00, 0x00, 0x00, //223
    0x00, 0x00, 0x00, //224
    0x00, 0x00, 0x00, //225
    0x00, 0x00, 0x00, //226
    0x00, 0x00, 0x00, //227
    0x00, 0x00, 0x00, //228
    0x00, 0x00, 0x00, //229
    0x00, 0x00, 0x00, //230
    0x00, 0x00, 0x00, //231
    0x00, 0x00, 0x00, //232
    0x00, 0x00, 0x00, //233
    0x00, 0x00, 0x00, //234
    0x00, 0x00, 0x00, //235
    0x00, 0x00, 0x00, //236
    0x00, 0x00, 0x00, //237
    0x00, 0x00, 0x00, //238
    0x00, 0x00, 0x00, //239
    0x00, 0x00, 0x00, //240
    0x00, 0x00, 0x00, //241
    0x00, 0x00, 0x00, //242
    0x00, 0x00, 0x00, //243
    0x00, 0x00, 0x00, //244
    0x00, 0x00, 0x00, //245
    0x00, 0x00, 0x00, //246
    0x00, 0x00, 0x00, //247
    0x00, 0x00, 0x00, //248
    0x00, 0x00, 0x00, //249
    0x00, 0x00, 0x00, //250
    0x00, 0x00, 0x00, //251
    0x00, 0x00, 0x00, //252
    0x00, 0x00, 0x00, //253
    0x00, 0x00, 0x00, //254
    0x00, 0x00, 0x00 //255
};

uint8_t Matrox_Mystique_CRTControllerRegisters[] =
{
    0x5F,
    0x4F,
    0x50,
    0x82,
    0x55,
    0x81,
    0xBF,
    0x1F,
    0x00,
    0x4F,
    0x0D,
    0x0E,
    0x00,
    0x00,
    0x00,
    0x00,
    0x9C,
    0x8E,
    0x8F,
    0x28,
    0x1F,
    0x96,
    0xB9,
    0xA3,
    0xFF
};

uint8_t Matrox_Mystique_GraphicsControllerRegisters[] =
{
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x10,
    0x0E,
    0x00,
    0xFF
};

uint8_t Matrox_Mystique_SequencerControllerRegisters[] =
{
    0x03,
    0x00,
    0x03,
    0x00,
    0x02
};

uint8_t Matrox_Mystique_CRTCExtensionRegisters[] =
{
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
};

void MatroxMystiqueMockConfigSetup(Hag::IAllocator& allocator)
{
    using namespace Hag::System;
    using namespace Hag::Testing;
    
    //printf("Mock initialization...\n");

    Hag::Testing::Mock::Initialize(allocator,
        Matrox_Mystique_DefaultPortValues,
        sizeof(Matrox_Mystique_DefaultPortValues) / sizeof(Mock::PortAndValue),
        Matrox_Mystique_AttributeControllerRegisters,
        Matrox_Mystique_RamdacControllerRegisters);

    Mock::AddIndexedPort("CRT Controller B", Hag::VGA::Register::CRTControllerIndexB, 0xff, Hag::VGA::Register::CRTControllerDataB, 0x19, Matrox_Mystique_CRTControllerRegisters);
    Mock::AddIndexedPort("CRT Controller D", Hag::VGA::Register::CRTControllerIndexD, 0xff, Hag::VGA::Register::CRTControllerDataD, 0x19, Matrox_Mystique_CRTControllerRegisters);
    Mock::AddIndexedPort("Graphics Controller", Hag::VGA::Register::GraphicsControllerIndex, 0x0f, Hag::VGA::Register::GraphicsControllerData, 0x09, Matrox_Mystique_GraphicsControllerRegisters);
    Mock::AddIndexedPort("Sequence Controller", Hag::VGA::Register::SequencerIndex, 0x1f, Hag::VGA::Register::SequencerData, 0x05, Matrox_Mystique_SequencerControllerRegisters);
    Mock::AddIndexedPort("CRTC Extension Controller", Hag::Matrox::Shared::Register::CRTCExtensionIndex, 0x07, Hag::Matrox::Shared::Register::CRTCExtensionData, 0x07, Matrox_Mystique_SequencerControllerRegisters);
    Mock::SetDefaultMemory((uint8_t*)&BDA::SystemBDA(), 0x0400, 0x100);//TODO: Should use something more static.
    //printf("Attempting to instantiate mock mystiques...\n");
    Mock::PCI::RegisterDevice(0, ::new(allocator.Allocate(sizeof(MockMystique))) MockMystique(allocator));
    Mock::PCI::RegisterDevice(1, ::new(allocator.Allocate(sizeof(MockMystique))) MockMystique(allocator));
    //printf("Succes!\n");
}

uint8_t modes[] = 
{
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
    0x10, 0x11, 0x12, 0x13
};

uint16_t modesCount = sizeof(modes);

int Diff(const char* name)
{
    int ret = -1;
    if (Hag::Testing::Mock::HasDifferences())
    {
        printf("\n%s >----------------\n", name);
        Hag::Testing::Mock::Report();
        ret = 0;
    }
    Hag::Testing::Mock::Snapshot();
    return ret;
}

int main(void)
{
    using namespace Hag;
    using namespace Hag::System;
    
    Support::Allocator allocator;
    MatroxMystiqueMockConfigSetup(allocator);

    for (uint16_t modesIdx = 0; modesIdx < modesCount; ++modesIdx)
    {
        //printf("Resetting...\n");
        Hag::Testing::Mock::Reset();

        uint8_t mode = modes[modesIdx];

        Hag::Testing::Mock::SelectInstance(0);
        //printf("Setting video mode...\n");
        SetVideoMode(mode);

        Hag::Testing::Mock::SelectInstance(1);
        //TODO: we put our C++ version here.

        //Diff("SetMode");
    }

    Hag::Testing::Mock::Shutdown();
    return 0;
}

//Offset 0xc4e0
Hag::System::BDA::VideoParameterTable VideoParameters[] =
{
    {
        0x28,
        0x18,
        0x08,
        0x0800,
        { 0x09, 0x03, 0x00, 0x02 },
        0x63,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F, 0x00, 0xC7, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x14, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x0800,
        { 0x09, 0x03, 0x00, 0x02 },
        0x63,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F, 0x00, 0xC7, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x14, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x1000,
        { 0x01, 0x03, 0x00, 0x02 },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0xC7, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x1000,
        { 0x01, 0x03, 0x00, 0x02 },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0xC7, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x4000,
        { 0x09, 0x03, 0x00, 0x02 },
        0x63,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0x80, 0xBF, 0x1F, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x14, 0x00, 0x96, 0xB9, 0xA2, 0xFF },
        { 0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x01, 0x00, 0x03, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0F, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x4000,
        { 0x09, 0x03, 0x00, 0x02 },
        0x63,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0x80, 0xBF, 0x1F, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x14, 0x00, 0x96, 0xB9, 0xA2, 0xFF },
        { 0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x01, 0x00, 0x03, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0F, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x4000,
        { 0x01, 0x01, 0x00, 0x06 },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x00, 0x96, 0xB9, 0xC2, 0xFF },
        { 0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x01, 0x00, 0x01, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x1000,
        { 0x00, 0x03, 0x00, 0x03 },
        0xA6,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x4D, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x28, 0x0D, 0x63, 0xBA, 0xA3, 0xFF },
        { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x0F, 0x08 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0A, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x10,
        0x7D00,
        { 0x21, 0x0F, 0x00, 0x06 },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x00,
        0x00,
        0x00,
        0x0000,
        { 0x00, 0x00, 0x00, 0x00 },
        0x00,
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
    },
    {
        0x28,
        0x18,
        0x08,
        0x4000,
        { 0x00, 0x00, 0x00, 0x03 },
        0x23,
        { 0x37, 0x27, 0x2D, 0x37, 0x31, 0x15, 0x04, 0x11, 0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x24, 0xC7, 0x14, 0x08, 0xE0, 0xF0, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x00,
        0x00,
        0x0000,
        { 0x29, 0x0F, 0x00, 0x06 },
        0x62,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xE3, 0xFF },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x0F, 0x00, 0x00, 0x08, 0x05, 0x0F, 0xFF }
    },
    {
        0x50,
        0x00,
        0x00,
        0x0000,
        { 0x29, 0x0F, 0x00, 0x06 },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xE3, 0xFF },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x0F, 0x00, 0x00, 0x08, 0x05, 0x0F, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x2000,
        { 0x09, 0x0F, 0x00, 0x06 },
        0x63,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0x80, 0xBF, 0x1F, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x14, 0x00, 0x96, 0xB9, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x4000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x00, 0x96, 0xB9, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x8000,
        { 0x05, 0x0F, 0x00, 0x00 },
        0xA2,
        { 0x60, 0x4F, 0x56, 0x1A, 0x50, 0xE0, 0x70, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x2E, 0x5D, 0x14, 0x00, 0x5E, 0x6E, 0x8B, 0xFF },
        { 0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0B, 0x00, 0x05, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07, 0x0F, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x8000,
        { 0x05, 0x0F, 0x00, 0x00 },
        0xA7,
        { 0x5B, 0x4F, 0x53, 0x17, 0x50, 0xBA, 0x6C, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x2B, 0x5D, 0x14, 0x0F, 0x5F, 0x0A, 0x8B, 0xFF },
        { 0x00, 0x01, 0x00, 0x00, 0x04, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x07, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07, 0x0F, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x8000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0xA2,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x28, 0x0F, 0x63, 0xBA, 0xE3, 0xFF },
        { 0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0B, 0x00, 0x05, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x8000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0xA3,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x28, 0x0F, 0x63, 0xBA, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x28,
        0x18,
        0x0E,
        0x0800,
        { 0x09, 0x03, 0x00, 0x02 },
        0xA3,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F, 0x00, 0x4D, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x14, 0x1F, 0x63, 0xBA, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x0E,
        0x0800,
        { 0x09, 0x03, 0x00, 0x02 },
        0xA3,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F, 0x00, 0x4D, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x14, 0x1F, 0x63, 0xBA, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x1000,
        { 0x01, 0x03, 0x00, 0x02 },
        0xA3,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x4D, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x28, 0x1F, 0x63, 0xBA, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x1000,
        { 0x01, 0x03, 0x00, 0x02 },
        0xA3,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x4D, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x28, 0x1F, 0x63, 0xBA, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x10,
        0x0800,
        { 0x08, 0x03, 0x00, 0x02 },
        0x67,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F, 0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x14, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x0C, 0x00, 0x0F, 0x08 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x10,
        0x1000,
        { 0x00, 0x03, 0x00, 0x02 },
        0x67,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x0C, 0x00, 0x0F, 0x08 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x10,
        0x1000,
        { 0x00, 0x03, 0x00, 0x02 },
        0x66,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x0F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x0F, 0x08 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0A, 0x00, 0xFF }
    },
    {
        0x50,
        0x1D,
        0x10,
        0xA000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0xE3,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0x0B, 0x3E, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x8C, 0xDF, 0x28, 0x00, 0xE7, 0x04, 0xC3, 0xFF },
        { 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0xFF }
    },
    {
        0x50,
        0x1D,
        0x10,
        0xA000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0xE3,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0x0B, 0x3E, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x8C, 0xDF, 0x28, 0x00, 0xE7, 0x04, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x2000,
        { 0x01, 0x0F, 0x00, 0x0E },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x40, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x41, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x0800,
        { 0x0B, 0x03, 0x00, 0x03 },
        0x23,
        { 0x37, 0x27, 0x2D, 0x37, 0x31, 0x15, 0x04, 0x11, 0x00, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x24, 0xC7, 0x14, 0x08, 0xE0, 0xF0, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x0800,
        { 0x0B, 0x03, 0x00, 0x03 },
        0x23,
        { 0x37, 0x27, 0x2D, 0x37, 0x31, 0x15, 0x04, 0x11, 0x00, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x24, 0xC7, 0x14, 0x08, 0xE0, 0xF0, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x1000,
        { 0x01, 0x03, 0x00, 0x03 },
        0x23,
        { 0x70, 0x4F, 0x5C, 0x2F, 0x5F, 0x07, 0x04, 0x11, 0x00, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x24, 0xC7, 0x28, 0x08, 0xE0, 0xF0, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x1000,
        { 0x01, 0x03, 0x00, 0x03 },
        0x23,
        { 0x70, 0x4F, 0x5C, 0x2F, 0x5F, 0x07, 0x04, 0x11, 0x00, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x24, 0xC7, 0x28, 0x08, 0xE0, 0xF0, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x4000,
        { 0x0B, 0x03, 0x00, 0x02 },
        0x23,
        { 0x37, 0x27, 0x2D, 0x37, 0x30, 0x14, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x24, 0xC7, 0x14, 0x00, 0xE0, 0xF0, 0xA2, 0xFF },
        { 0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x01, 0x00, 0x03, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0F, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x4000,
        { 0x0B, 0x03, 0x00, 0x02 },
        0x23,
        { 0x37, 0x27, 0x2D, 0x37, 0x30, 0x14, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x24, 0xC7, 0x14, 0x00, 0xE0, 0xF0, 0xA2, 0xFF },
        { 0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x01, 0x00, 0x03, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0F, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x4000,
        { 0x01, 0x01, 0x00, 0x06 },
        0x23,
        { 0x70, 0x4F, 0x59, 0x2D, 0x5E, 0x06, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x23, 0xC7, 0x28, 0x00, 0xDF, 0xEF, 0xC2, 0xFF },
        { 0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x01, 0x00, 0x01, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x1000,
        { 0x00, 0x03, 0x00, 0x03 },
        0xA6,
        { 0x60, 0x4F, 0x56, 0x3A, 0x51, 0x60, 0x70, 0x1F, 0x00, 0x0D, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x2E, 0x5D, 0x28, 0x0D, 0x5E, 0x6E, 0xA3, 0xFF },
        { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x0F, 0x08 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0A, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x4000,
        { 0x00, 0x00, 0x00, 0x03 },
        0x23,
        { 0x37, 0x27, 0x2D, 0x37, 0x31, 0x15, 0x04, 0x11, 0x00, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x24, 0xC7, 0x14, 0x08, 0xE0, 0xF0, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x4000,
        { 0x00, 0x00, 0x00, 0x03 },
        0x23,
        { 0x37, 0x27, 0x2D, 0x37, 0x31, 0x15, 0x04, 0x11, 0x00, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x24, 0xC7, 0x14, 0x08, 0xE0, 0xF0, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x4000,
        { 0x00, 0x00, 0x00, 0x03 },
        0x23,
        { 0x37, 0x27, 0x2D, 0x37, 0x31, 0x15, 0x04, 0x11, 0x00, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x24, 0xC7, 0x14, 0x08, 0xE0, 0xF0, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x1000,
        { 0x01, 0x04, 0x00, 0x07 },
        0x23,
        { 0x70, 0x4F, 0x5C, 0x2F, 0x5F, 0x07, 0x04, 0x11, 0x00, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x24, 0xC7, 0x28, 0x08, 0xE0, 0xF0, 0xA3, 0xFF },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x1000,
        { 0x00, 0x04, 0x00, 0x07 },
        0xA6,
        { 0x60, 0x4F, 0x56, 0x3A, 0x51, 0x60, 0x70, 0x1F, 0x00, 0x0D, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x2E, 0x5D, 0x28, 0x0D, 0x5E, 0x6E, 0xA3, 0xFF },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x0F, 0x08 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x2000,
        { 0x0B, 0x0F, 0x00, 0x06 },
        0x23,
        { 0x37, 0x27, 0x2D, 0x37, 0x30, 0x14, 0x04, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x24, 0xC7, 0x14, 0x00, 0xE0, 0xF0, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x4000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0x23,
        { 0x70, 0x4F, 0x59, 0x2D, 0x5E, 0x06, 0x04, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x23, 0xC7, 0x28, 0x00, 0xDF, 0xEF, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x8000,
        { 0x05, 0x0F, 0x00, 0x00 },
        0xA2,
        { 0x60, 0x4F, 0x56, 0x1A, 0x50, 0xE0, 0x70, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x2E, 0x5D, 0x14, 0x0D, 0x5E, 0x6E, 0x8B, 0xFF },
        { 0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0B, 0x00, 0x05, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07, 0x0F, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x8000,
        { 0x05, 0x0F, 0x00, 0x00 },
        0xA7,
        { 0x5B, 0x4F, 0x53, 0x17, 0x50, 0xBA, 0x6C, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x2B, 0x5D, 0x14, 0x0F, 0x5F, 0x0A, 0x8B, 0xFF },
        { 0x00, 0x01, 0x00, 0x00, 0x04, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x07, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07, 0x0F, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x8000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0xA2,
        { 0x60, 0x4F, 0x56, 0x3A, 0x50, 0x60, 0x70, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x2E, 0x5D, 0x28, 0x0D, 0x5E, 0x6E, 0xE3, 0xFF },
        { 0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0B, 0x00, 0x05, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x8000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0xA7,
        { 0x5B, 0x4F, 0x53, 0x37, 0x52, 0x00, 0x6C, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x2B, 0x5D, 0x28, 0x0F, 0x5F, 0x0A, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x28,
        0x18,
        0x0E,
        0x0800,
        { 0x0B, 0x03, 0x00, 0x03 },
        0xA7,
        { 0x2D, 0x27, 0x2B, 0x2D, 0x28, 0x6D, 0x6C, 0x1F, 0x00, 0x0D, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x2B, 0x5D, 0x14, 0x0F, 0x5E, 0x0A, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x0E,
        0x0800,
        { 0x0B, 0x03, 0x00, 0x03 },
        0xA7,
        { 0x2D, 0x27, 0x2B, 0x2D, 0x28, 0x6D, 0x6C, 0x1F, 0x00, 0x0D, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x2B, 0x5D, 0x14, 0x0F, 0x5E, 0x0A, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x1000,
        { 0x01, 0x03, 0x00, 0x03 },
        0xA7,
        { 0x5B, 0x4F, 0x53, 0x37, 0x51, 0x5B, 0x6C, 0x1F, 0x00, 0x0D, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x2B, 0x5D, 0x28, 0x0F, 0x5E, 0x0A, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x1000,
        { 0x01, 0x03, 0x00, 0x03 },
        0xA7,
        { 0x5B, 0x4F, 0x53, 0x37, 0x51, 0x5B, 0x6C, 0x1F, 0x00, 0x0D, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x2B, 0x5D, 0x28, 0x0F, 0x5E, 0x0A, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    }
};

PaletteData Data0x32f2 = 
{
    Hag::System::BDA::VideoDisplayDataArea::GrayScale | Hag::System::BDA::VideoDisplayDataArea::MonochromeMonitor,
    0x00,
    0x0040,
    {
        0x00, 0x02, 0x08, 0x0A, 0x20, 0x22, 0x28, 0x2A, 0x01, 0x03, 0x09, 0x0B, 0x21, 0x23, 0x29, 0x2B,
        0x04, 0x06, 0x0C, 0x0E, 0x24, 0x26, 0x2C, 0x2E, 0x05, 0x07, 0x0D, 0x0F, 0x25, 0x27, 0x2D, 0x2F,
        0x10, 0x12, 0x18, 0x1A, 0x30, 0x32, 0x38, 0x3A, 0x11, 0x13, 0x19, 0x1B, 0x31, 0x33, 0x39, 0x3B,
        0x14, 0x16, 0x1C, 0x1E, 0x34, 0x36, 0x3C, 0x3E, 0x15, 0x17, 0x1D, 0x1F, 0x35, 0x37, 0x3D, 0x3F
    }
};

PaletteData Data0x3236 =
{
    0x00,
    0x80,
    0x0040,
    {
        0x00, 0x05, 0x11, 0x1C, 0x08, 0x0B, 0x25, 0x28, 0x02, 0x07, 0x1B, 0x20, 0x0F, 0x14, 0x28, 0x2C,
        0x0C, 0x11, 0x25, 0x2A, 0x14, 0x1E, 0x32, 0x36, 0x0F, 0x13, 0x27, 0x2C, 0x1B, 0x20, 0x34, 0x39,
        0x06, 0x0B, 0x1F, 0x24, 0x13, 0x18, 0x2C, 0x30, 0x09, 0x0D, 0x21, 0x26, 0x15, 0x1A, 0x2E, 0x33,
        0x13, 0x17, 0x2B, 0x30, 0x1F, 0x24, 0x38, 0x3D, 0x0E, 0x18, 0x2D, 0x32, 0x20, 0x24, 0x38, 0x3F
    }
};

PaletteData Data0x337a =
{
    Hag::System::BDA::VideoDisplayDataArea::GrayScale | Hag::System::BDA::VideoDisplayDataArea::MonochromeMonitor,
    0x00,
    0x0040,
    {
        0x00, 0x02, 0x08, 0x0A, 0x20, 0x22, 0x24, 0x2A, 0x00, 0x02, 0x08, 0x0A, 0x20, 0x22, 0x24, 0x2A,
        0x15, 0x17, 0x1D, 0x1F, 0x35, 0x37, 0x3D, 0x3F, 0x15, 0x17, 0x1D, 0x1F, 0x35, 0x37, 0x3D, 0x3F,
        0x00, 0x02, 0x08, 0x0A, 0x20, 0x22, 0x24, 0x2A, 0x00, 0x02, 0x08, 0x0A, 0x20, 0x22, 0x24, 0x2A,
        0x15, 0x17, 0x1D, 0x1F, 0x35, 0x37, 0x3D, 0x3F, 0x15, 0x17, 0x1D, 0x1F, 0x35, 0x37, 0x3D, 0x3F
    }
};

PaletteData Data0x32be =
{
    0x00,
    0x80,
    0x0040,
    {
        0x00, 0x05, 0x11, 0x1C, 0x08, 0x0B, 0x14, 0x28, 0x00, 0x05, 0x11, 0x1C, 0x08, 0x0B, 0x14, 0x28,
        0x0E, 0x18, 0x2D, 0x32, 0x20, 0x24, 0x38, 0x3F, 0x0E, 0x18, 0x2D, 0x32, 0x20, 0x24, 0x38, 0x3F,
        0x00, 0x05, 0x11, 0x1C, 0x08, 0x0B, 0x14, 0x28, 0x00, 0x05, 0x11, 0x1C, 0x08, 0x0B, 0x14, 0x28,
        0x0E, 0x18, 0x2D, 0x32, 0x20, 0x24, 0x38, 0x3F, 0x0E, 0x18, 0x2D, 0x32, 0x20, 0x24, 0x38, 0x3F
    }
};

PaletteData Data0x3402 =
{
    0x00,
    0x00,
    0x0040,
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
        0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
        0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F
    }
};

PaletteData Data0x3446 =
{
    Hag::System::BDA::VideoDisplayDataArea::GrayScale | Hag::System::BDA::VideoDisplayDataArea::MonochromeMonitor,
    0x00,
    0x0010,
    {
        0x00, 0x02, 0x08, 0x0A, 0x20, 0x22, 0x24, 0x2A, 0x15, 0x17, 0x1D, 0x1F, 0x35, 0x37, 0x3D, 0x3F
    }
};

PaletteData Data0x345a =
{
    0x00,
    0x80,
    0x0010,
    {
        0x00, 0x05, 0x11, 0x1C, 0x08, 0x0B, 0x14, 0x28, 0x0E, 0x18, 0x2D, 0x32, 0x20, 0x24, 0x38, 0x3F
    }
};

PaletteData Data0x346e =
{
    0x00,
    0x80,
    0x0010,
    {
        0x00, 0x05, 0x08, 0x0B, 0x0E, 0x11, 0x14, 0x18, 0x1C, 0x20, 0x24, 0x28, 0x2D, 0x32, 0x38, 0x3F
    }
};

PaletteData Data0x3482 =
{
    0x00,
    0x40,
    0x00D8,
    {
        0x00, 0x00, 0x3F, 0x10, 0x00, 0x3F, 0x1F, 0x00, 0x3F, 0x2F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F,
        0x00, 0x2F, 0x3F, 0x00, 0x1F, 0x3F, 0x00, 0x10, 0x3F, 0x00, 0x00, 0x3F, 0x10, 0x00, 0x3F, 0x1F,
        0x00, 0x3F, 0x2F, 0x00, 0x3F, 0x3F, 0x00, 0x2F, 0x3F, 0x00, 0x1F, 0x3F, 0x00, 0x10, 0x3F, 0x00,
        0x00, 0x3F, 0x00, 0x00, 0x3F, 0x10, 0x00, 0x3F, 0x1F, 0x00, 0x3F, 0x2F, 0x00, 0x3F, 0x3F, 0x00,
        0x2F, 0x3F, 0x00, 0x1F, 0x3F, 0x00, 0x10, 0x3F, 0x1F, 0x1F, 0x3F, 0x27, 0x1F, 0x3F, 0x2F, 0x1F,
        0x3F, 0x37, 0x1F, 0x3F, 0x3F, 0x1F, 0x3F, 0x3F, 0x1F, 0x37, 0x3F, 0x1F, 0x2F, 0x3F, 0x1F, 0x27,
        0x3F, 0x1F, 0x1F, 0x3F, 0x27, 0x1F, 0x3F, 0x2F, 0x1F, 0x3F, 0x37, 0x1F, 0x3F, 0x3F, 0x1F, 0x37,
        0x3F, 0x1F, 0x2F, 0x3F, 0x1F, 0x27, 0x3F, 0x1F, 0x1F, 0x3F, 0x1F, 0x1F, 0x3F, 0x27, 0x1F, 0x3F,
        0x2F, 0x1F, 0x3F, 0x37, 0x1F, 0x3F, 0x3F, 0x1F, 0x37, 0x3F, 0x1F, 0x2F, 0x3F, 0x1F, 0x27, 0x3F,
        0x2D, 0x2D, 0x3F, 0x31, 0x2D, 0x3F, 0x36, 0x2D, 0x3F, 0x3A, 0x2D, 0x3F, 0x3F, 0x2D, 0x3F, 0x3F,
        0x2D, 0x3A, 0x3F, 0x2D, 0x36, 0x3F, 0x2D, 0x31, 0x3F, 0x2D, 0x2D, 0x3F, 0x31, 0x2D, 0x3F, 0x36,
        0x2D, 0x3F, 0x3A, 0x2D, 0x3F, 0x3F, 0x2D, 0x3A, 0x3F, 0x2D, 0x36, 0x3F, 0x2D, 0x31, 0x3F, 0x2D,
        0x2D, 0x3F, 0x2D, 0x2D, 0x3F, 0x31, 0x2D, 0x3F, 0x36, 0x2D, 0x3F, 0x3A, 0x2D, 0x3F, 0x3F, 0x2D,
        0x3A, 0x3F, 0x2D, 0x36, 0x3F, 0x2D, 0x31, 0x3F, 0x00, 0x00, 0x1C, 0x07, 0x00, 0x1C, 0x0E, 0x00,
        0x1C, 0x15, 0x00, 0x1C, 0x1C, 0x00, 0x1C, 0x1C, 0x00, 0x15, 0x1C, 0x00, 0x0E, 0x1C, 0x00, 0x07,
        0x1C, 0x00, 0x00, 0x1C, 0x07, 0x00, 0x1C, 0x0E, 0x00, 0x1C, 0x15, 0x00, 0x1C, 0x1C, 0x00, 0x15,
        0x1C, 0x00, 0x0E, 0x1C, 0x00, 0x07, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x07, 0x00, 0x1C,
        0x0E, 0x00, 0x1C, 0x15, 0x00, 0x1C, 0x1C, 0x00, 0x15, 0x1C, 0x00, 0x0E, 0x1C, 0x00, 0x07, 0x1C,
        0x0E, 0x0E, 0x1C, 0x11, 0x0E, 0x1C, 0x15, 0x0E, 0x1C, 0x18, 0x0E, 0x1C, 0x1C, 0x0E, 0x1C, 0x1C,
        0x0E, 0x18, 0x1C, 0x0E, 0x15, 0x1C, 0x0E, 0x11, 0x1C, 0x0E, 0x0E, 0x1C, 0x11, 0x0E, 0x1C, 0x15,
        0x0E, 0x1C, 0x18, 0x0E, 0x1C, 0x1C, 0x0E, 0x18, 0x1C, 0x0E, 0x15, 0x1C, 0x0E, 0x11, 0x1C, 0x0E,
        0x0E, 0x1C, 0x0E, 0x0E, 0x1C, 0x11, 0x0E, 0x1C, 0x15, 0x0E, 0x1C, 0x18, 0x0E, 0x1C, 0x1C, 0x0E,
        0x18, 0x1C, 0x0E, 0x15, 0x1C, 0x0E, 0x11, 0x1C, 0x14, 0x14, 0x1C, 0x16, 0x14, 0x1C, 0x18, 0x14,
        0x1C, 0x1A, 0x14, 0x1C, 0x1C, 0x14, 0x1C, 0x1C, 0x14, 0x1A, 0x1C, 0x14, 0x18, 0x1C, 0x14, 0x16,
        0x1C, 0x14, 0x14, 0x1C, 0x16, 0x14, 0x1C, 0x18, 0x14, 0x1C, 0x1A, 0x14, 0x1C, 0x1C, 0x14, 0x1A,
        0x1C, 0x14, 0x18, 0x1C, 0x14, 0x16, 0x1C, 0x14, 0x14, 0x1C, 0x14, 0x14, 0x1C, 0x16, 0x14, 0x1C,
        0x18, 0x14, 0x1C, 0x1A, 0x14, 0x1C, 0x1C, 0x14, 0x1A, 0x1C, 0x14, 0x18, 0x1C, 0x14, 0x16, 0x1C,
        0x00, 0x00, 0x10, 0x04, 0x00, 0x10, 0x08, 0x00, 0x10, 0x0C, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10,
        0x00, 0x0C, 0x10, 0x00, 0x08, 0x10, 0x00, 0x04, 0x10, 0x00, 0x00, 0x10, 0x04, 0x00, 0x10, 0x08,
        0x00, 0x10, 0x0C, 0x00, 0x10, 0x10, 0x00, 0x0C, 0x10, 0x00, 0x08, 0x10, 0x00, 0x04, 0x10, 0x00,
        0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0x00, 0x10, 0x08, 0x00, 0x10, 0x0C, 0x00, 0x10, 0x10, 0x00,
        0x0C, 0x10, 0x00, 0x08, 0x10, 0x00, 0x04, 0x10, 0x08, 0x08, 0x10, 0x0A, 0x08, 0x10, 0x0C, 0x08,
        0x10, 0x0E, 0x08, 0x10, 0x10, 0x08, 0x10, 0x10, 0x08, 0x0E, 0x10, 0x08, 0x0C, 0x10, 0x08, 0x0A,
        0x10, 0x08, 0x08, 0x10, 0x0A, 0x08, 0x10, 0x0C, 0x08, 0x10, 0x0E, 0x08, 0x10, 0x10, 0x08, 0x0E,
        0x10, 0x08, 0x0C, 0x10, 0x08, 0x0A, 0x10, 0x08, 0x08, 0x10, 0x08, 0x08, 0x10, 0x0A, 0x08, 0x10,
        0x0C, 0x08, 0x10, 0x0E, 0x08, 0x10, 0x10, 0x08, 0x0E, 0x10, 0x08, 0x0C, 0x10, 0x08, 0x0A, 0x10,
        0x0B, 0x0B, 0x10, 0x0C, 0x0B, 0x10, 0x0D, 0x0B, 0x10, 0x0F, 0x0B, 0x10, 0x10, 0x0B, 0x10, 0x10,
        0x0B, 0x0F, 0x10, 0x0B, 0x0D, 0x10, 0x0B, 0x0C, 0x10, 0x0B, 0x0B, 0x10, 0x0C, 0x0B, 0x10, 0x0D,
        0x0B, 0x10, 0x0F, 0x0B, 0x10, 0x10, 0x0B, 0x0F, 0x10, 0x0B, 0x0D, 0x10, 0x0B, 0x0C, 0x10, 0x0B,
        0x0B, 0x10, 0x0B, 0x0B, 0x10, 0x0C, 0x0B, 0x10, 0x0D, 0x0B, 0x10, 0x0F, 0x0B, 0x10, 0x10, 0x0B,
        0x0F, 0x10, 0x0B, 0x0D, 0x10, 0x0B, 0x0C, 0x10
    }
};

PaletteData* Palettes[] =
{
    &Data0x32f2,         // 0
    &Data0x3236,         // 1
    &Data0x337a,         // 2
    &Data0x32be,         // 3
    &Data0x3402,         // 4
    &Data0x3446,         // 5
    &Data0x345a,         // 6
    &Data0x346e,         // 7
    &Data0x3482          // 8
};

uint8_t Font8x8[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E,
    0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E, 0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00,
    0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x7C, 0x38, 0x7C,
    0x10, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,
    0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF, 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,
    0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, 0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78,
    0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0,
    0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0, 0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99,
    0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00, 0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00,
    0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
    0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00, 0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0xCC, 0x78,
    0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF,
    0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00,
    0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00,
    0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00,
    0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
    0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
    0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00, 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
    0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00, 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
    0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00,
    0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00, 0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00,
    0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00, 0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,
    0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00, 0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
    0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00, 0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
    0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00,
    0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
    0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00,
    0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00,
    0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00, 0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00,
    0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00, 0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00,
    0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00,
    0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00, 0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00,
    0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00, 0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00,
    0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,
    0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,
    0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x1C, 0x00,
    0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00, 0x78, 0xCC, 0xE0, 0x70, 0x1C, 0xCC, 0x78, 0x00,
    0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00,
    0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00,
    0xC6, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00,
    0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00, 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
    0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
    0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
    0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,
    0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
    0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
    0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00, 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00,
    0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00,
    0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
    0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E,
    0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00,
    0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
    0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, 0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00,
    0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
    0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00, 0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00,
    0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, 0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00,
    0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00,
    0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x18, 0x0C, 0x78, 0x00, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00,
    0x1C, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00, 0x7E, 0xC3, 0x3C, 0x06, 0x3E, 0x66, 0x3F, 0x00,
    0xCC, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00, 0xE0, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00,
    0x30, 0x30, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00, 0x00, 0x00, 0x78, 0xC0, 0xC0, 0x78, 0x0C, 0x38,
    0x7E, 0xC3, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, 0xCC, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
    0xE0, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00, 0xCC, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x7C, 0xC6, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00, 0xE0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0xC6, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x30, 0x30, 0x00, 0x78, 0xCC, 0xFC, 0xCC, 0x00,
    0x1C, 0x00, 0xFC, 0x60, 0x78, 0x60, 0xFC, 0x00, 0x00, 0x00, 0x7F, 0x0C, 0x7F, 0xCC, 0x7F, 0x00,
    0x3E, 0x6C, 0xCC, 0xFE, 0xCC, 0xCC, 0xCE, 0x00, 0x78, 0xCC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
    0x00, 0xCC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0xE0, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
    0x78, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00, 0x00, 0xE0, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00,
    0x00, 0xCC, 0x00, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8, 0xC3, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x18, 0x00,
    0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x18, 0x18, 0x7E, 0xC0, 0xC0, 0x7E, 0x18, 0x18,
    0x38, 0x6C, 0x64, 0xF0, 0x60, 0xE6, 0xFC, 0x00, 0xCC, 0xCC, 0x78, 0xFC, 0x30, 0xFC, 0x30, 0x30,
    0xF8, 0xCC, 0xCC, 0xFA, 0xC6, 0xCF, 0xC6, 0xC7, 0x0E, 0x1B, 0x18, 0x3C, 0x18, 0x18, 0xD8, 0x70,
    0x1C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00, 0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x00, 0x1C, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x1C, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00,
    0x00, 0xF8, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0x00, 0xFC, 0x00, 0xCC, 0xEC, 0xFC, 0xDC, 0xCC, 0x00,
    0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00,
    0x30, 0x00, 0x30, 0x60, 0xC0, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xC0, 0xC0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFC, 0x0C, 0x0C, 0x00, 0x00, 0xC3, 0xC6, 0xCC, 0xDE, 0x33, 0x66, 0xCC, 0x0F,
    0xC3, 0xC6, 0xCC, 0xDB, 0x37, 0x6F, 0xCF, 0x03, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
    0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00, 0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00,
    0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,
    0xDB, 0x77, 0xDB, 0xEE, 0xDB, 0x77, 0xDB, 0xEE, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36,
    0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36,
    0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00,
    0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36,
    0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36,
    0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x76, 0xDC, 0xC8, 0xDC, 0x76, 0x00, 0x00, 0x78, 0xCC, 0xF8, 0xCC, 0xF8, 0xC0, 0xC0,
    0x00, 0xFC, 0xCC, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0xFE, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x00,
    0xFC, 0xCC, 0x60, 0x30, 0x60, 0xCC, 0xFC, 0x00, 0x00, 0x00, 0x7E, 0xD8, 0xD8, 0xD8, 0x70, 0x00,
    0x00, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0xC0, 0x00, 0x76, 0xDC, 0x18, 0x18, 0x18, 0x18, 0x00,
    0xFC, 0x30, 0x78, 0xCC, 0xCC, 0x78, 0x30, 0xFC, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x6C, 0x38, 0x00,
    0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x6C, 0xEE, 0x00, 0x1C, 0x30, 0x18, 0x7C, 0xCC, 0xCC, 0x78, 0x00,
    0x00, 0x00, 0x7E, 0xDB, 0xDB, 0x7E, 0x00, 0x00, 0x06, 0x0C, 0x7E, 0xDB, 0xDB, 0x7E, 0x60, 0xC0,
    0x38, 0x60, 0xC0, 0xF8, 0xC0, 0x60, 0x38, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00,
    0x00, 0xFC, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0xFC, 0x00,
    0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xFC, 0x00, 0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xFC, 0x00,
    0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0x70,
    0x30, 0x30, 0x00, 0xFC, 0x00, 0x30, 0x30, 0x00, 0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00,
    0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0F, 0x0C, 0x0C, 0x0C, 0xEC, 0x6C, 0x3C, 0x1C,
    0x78, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

uint8_t* GraphicsFont8x8 = Font8x8 + 64 * 16;

uint8_t Font8x16[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7E, 0x81, 0xA5, 0x81, 0x81, 0xBD, 0x99, 0x81, 0x81, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7E, 0xFF, 0xDB, 0xFF, 0xFF, 0xC3, 0xE7, 0xFF, 0xFF, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x6C, 0xFE, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0xE7, 0xE7, 0xE7, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x7E, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x1E, 0x0E, 0x1A, 0x32, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x30, 0x30, 0x70, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7F, 0x63, 0x7F, 0x63, 0x63, 0x63, 0x63, 0x67, 0xE7, 0xE6, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x18, 0xDB, 0x3C, 0xE7, 0x3C, 0xDB, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFE, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x02, 0x06, 0x0E, 0x1E, 0x3E, 0xFE, 0x3E, 0x1E, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7F, 0xDB, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7C, 0xC6, 0x60, 0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6C, 0xFE, 0x6C, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7C, 0x7C, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x7C, 0x7C, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x7C, 0xC6, 0xC2, 0xC0, 0x7C, 0x06, 0x06, 0x86, 0xC6, 0x7C, 0x18, 0x18, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xC2, 0xC6, 0x0C, 0x18, 0x30, 0x60, 0xC6, 0x86, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xD6, 0xD6, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0x06, 0x06, 0x3C, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x0C, 0x1E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xFC, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x60, 0xC0, 0xC0, 0xFC, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC6, 0x06, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0x06, 0x0C, 0x78, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x0C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xDE, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x66, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xDE, 0xC6, 0xC6, 0x66, 0x3A, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xE6, 0x66, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xDE, 0x7C, 0x0C, 0x0E, 0x00, 0x00,
    0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x60, 0x38, 0x0C, 0x06, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xD6, 0xFE, 0xEE, 0x6C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0x6C, 0x7C, 0x38, 0x38, 0x7C, 0x6C, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC6, 0x86, 0x0C, 0x18, 0x30, 0x60, 0xC2, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
    0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xE0, 0x60, 0x60, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1C, 0x0C, 0x0C, 0x3C, 0x6C, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0x64, 0x60, 0xF0, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xCC, 0x78, 0x00,
    0x00, 0x00, 0xE0, 0x60, 0x60, 0x6C, 0x76, 0x66, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x06, 0x06, 0x00, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C, 0x00,
    0x00, 0x00, 0xE0, 0x60, 0x60, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xD6, 0xD6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C, 0x1E, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0x60, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0xF8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xCC, 0x18, 0x30, 0x60, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x0C, 0x06, 0x7C, 0x00, 0x00,
    0x00, 0x00, 0xCC, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0C, 0x18, 0x30, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x38, 0x6C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xCC, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x6C, 0x38, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x60, 0x60, 0x66, 0x3C, 0x0C, 0x06, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x38, 0x6C, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x3C, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC6, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x38, 0x6C, 0x38, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x30, 0x60, 0x00, 0xFE, 0x66, 0x60, 0x7C, 0x60, 0x60, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x76, 0x36, 0x7E, 0xD8, 0xD8, 0x6E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3E, 0x6C, 0xCC, 0xCC, 0xFE, 0xCC, 0xCC, 0xCC, 0xCC, 0xCE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x38, 0x6C, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x30, 0x78, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0x78, 0x00,
    0x00, 0xC6, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC6, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x18, 0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x6C, 0x64, 0x60, 0xF0, 0x60, 0x60, 0x60, 0x60, 0xE6, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xF8, 0xCC, 0xCC, 0xF8, 0xC4, 0xCC, 0xDE, 0xCC, 0xCC, 0xCC, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0E, 0x1B, 0x18, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0x70, 0x00, 0x00,
    0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0C, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x30, 0x60, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x30, 0x60, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x76, 0xDC, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
    0x76, 0xDC, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xC0, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC0, 0xC0, 0xC2, 0xC6, 0xCC, 0x18, 0x30, 0x60, 0xDC, 0x86, 0x0C, 0x18, 0x3E, 0x00, 0x00,
    0x00, 0xC0, 0xC0, 0xC2, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xCE, 0x9E, 0x3E, 0x06, 0x06, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6C, 0xD8, 0x6C, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x6C, 0x36, 0x6C, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
    0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,
    0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0xD8, 0xD8, 0xD8, 0xDC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xD8, 0xCC, 0xC6, 0xC6, 0xC6, 0xCC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC6, 0xC6, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFE, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFE, 0xC6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7E, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x6C, 0x6C, 0x6C, 0xEE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1E, 0x30, 0x18, 0x0C, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xDB, 0xDB, 0xDB, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x06, 0x7E, 0xDB, 0xDB, 0xF3, 0x7E, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1C, 0x30, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x30, 0x1C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xEC, 0x6C, 0x6C, 0x3C, 0x1C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xD8, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x70, 0xD8, 0x30, 0x60, 0xC8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};