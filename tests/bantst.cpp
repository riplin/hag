//Copyright 2025-Present riplin

#include <dos.h>
#include <limits.h>
#include <stdio.h>
#include <string.h>

#include <support/allocatr.h>
#include <hag/testing/mock.h>

#include <hag/system/bda.h>
#include <hag/system/pci.h>
#include <hag/system/pit.h>
#include <hag/drivers/vga/vga.h>
#include <hag/vesa/vidmodes.h>

#include <hag/system/keyboard.h>
#include <hag/drivers/vga/vga.h>
#include <support/dump.h>

#include <hag/drivers/3dfx/shared/crtc/ext0.h>
#include <hag/drivers/3dfx/shared/crtc/ext1.h>
#include <hag/drivers/3dfx/shared/crtc/ext2.h>
#include <hag/drivers/3dfx/shared/crtc/ext3.h>
#include <hag/drivers/3dfx/shared/crtc/horext.h>
#include <hag/drivers/3dfx/shared/crtc/verext.h>

#include <hag/drivers/3dfx/shared/io/dacmode.h>
#include <hag/drivers/3dfx/shared/io/drminit0.h>
#include <hag/drivers/3dfx/shared/io/drminit1.h>
#include <hag/drivers/3dfx/shared/io/vgainit0.h>
#include <hag/drivers/3dfx/shared/io/vgainit1.h>
#include <hag/drivers/3dfx/shared/io/viddostr.h>
#include <hag/drivers/3dfx/shared/io/viddsa.h>
#include <hag/drivers/3dfx/shared/io/vidprcfg.h>
#include <hag/drivers/3dfx/shared/io/vidscrs.h>
#include <hag/drivers/3dfx/shared/io/pllctrl0.h>
#include <hag/drivers/3dfx/shared/io/pllctrl1.h>
#include <hag/drivers/3dfx/shared/io/pllctrl2.h>

#include <hag/drivers/3dfx/shared/pci/iobaddr.h>

Hag::System::BDA::VideoParameterTable s_VideoParameters[] =
{
    {
        0x28,
        0x18,
        0x08,
        0x0800,
        { 0x09, 0x03, 0x00, 0x02 },
        0x63,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F, 0x00, 0xC7, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x14, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x0800,
        { 0x09, 0x03, 0x00, 0x02 },
        0x63,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F, 0x00, 0xC7, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x14, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x1000,
        { 0x01, 0x03, 0x00, 0x02 },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0xC7, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x1000,
        { 0x01, 0x03, 0x00, 0x02 },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0xC7, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x4000,
        { 0x09, 0x03, 0x00, 0x02 },
        0x63,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0x80, 0xBF, 0x1F, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x14, 0x00, 0x96, 0xB9, 0xA2, 0xFF },
        { 0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x01, 0x00, 0x03, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0F, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x4000,
        { 0x09, 0x03, 0x00, 0x02 },
        0x63,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0x80, 0xBF, 0x1F, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x14, 0x00, 0x96, 0xB9, 0xA2, 0xFF },
        { 0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x01, 0x00, 0x03, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0F, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x4000,
        { 0x01, 0x01, 0x00, 0x06 },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x00, 0x96, 0xB9, 0xC2, 0xFF },
        { 0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x01, 0x00, 0x01, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x1000,
        { 0x00, 0x03, 0x00, 0x03 },
        0xA6,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x4D, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x28, 0x0D, 0x63, 0xBA, 0xA3, 0xFF },
        { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x0F, 0x08 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0A, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x10,
        0xFFFF,
        { 0x01, 0x0F, 0x00, 0x0E },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x0E, 0x8F, 0x50, 0x1F, 0x96, 0xB9, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x41, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF }
    },
    {
        0x50,
        0x1D,
        0x10,
        0xFFFF,
        { 0x01, 0x0F, 0x00, 0x0E },
        0xE3,
        { 0x5F, 0x4F, 0x50, 0x82, 0x52, 0x9E, 0x0B, 0x3E, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x0C, 0xDF, 0x50, 0x00, 0xE7, 0x04, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x41, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF }
    },
    {
        0x64,
        0x24,
        0x10,
        0xFA00,
        { 0x01, 0x0F, 0x00, 0x06 },
        0x2F,
        { 0x7F, 0x63, 0x64, 0x82, 0x6B, 0x1B, 0x72, 0xF0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x0D, 0x57, 0x32, 0x00, 0x57, 0x73, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x64,
        0x24,
        0x10,
        0xFFFF,
        { 0x01, 0x0F, 0x00, 0x0E },
        0x2F,
        { 0x7F, 0x63, 0x64, 0x82, 0x69, 0x19, 0x72, 0xF0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x0D, 0x57, 0x64, 0x00, 0x58, 0x73, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF }
    },
    {
        0xA0,
        0x3F,
        0x10,
        0xFFFF,
        { 0x01, 0x0F, 0x00, 0x0E },
        0x2F,
        { 0xCE, 0x9F, 0xA0, 0x91, 0xA6, 0x14, 0x28, 0x52, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0xFF, 0xA0, 0x00, 0x01, 0x28, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x41, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x2000,
        { 0x09, 0x0F, 0x00, 0x06 },
        0x63,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0x80, 0xBF, 0x1F, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x14, 0x00, 0x96, 0xB9, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x50,
        0x18,
        0x08,
        0x4000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x00, 0x96, 0xB9, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x80,
        0x2F,
        0x10,
        0xFFFF,
        { 0x01, 0x0F, 0x00, 0x0E },
        0x2F,
        { 0xA3, 0x7F, 0x80, 0x87, 0x83, 0x94, 0x24, 0xF5, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x09, 0xFF, 0x80, 0x00, 0xFF, 0x25, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x41, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF }
    },
    {
        0x50,
        0x3B,
        0x08,
        0x2600,
        { 0x01, 0x03, 0x00, 0x02 },
        0xE3,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0x0B, 0x3E, 0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x8C, 0xDF, 0x28, 0x1F, 0xE7, 0x04, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x0C, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x8000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0xA2,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x28, 0x0F, 0x63, 0xBA, 0xE3, 0xFF },
        { 0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0B, 0x00, 0x05, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x8000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0xA3,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x28, 0x0F, 0x63, 0xBA, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x28,
        0x18,
        0x0E,
        0x0800,
        { 0x09, 0x03, 0x00, 0x02 },
        0xA3,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F, 0x00, 0x4D, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x14, 0x1F, 0x63, 0xBA, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x0E,
        0x0800,
        { 0x09, 0x03, 0x00, 0x02 },
        0xA3,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F, 0x00, 0x4D, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x14, 0x1F, 0x63, 0xBA, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x1000,
        { 0x01, 0x03, 0x00, 0x02 },
        0xA3,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x4D, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x28, 0x1F, 0x63, 0xBA, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x0E,
        0x1000,
        { 0x01, 0x03, 0x00, 0x02 },
        0xA3,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x4D, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x83, 0x85, 0x5D, 0x28, 0x1F, 0x63, 0xBA, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x08, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x10,
        0x0800,
        { 0x08, 0x03, 0x00, 0x02 },
        0x67,
        { 0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F, 0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x14, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x0C, 0x00, 0x0F, 0x08 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x10,
        0x1000,
        { 0x00, 0x03, 0x00, 0x02 },
        0x67,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x0C, 0x00, 0x0F, 0x08 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x50,
        0x18,
        0x10,
        0x1000,
        { 0x00, 0x03, 0x00, 0x02 },
        0x66,
        { 0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x0F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x0F, 0x08 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0A, 0x00, 0xFF }
    },
    {
        0x50,
        0x1D,
        0x10,
        0xA000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0xE3,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0x0B, 0x3E, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x8C, 0xDF, 0x28, 0x00, 0xE7, 0x04, 0xC3, 0xFF },
        { 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x01, 0x00, 0x01, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0xFF }
    },
    {
        0x50,
        0x1D,
        0x10,
        0xA000,
        { 0x01, 0x0F, 0x00, 0x06 },
        0xE3,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0x0B, 0x3E, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x8C, 0xDF, 0x28, 0x00, 0xE7, 0x04, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0x2000,
        { 0x01, 0x0F, 0x00, 0x0E },
        0x63,
        { 0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x40, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x41, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF }
    },
    {
        0x84,
        0x18,
        0x10,
        0x2000,
        { 0x01, 0x03, 0x00, 0x02 },
        0x6F,
        { 0x9A, 0x83, 0x84, 0x9D, 0x85, 0x13, 0xBF, 0x1F, 0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x42, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x0C, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x84,
        0x2A,
        0x09,
        0x4000,
        { 0x01, 0x03, 0x00, 0x02 },
        0x6F,
        { 0x9A, 0x83, 0x84, 0x9D, 0x85, 0x13, 0xBF, 0x1F, 0x00, 0x48, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x92, 0x84, 0x82, 0x42, 0x1F, 0x89, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x0C, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x84,
        0x31,
        0x08,
        0x4000,
        { 0x01, 0x03, 0x00, 0x02 },
        0x6F,
        { 0x9E, 0x83, 0x84, 0x81, 0x8A, 0x9E, 0xBF, 0x1F, 0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x42, 0x1F, 0x96, 0xB9, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x0C, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x84,
        0x3B,
        0x08,
        0x4000,
        { 0x01, 0x03, 0x00, 0x02 },
        0xEF,
        { 0x9E, 0x83, 0x84, 0x81, 0x8A, 0x9E, 0x0B, 0x3E, 0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x8C, 0xDF, 0x42, 0x1F, 0xE7, 0x04, 0xA3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x0C, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF }
    },
    {
        0x28,
        0x18,
        0x08,
        0xFFFF,
        { 0x01, 0x0F, 0x00, 0x0E },
        0x6F,
        { 0x2D, 0x27, 0x28, 0x90, 0x29, 0x8F, 0xBF, 0x1F, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF }
    },
    {
        0x28,
        0x1D,
        0x08,
        0xFFFF,
        { 0x01, 0x0F, 0x00, 0x0E },
        0xEF,
        { 0x2D, 0x27, 0x28, 0x90, 0x29, 0x8F, 0x0B, 0x3E, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x0C, 0xDF, 0x28, 0x1F, 0xE7, 0x04, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF }
    },
    {
        0x32,
        0x24,
        0x08,
        0xFFFF,
        { 0x01, 0x0F, 0x00, 0x0E },
        0x2F,
        { 0x3D, 0x31, 0x32, 0x80, 0x35, 0x1D, 0x72, 0xF0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x0D, 0x57, 0x64, 0x00, 0x58, 0x73, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF }
    },
    {
        0x40,
        0x1C,
        0x0E,
        0xFFFF,
        { 0x01, 0x0F, 0x00, 0x0E },
        0x2F,
        { 0x4F, 0x3F, 0x40, 0x83, 0x42, 0x0C, 0x24, 0xF5, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x09, 0xFF, 0x80, 0x00, 0xFF, 0x25, 0xE3, 0xFF },
        { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x41, 0x00, 0x0F, 0x00 },
        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF }
    }
};

struct ModeData
{
    Hag::VGA::VideoMode_t LegacyMode;
    uint8_t OtherTableIndex;//Also used as index into the video param table if unknown3 is 0
    Hag::Vesa::VideoMode_t VesaMode;
    uint8_t Flags;//Also index for palette setting. Instead of flags, perhaps type?
    uint8_t Unknown1;
    uint8_t BitsPerPixel;
    uint16_t Width;//In pixels or chars
    uint16_t Height;//In pixels or chars
    uint16_t Stride;//Bytes per scan line
    uint8_t CharacterHeight;
};

ModeData s_ModeData[] =
{
    //                           +----
    //                           | 0 =  0xb800, 32KB
    //                           | 1 =  0xb000, 32KB
    //                           | 2 =  0xb800, 32KB
    //                           | else 0xa000, 64KB
    //                           |
    //                           |
    //       Table               |        Bits    Width in    Height in
    //Legacy   0                 |         per     pixels      pixels     Bytes per  char
    // Mode  index VESA Mode     |        pixel   or chars    or chars    scan line height
    { 0x00,  0x17,  0x0000,    0x00, 0x08, 0x04,   0x0028,      0x0019,     0x0050,  0x10 },
    { 0x01,  0x17,  0x0001,    0x00, 0x08, 0x04,   0x0028,      0x0019,     0x0050,  0x10 },
    { 0x02,  0x18,  0x0002,    0x00, 0x08, 0x04,   0x0050,      0x0019,     0x00A0,  0x10 },
    { 0x03,  0x18,  0x0003,    0x00, 0x08, 0x04,   0x0050,      0x0019,     0x00A0,  0x10 },
    { 0x04,  0x04,  0x0004,    0x02, 0x01, 0x02,   0x0140,      0x00C8,     0x0050,  0x08 },
    { 0x05,  0x05,  0x0005,    0x02, 0x01, 0x02,   0x0140,      0x00C8,     0x0050,  0x08 },
    { 0x06,  0x06,  0x0006,    0x02, 0x01, 0x01,   0x0280,      0x00C8,     0x0050,  0x08 },
    { 0x07,  0x19,  0x0007,    0x01, 0x08, 0x00,   0x0050,      0x0019,     0x00A0,  0x10 },
    { 0x0D,  0x0D,  0x000D,    0x05, 0x08, 0x04,   0x0140,      0x00C8,     0x0028,  0x08 },
    { 0x0E,  0x0E,  0x000E,    0x05, 0x04, 0x04,   0x0280,      0x00C8,     0x0050,  0x08 },
    { 0x0F,  0x11,  0x000F,    0x03, 0x02, 0x01,   0x0280,      0x015E,     0x0050,  0x0E },
    { 0x10,  0x12,  0x0010,    0x05, 0x02, 0x04,   0x0280,      0x015E,     0x0050,  0x0E },
    { 0x11,  0x1A,  0x0011,    0x04, 0x01, 0x01,   0x0280,      0x01E0,     0x0050,  0x10 },
    { 0x12,  0x1B,  0x0012,    0x05, 0x01, 0x04,   0x0280,      0x01E0,     0x0050,  0x10 },
    { 0x13,  0x1C,  0x0013,    0x06, 0x01, 0x08,   0x0140,      0x00C8,     0x0140,  0x08 },
    { 0x5B,  0x08,  0x0100,    0x06, 0x01, 0x08,   0x0280,      0x0190,     0x0280,  0x10 },
    { 0x5F,  0x09,  0x0101,    0x06, 0x01, 0x08,   0x0280,      0x01E0,     0x0280,  0x10 },
    { 0x6A,  0x0A,  0x0102,    0x05, 0x01, 0x04,   0x0320,      0x0258,     0x0064,  0x10 },
    { 0x5C,  0x0B,  0x0103,    0x06, 0x01, 0x08,   0x0320,      0x0258,     0x0320,  0x10 },
    { 0x5E,  0x0F,  0x0105,    0x06, 0x01, 0x08,   0x0400,      0x0300,     0x0400,  0x10 },
    { 0x6B,  0x0C,  0x0107,    0x06, 0x01, 0x08,   0x0500,      0x0400,     0x0500,  0x10 },
    { 0x68,  0x10,  0x0108,    0x00, 0x06, 0x04,   0x0050,      0x003C,     0x00A0,  0x08 },
    { 0x55,  0x1D,  0x0109,    0x00, 0x02, 0x04,   0x0084,      0x0019,     0x0108,  0x10 },
    { 0x54,  0x1E,  0x010A,    0x00, 0x02, 0x04,   0x0084,      0x002B,     0x0108,  0x08 },
    { 0x65,  0x1F,  0x010B,    0x00, 0x02, 0x04,   0x0084,      0x0032,     0x0108,  0x08 },
    { 0x64,  0x20,  0x010C,    0x00, 0x02, 0x04,   0x0084,      0x003C,     0x0108,  0x08 },
    { 0x78,  0x21,  0x0180,    0x06, 0x01, 0x08,   0x0140,      0x00C8,     0x0140,  0x08 },
    { 0x20,  0x22,  0x0181,    0x06, 0x01, 0x08,   0x0140,      0x00F0,     0x0140,  0x08 },
    { 0x23,  0x23,  0x0184,    0x06, 0x01, 0x08,   0x0190,      0x012C,     0x0190,  0x08 },
    { 0x26,  0x24,  0x0187,    0x06, 0x01, 0x08,   0x0200,      0x0180,     0x0200,  0x08 },
    { 0x79,  0x25,  0x010E,    0x07, 0x01, 0x10,   0x0140,      0x00C8,     0x0280,  0x08 },
    { 0x7A,  0x26,  0x010F,    0x08, 0x01, 0x18,   0x0140,      0x00C8,     0x0400,  0x08 },
    { 0x21,  0x27,  0x0182,    0x07, 0x01, 0x10,   0x0140,      0x00F0,     0x0280,  0x08 },
    { 0x22,  0x28,  0x0183,    0x08, 0x01, 0x18,   0x0140,      0x00F0,     0x0400,  0x08 },
    { 0x24,  0x29,  0x0185,    0x07, 0x01, 0x10,   0x0190,      0x012C,     0x0320,  0x08 },
    { 0x25,  0x2A,  0x0186,    0x08, 0x01, 0x18,   0x0190,      0x012C,     0x0800,  0x08 },
    { 0x27,  0x2B,  0x0188,    0x07, 0x01, 0x10,   0x0200,      0x0180,     0x0400,  0x0E },
    { 0x28,  0x2C,  0x0189,    0x08, 0x01, 0x18,   0x0200,      0x0180,     0x0800,  0x0E },
    { 0x29,  0x2D,  0x018A,    0x07, 0x01, 0x10,   0x0280,      0x0190,     0x0500,  0x10 },
    { 0x2A,  0x2E,  0x018B,    0x08, 0x01, 0x18,   0x0280,      0x0190,     0x0800,  0x10 },
    { 0x6E,  0x2F,  0x0111,    0x07, 0x01, 0x10,   0x0280,      0x01E0,     0x0500,  0x10 },
    { 0x69,  0x30,  0x0112,    0x08, 0x01, 0x18,   0x0280,      0x01E0,     0x0800,  0x10 },
    { 0x70,  0x31,  0x0114,    0x07, 0x01, 0x10,   0x0320,      0x0258,     0x0640,  0x10 },
    { 0x71,  0x32,  0x0115,    0x08, 0x01, 0x18,   0x0320,      0x0258,     0x1000,  0x10 },
    { 0x72,  0x33,  0x0117,    0x07, 0x01, 0x10,   0x0400,      0x0300,     0x0800,  0x10 },
    { 0x73,  0x34,  0x0118,    0x08, 0x01, 0x18,   0x0400,      0x0300,     0x1000,  0x10 },
    { 0x74,  0x35,  0x011A,    0x07, 0x01, 0x10,   0x0500,      0x0400,     0x0A00,  0x10 },
    { 0x75,  0x36,  0x011B,    0x08, 0x01, 0x18,   0x0500,      0x0400,     0x1000,  0x10 }
};

// inputs:
//    al = mode

// outputs:
//    carry = 0 = found, 1 = not found
//    es:bx = pointer to mode data

bool FindModeData(Hag::VGA::VideoMode_t mode, ModeData*& modeData)//Offset 0x40d9
{
    modeData = nullptr;

    //     call   FetchCustomDataPointer       ;Offset 0x40f6
    //     les    bx, es:[bx + 04h]
    // Find:                                   ;Offset 0x40e0
    //     cmp    byte ptr es:[bx], 0ffh
    //     je     NotFound                     ;Offset 0x40f2
    //     cmp    byte ptr es:[bx], al
    //     je     Found                        ;Offset 0x40f0
    //     add    bx, 000eh
    //     jmp    Find                         ;Offset 0x40e0
    // Found:                                  ;Offset 0x40f0
    //     clc
    //     ret
    for (uint32_t i = 0; i < sizeof(s_ModeData) / sizeof(ModeData); ++i)
    {
        if (mode == s_ModeData[i].LegacyMode)
        {
            modeData = &s_ModeData[i];
            return true;
        }
    }

    // NotFound:                               ;Offset 0x40f2
    //     sub    bx, bx
    //     stc
    //     ret
    return false;
}

struct ExtraModeData
{
    uint8_t Unknown0;//Flags?
    uint8_t VerticalExtension;//Vertical Extension Register Byte 1
    uint8_t Unknown2;
    uint8_t Unknown3;//VideoParameterTable index
    Hag::TDfx::Shared::PLLControl0_t PLLControl0;//PLL Control 0
};

ExtraModeData s_ExtraModeData[] =
{
    { 0x00, 0x00, 0x04, 0x00, 0x0000 },
    { 0x00, 0x00, 0x04, 0x00, 0x0000 },
    { 0x00, 0x00, 0x01, 0x00, 0x0000 },
    { 0x00, 0x00, 0x01, 0x00, 0x0000 },
    { 0x00, 0x00, 0x04, 0x00, 0x0000 },
    { 0x00, 0x00, 0x04, 0x00, 0x0000 },
    { 0x00, 0x00, 0x01, 0x00, 0x0000 },
    { 0x00, 0x00, 0x00, 0x00, 0x0000 },
    { 0x01, 0x00, 0x01, 0x00, 0x0000 },
    { 0x01, 0x00, 0x02, 0x00, 0x0000 },
    { 0x00, 0x00, 0x03, 0x00, 0xBC3E },
    { 0x01, 0x00, 0x03, 0x00, 0xBC3E },
    { 0x01, 0x51, 0xFF, 0x00, 0xB358 },
    { 0x00, 0x00, 0x04, 0x00, 0x0000 },
    { 0x00, 0x00, 0x01, 0x00, 0x0000 },
    { 0x01, 0x00, 0xFF, 0x00, 0xE15D },
    { 0x00, 0x00, 0x02, 0x00, 0x0000 },
    { 0x00, 0x00, 0x00, 0x00, 0x0000 },
    { 0x00, 0x00, 0x00, 0x00, 0x0000 },
    { 0x00, 0x00, 0x04, 0x00, 0x0000 },
    { 0x00, 0x00, 0x04, 0x00, 0x0000 },
    { 0x00, 0x00, 0x01, 0x00, 0x0000 },
    { 0x00, 0x00, 0x01, 0x00, 0x0000 },
    { 0x00, 0x00, 0x04, 0x00, 0x0000 },
    { 0x00, 0x00, 0x01, 0x00, 0x0000 },
    { 0x00, 0x00, 0x01, 0x00, 0x0000 },
    { 0x00, 0x00, 0x02, 0x00, 0x0000 },
    { 0x00, 0x00, 0x02, 0x00, 0x0000 },
    { 0x00, 0x00, 0x01, 0x00, 0x0000 },
    { 0x00, 0x00, 0xFF, 0x00, 0xAEF4 },
    { 0x00, 0x00, 0xFF, 0x00, 0xAEF4 },
    { 0x00, 0x00, 0xFF, 0x00, 0xAEF4 },
    { 0x00, 0x00, 0xFF, 0x00, 0xAEF4 },
    { 0x05, 0x00, 0x01, 0x00, 0xD1EA },
    { 0x05, 0x00, 0x02, 0x00, 0xD1EA },
    { 0x05, 0x00, 0x03, 0x00, 0x56F4 },
    { 0x05, 0x00, 0xFF, 0x00, 0x8DF4 },
    { 0x0D, 0x00, 0x01, 0x21, 0xD1EA },
    { 0x15, 0x00, 0x01, 0x21, 0xD1EA },
    { 0x0D, 0x00, 0x02, 0x22, 0xD1EA },
    { 0x15, 0x00, 0x02, 0x22, 0xD1EA },
    { 0x0D, 0x00, 0x03, 0x23, 0x56F4 },
    { 0x15, 0x00, 0x03, 0x23, 0x56F4 },
    { 0x0D, 0x00, 0xFF, 0x24, 0x8DF4 },
    { 0x15, 0x00, 0xFF, 0x24, 0x8DF4 },
    { 0x09, 0x00, 0x01, 0x08, 0x0000 },
    { 0x11, 0x00, 0x01, 0x08, 0x0000 },
    { 0x09, 0x00, 0x02, 0x09, 0x0000 },
    { 0x11, 0x00, 0x02, 0x09, 0x0000 },
    { 0x09, 0x00, 0x03, 0x0B, 0xBC3E },
    { 0x11, 0x00, 0x03, 0x0B, 0xBC3E },
    { 0x09, 0x00, 0xFF, 0x0F, 0xE15D },
    { 0x11, 0x00, 0xFF, 0x0F, 0xE15D },
    { 0x09, 0x51, 0xFF, 0x0C, 0xB358 },
    { 0x11, 0x51, 0xFF, 0x0C, 0xB358 }
};

ExtraModeData* GetExtraModeData(ModeData& modeData)//Offset 0x3f29
{
    return &s_ExtraModeData[modeData.OtherTableIndex];
    // push   ax
    // push   cx
    // movzx  ax, byte ptr es:[bx + 01h]
    // mov    cl, 06h
    // mul    cl
    // call   FetchCustomDataPointer       ;Offset 0x40f6
    // les    si, es:[bx]
    // add    si, ax
    // pop    cx
    // pop    ax
    // ret
}

void ResetAttributeIndex()//Offset 0x4135
{
    // push  ax
    // push  dx

    // mov   dx, VGA_InputStatus1D         ;Port 0x3da
    // in    al, dx
    Hag::VGA::InputStatus1::Read(Hag::VGA::Register::InputStatus1D);

    // mov   dl, VGA_InputStatus1B_lowbyte ;Port 0x3ba
    // in    al, dx
    Hag::VGA::InputStatus1::Read(Hag::VGA::Register::InputStatus1B);

    // pop   dx
    // pop   ax
    // ret
}

void DisableAttributeControllerPaletteOutput()//Offset 0x407d
{
    // push   ax
    // push   dx

    // cli
    SYS_ClearInterrupts();

    // call   ResetAttributeIndex          ;Offset 0x4135
    ResetAttributeIndex();

    // mov    dx, VGA_AttributeControllerIndex;Port 0x3c0
    // sub    al, al
    // out    dx, al
    Hag::VGA::AttributeControllerIndex::Write(0);
    
    // sti
    SYS_RestoreInterrupts();

    // pop    dx
    // pop    ax
    // ret
}

void EnableAttributeControllerPaletteOutput()//Offset 0x408d
{
    // push   ax
    // push   dx

    // cli
    SYS_ClearInterrupts();

    // call   ResetAttributeIndex          ;Offset 0x4135
    ResetAttributeIndex();

    // mov    dx, VGA_AttributeControllerIndex;Port 0x3c0
    // mov    al, VGA_ATTR_PaletteAddressSource;0x20
    // out    dx, al
    Hag::VGA::AttributeControllerIndex::Write(Hag::VGA::AttributeControllerIndex::EnableVideoDisplay);

    // call   ResetAttributeIndex          ;Offset 0x4135
    ResetAttributeIndex();

    // sti
    SYS_RestoreInterrupts();

    // pop    dx
    // pop    ax
    // ret
}

void ApplyModeSettingsToBDA(Hag::System::BDA::VideoParameterTable& parameters)//Offset 0x3d6
{
    using namespace Hag;
    using namespace Hag::System;

    static uint8_t CRTControlRegValues[]=
    {
        0x2C,
        0x28,
        0x2D,
        0x29,
        0x2A,
        0x2E,
        0x1E,
        0x29
    };

    //     push      di
    //     push      es
    //     mov       cx, 0009h
    //     mov       di, BDA_VideoBufferOffset ;Offset 0x44e
    //     call      GetBIOSDataSelectorInES   ;Offset 0x3f46
    //     sub       ax, ax
    //     rep stosw
    BDA::VideoBufferOffset::Get() = 0;
    BDA::CursorPositions::Clear();

    //     pop       es
    //     pop       di
    //     mov       byte ptr ds:[BDA_ActiveDisplayNumber], al;Offset 0x462
    BDA::ActiveDisplayNumber::Get() = 0;

    //     mov       bl, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    //     mov       bh, ah

    //     cmp       bl, BDA_DM_80x25_Monochrome_Text;0x7
    //     ja        Label0x40c                ;Offset 0x40c
    if (BDA::DisplayMode::Get() <= VGA::VideoMode::T80x25x1bppM)
    {
        //     mov       al, byte ptr cs:[bx + CRTControlRegValues];Offset 0x3ce
        //     mov       byte ptr ds:[BDA_CRTModeControlRegValue], al;Offset 0x465
        BDA::CRTModeControlRegValue::Get() = CRTControlRegValues[BDA::DisplayMode::Get()];

        //     mov       byte ptr ds:[BDA_CGAColorPaletteMaskSetting], 3fh;Offset 0x466 0x3f
        BDA::CGAColorPaletteMaskSetting::Get() = 0x3f;

        //     cmp       bl, BDA_DM_640x200_BW_Graphics;0x6
        //     je        Label0x40c                ;Offset 0x40c
        //     mov       byte ptr ds:[BDA_CGAColorPaletteMaskSetting], 30h;Offset 0x466 0x30
        if (BDA::DisplayMode::Get() != VGA::VideoMode::G640x200x1bppM)
            BDA::CGAColorPaletteMaskSetting::Get() = 0x30;

        // Label0x40c:                             ;Offset 0x40c
    }
    //     mov       al, byte ptr es:[di]
    //     mov       word ptr ds:[BDA_NumberOfScreenColumns], ax;Offset 0x44a
    BDA::NumberOfScreenColumns::Get() = parameters.NumCharacterColumns;

    //     mov       al, byte ptr es:[di + 02h]
    //     mov       word ptr ds:[BDA_PointHeightOfCharacterMatrix], ax;Offset 0x485
    BDA::PointHeightOfCharacterMatrix::Get() = parameters.CharacterMatrixHeightInPoints;

    //     mov       al, byte ptr es:[di + 01h]
    //     mov       byte ptr ds:[BDA_RowsOnScreen], al;Offset 0x484
    BDA::RowsOnScreen::Get() = parameters.NumScreenRowsMinus1;

    //     mov       ax, word ptr es:[di + 03h]
    //     mov       word ptr ds:[BDA_VideoBufferSize], ax;Offset 0x44c
    BDA::VideoBufferSize::Get() = parameters.VideoBufferSize;

    //     mov       ax, word ptr es:[di + 14h]
    //     xchg      al, ah
    //     mov       word ptr ds:[BDA_CursorEndStartScanLine], ax;Offset 0x460
    BDA::CursorScanLines::Get().End = parameters.CRTCRegisters[VGA::CRTController::Register::CursorEndScanLine];
    BDA::CursorScanLines::Get().Start = parameters.CRTCRegisters[VGA::CRTController::Register::CursorStartScanLine];

    //     ret
}

uint8_t GetVideoParameterTableIndex(Hag::VGA::VideoMode_t mode)//Offset 0x35d4
{
    using namespace Hag;
    using namespace Hag::System;

    ModeData* modeData = nullptr;

    REGS r;
    memset(&r, 0, sizeof(r));

    r.h.al = mode;

    //     push      bx
    //     push      es
    //     cmp       al, 07h
    //     ja        Label0x3605               ;Offset 0x3605
    if (r.h.al > VGA::VideoMode::T80x25x1bppM)
        goto Label0x3605;
    
    //     je        Label0x35fa               ;Offset 0x35fa
    if (r.h.al == VGA::VideoMode::T80x25x1bppM)
        goto Label0x35fa;

    //     cmp       al, 03h
    //     ja        Label0x360e               ;Offset 0x360e
    if (r.h.al > VGA::VideoMode::T80x25x4bppC)
        goto Label0x360e;
    
    //     test      byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_LineMode200;Offset 0x80
    //     jne       Label0x360e               ;Offset 0x360e
    if ((BDA::VideoDisplayDataArea::Get() & BDA::VideoDisplayDataArea::LineMode200) != 0)
        goto Label0x360e;

    //     mov       bl, al
    r.h.bl = r.h.al;

    //     add       al, 13h
    r.h.al += 0x13;

    //     test      byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_LineMode400;Offset 0x489 0x10
    //     je        Label0x360e               ;Offset 0x360e
    if ((BDA::VideoDisplayDataArea::Get() & BDA::VideoDisplayDataArea::LineMode400) == 0)
        goto Label0x360e;
    
    //     mov       al, bl
    r.h.al = r.h.bl;

    //     shr       al, 01h
    r.h.al >>= 1;

    //     add       al, 17h
    r.h.al += 0x17;

    //     jmp       Label0x360e               ;Offset 0x360e
    goto Label0x360e;

    // Label0x35fa:                            ;Offset 0x35fa
    Label0x35fa:

    //     test      byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_LineMode400;Offset 0x489 0x10
    //     je        Label0x360e               ;Offset 0x360e
    if ((BDA::VideoDisplayDataArea::Get() & BDA::VideoDisplayDataArea::LineMode400) == 0)
        goto Label0x360e;

    //     mov       al, 19h
    r.h.al = 0x19;

    //     jmp       Label0x360e               ;Offset 0x360e
    goto Label0x360e;

    // Label0x3605:                            ;Offset 0x3605
    Label0x3605:

    //     call      FindModeData              ;Offset 0x40d9
    //     jb        Label0x3611               ;Offset 0x3611
    if (!FindModeData(r.h.al, modeData))
        goto Label0x3611;

    //     mov       al, byte ptr es:[bx + 01h]
        r.h.al = modeData->OtherTableIndex;

    // Label0x360e:                            ;Offset 0x360e
    Label0x360e:
    //     pop       es
    //     pop       bx
    //     ret
        return r.h.al;

    // Label0x3611:                            ;Offset 0x3611
    Label0x3611:

    //     sub       al, al
    r.h.al = 0;

    //     jmp       Label0x360e               ;Offset 0x360e
    goto Label0x360e;
}

Hag::System::BDA::VideoParameterTable& GetVideoParameterTable()//Offset 0x35a7
{
    using namespace Hag;
    using namespace Hag::System;

    ModeData* modeData = nullptr;
    ExtraModeData* extraModeData = nullptr;

    //     push      bx
    //     push      si

    //     mov       al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    VGA::VideoMode_t mode = BDA::DisplayMode::Get();

    //     cmp       al, BDA_DM_320x200_256_Color_Graphics;0x13
    //     jbe       Label0x35c1               ;Offset 0x35c1
    if (mode < VGA::VideoMode::G320x200x8bppC)
        goto Label0x35c1;

    //     call      FindModeData              ;Offset 0x40d9
    FindModeData(mode, modeData);

    //     call      Func0x3f29                ;Offset 0x3f29
    extraModeData = GetExtraModeData(*modeData);

    //     mov       al, byte ptr es:[si + 03h]
    mode = extraModeData->Unknown3;

    //     test      al, al
    //     jne       Label0x35c4               ;Offset 0x35c4
    if (extraModeData->Unknown3 != 0)
        goto Label0x35c4;

    //     mov       al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
        mode = BDA::DisplayMode::Get();

    // Label0x35c1:                            ;Offset 0x35c1
    Label0x35c1:

    //     call      GetVideoParameterTableIndex                ;Offset 0x35d4
    mode = GetVideoParameterTableIndex(mode);

    // Label0x35c4:                            ;Offset 0x35c4
    Label0x35c4:

    //     les       di, ds:[BDA_VideoParameterControlBlockPointer];Offset 0x4a8
    //     les       di, es:[di]               ;BDA_VPCB_VideoParameterTable
    //     cbw
    //     shl       ax, 06h
    //     add       di, ax
    return BDA::VideoParameterControlBlockPointer::Get()
        .ToPointer<BDA::VideoParameterControlBlock>()->VideoParameters
        .ToPointer<BDA::VideoParameterTable>(sizeof(BDA::VideoParameterTable) * (mode + 1))[mode];

    //     pop       si
    //     pop       bx
    //     ret
}

void TurnScreenOff()//Offset 0x3f6a
{
    // mov    dx, VGA_SequenceIndex        ;Port 0x3c4
    // mov    al, VGA_SEQIdx_ClockingMode  ;0x1
    // call   ReadIndexedRegister          ;Offset 0x3f84
    // or     ah, VGA_SEQ1_ScreenOff       ;0x20
    // out    dx, ax
    Hag::VGA::Sequencer::ClockingMode::Write(
        Hag::VGA::Sequencer::ClockingMode::Read() |
        Hag::VGA::Sequencer::ClockingMode::ScreenOff);

    // ret
}

void TurnScreenOn()//Offset 0x3f77
{
    // mov    dx, VGA_SequenceIndex        ;Port 0x3c4
    // mov    al, VGA_SEQIdx_ClockingMode  ;0x1
    // call   ReadIndexedRegister          ;Offset 0x3f84
    // and    ah, NOT VGA_SEQ1_ScreenOff   ;0xdf
    // out    dx, ax
    Hag::VGA::Sequencer::ClockingMode::Write(
        Hag::VGA::Sequencer::ClockingMode::Read() &
        ~Hag::VGA::Sequencer::ClockingMode::ScreenOff);

    // ret
}

// outputs:
//    dx = IO Base Address

uint16_t GetIOBaseAddress()//Offset 0x3d69
{
    // push   ax
    // call   GetCRTControllerIndexPort    ;Offset 0x40aa
    // mov    al, 1ch
    // call   ReadIndexedRegister          ;Offset 0x3f84
    // mov    dh, ah
    // sub    dl, dl
    // pop    ax
    // ret
    //TODO: fix
    Hag::System::PCI::Device_t device = 0;
    Hag::System::PCI::FindDevice(0x121a, 0x0003, device);
    return Hag::TDfx::Shared::PCI::IOBaseAddress::GetBaseAddress(device);
}

void EnableVGAExtensions() //Offset 0x3852
{
    using namespace Hag::TDfx::Shared;

    // push      ax
    // push      dx
    // call      GetIOBaseAddress          ;Offset 0x3d69
    uint16_t baseAddress = GetIOBaseAddress();

    // add       dx, TDFX_IO_VGAInit0      ;0x28
    // in        eax, dx
    // or        al, TDFX_VI0_EnableVGAExtensions;0x40
    // out       dx, eax
    IO::VGAInit0::Write(baseAddress, IO::VGAInit0::Read(baseAddress) | VGAInit0::ExtensionsEnabled);
    // pop       dx
    // pop       ax
    // ret
}

void SetVGAReadWriteAperture64K(uint16_t offset)//Offset 0x3c10
{
    using namespace Hag::TDfx::Shared;
    offset <<= 1;
    // push   eax
    // push   ebx
    // push   dx
    // sub    ebx, ebx
    // mov    bl, dl
    // shl    bx, 01h
    // call   GetIOBaseAddress             ;Offset 0x3d69
    uint16_t baseAddress = GetIOBaseAddress();

    // add    dx, TDFX_IO_VGAInit1         ;0x2c
    // in     eax, dx
    // and    eax, 0fff00000h
    // mov    ax, bx
    // shl    ebx, 0ah
    // or     eax, ebx
    // out    dx, eax
    IO::VGAInit1::Write(baseAddress,
        (IO::VGAInit1::Read(baseAddress) & ~(VGAInit1::VBEReadAperture32K | VGAInit1::VBEWriteAperture32K)) |
        offset | (offset << VGAInit1::Shift::VBEReadAperture32K));

    // pop    dx
    // pop    ebx
    // pop    eax
    // ret
}

void Func0x3615()//Offset 0x3615
{
    using namespace Hag;
    using namespace Hag::TDfx::Shared;

    // push      eax
    // push      dx
    // call      EnableVGAExtensions       ;Offset 0x3852
    EnableVGAExtensions();

    // call      GetIOBaseAddress          ;Offset 0x3d69
    uint16_t baseAddress = GetIOBaseAddress();

    // add       dx, TDFX_IO_VGAInit0      ;0x28
    // in        eax, dx
    // and       eax, TDFX_VI0_WakeUpSelect;0x100
    // or        al, TDFX_VI0_EnableVGAExtensions;0x40
    // out       dx, eax
    IO::VGAInit0::Write(baseAddress, (IO::VGAInit0::Read(baseAddress) & VGAInit0::WakeUpSelect) | VGAInit0::ExtensionsEnabled);
    
    // sub       dx, dx
    // call      SetVGAReadWriteAperture64K;Offset 0x3c10
    SetVGAReadWriteAperture64K(0);

    // mov       dx, VGA_MiscellaneousWrite;Port 0x3c2
    // mov       al, 67h                   ;IO address select, Enable RAM, Clock 28.322 MHz, High page ram, negative hsync, positive vsync
    // out       dx, al
    VGA::MiscellaneousOutput::Write(
        VGA::MiscellaneousOutput::IOAddressSelect |
        VGA::MiscellaneousOutput::EnableCPUDisplayMemoryAccess |
        VGA::MiscellaneousOutput::ClockSelect28p322MHz |
        VGA::MiscellaneousOutput::PageSelect |
        VGA::MiscellaneousOutput::SelectNegativeHorizontalSyncPulse);

    // pop       dx
    // pop       eax
    // ret
}

uint16_t GetMemorySizeIn256KBlocks()//Offset 0x37fc
{
    using namespace Hag::TDfx::Shared;
    static uint8_t MemorySizes[] ={ 0x10, 0x20, 0x20, 0x40 };

    // push      bx
    // push      dx
    // call      GetIOBaseAddress          ;Offset 0x3d69
    uint16_t baseAddress = GetIOBaseAddress();

    // add       dx, TDFX_IO_DRamInit0     ;0x18
    // in        eax, dx
    // shr       eax, 1ah                  ;26
    // and       ax, 0003h                 ;26-27 : number of chipsets, size of chips
    uint32_t index = (IO::DRAMInit0::Read(baseAddress) & (DRAMInit0::SGRAMChipSetCount | DRAMInit0::SGRAMChipSize)) >> DRAMInit0::Shift::SGRAMChipSetCount;

    // mov       bx, ax
    // mov       al, byte ptr cs:[bx + Data0x37f8];Offset 0x37f8
    // pop       dx
    // pop       bx
    // ret
    return MemorySizes[index];
}

void ClearScreen()//Offset 0x3740
{
    using namespace Hag;
    using namespace Hag::System;

    //     pushaw
    //     push      eax
    //     push      es
    //     mov       al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    //     call      FindModeData              ;Offset 0x40d9
    //     jb        Label0x37b0               ;Offset 0x37b0

    ModeData* modeData = nullptr;
    if (FindModeData(BDA::DisplayMode::Get(), modeData))
    {
        uint16_t pageCount = 1;
        uint16_t pageIndex = 0;
        uint16_t memorySize = GetMemorySizeIn256KBlocks();

        //     sub       di, di
        //     mov       ax, 0720h
        uint16_t clearValue = 0x720;

        //     mov       cx, 4000h
        uint16_t clearCount = 0x4000;
        
        //     mov       dx, word ptr cs:[B800Selector];Offset 0x77e4
        uint16_t clearSegment = 0xb800;

        //     mov       bl, byte ptr es:[bx + 04h]
        //     cmp       bl, 00h
        //     je        Label0x3778               ;Offset 0x3778
        if (modeData->Flags == 0x00)
            goto Label0x3778;

        //     mov       dx, word ptr cs:[B000Selector];Offset 0x77e2
        clearSegment = 0xb000;

        //     cmp       bl, 01h
        //     je        Label0x3778               ;Offset 0x3778
        if (modeData->Flags == 0x01)
            goto Label0x3778;

        //     cmp       bl, 02h
        //     jne       Label0x377e               ;Offset 0x377e
        if (modeData->Flags != 0x02)
            goto Label0x377e;

        //     mov       dx, word ptr cs:[B800Selector];Offset 0x77e4
        clearSegment = uint16_t(0xb8000);

        //     sub       ax, ax
        clearValue = 0x0000;

        // Label0x3778:                            ;Offset 0x3778
        Label0x3778:

        //     mov       es, dx
        //     rep stosw
        for (uint16_t i = 0; i < clearCount; ++i)
            *FARPointer(clearSegment, i).ToPointer<uint16_t>() = clearValue;

        //     jmp       Label0x37b0               ;Offset 0x37b0
        goto Label0x37b0;

        // Label0x377e:                            ;Offset 0x377e
        Label0x377e:

        //     mov       ax, 01h
        pageCount = 1;

        //     cmp       byte ptr ds:[BDA_DisplayMode], BDA_DM_320x200_256_Color_Graphics;Offset 0x449 0x13
        //     jbe       Label0x3793               ;Offset 0x3793
        if (BDA::DisplayMode::Get() < VGA::VideoMode::G320x200x8bppC)
            goto Label0x3793;

        //     call      GetMemorySizeIn256KBlocks ;Offset 0x37fc
        pageCount = memorySize;

        //     cmp       bl, 05h
        //     je        Label0x3793               ;Offset 0x3793
        if (modeData->Flags == 0x05)
            goto Label0x3793;

        //     shl       ax, 02h
        pageCount <<= 2;

        // Label0x3793:                            ;Offset 0x3793
        Label0x3793:

        //     mov       si, ax
        //     mov       ax, word ptr cs:[A000Selector];Offset 0x77e0
        clearSegment = 0xa000;

        //     mov       es, ax
        //     mov       ax, di
        //     mov       dx, di
        //set ax and dx to 0

        // Label0x379f:                            ;Offset 0x379f
        Label0x379f:

        //     call      SetVGAReadWriteAperture64K;Offset 0x3c10
        SetVGAReadWriteAperture64K(pageIndex);

        //     mov       cx, 8000h
        //     rep stosw
        memset(FARPointer(0xa000, 0x0000).ToPointer<uint8_t>(), 0, 0x10000);

        //     inc       dx
        ++pageIndex;

        //     dec       si
        --pageCount;

        //     jne       Label0x379f               ;Offset 0x379f
        if (pageCount != 0)
            goto Label0x379f;

        //     sub       dx, dx
        //     call      SetVGAReadWriteAperture64K;Offset 0x3c10
        SetVGAReadWriteAperture64K(0);

        // Label0x37b0:                            ;Offset 0x37b0
        Label0x37b0:
        (void)pageCount;
    }
    //     pop       es
    //     pop       eax
    //     popaw
    //     ret
}

void Func0x1e5a(uint8_t& red, uint8_t& green, uint8_t& blue)//Offset 0x1e5a
{
    // push      bx
    // mov       al, 1eh
    // mul       dh
    uint16_t redScaled = red * 0x1e;
    // mov       bx, ax
    // mov       al, 3bh
    // mul       ch
    uint16_t greenScaled = green * 0x3b;

    // add       bx, ax
    // mov       al, 0bh
    // mul       cl
    uint16_t blueScaled = blue * 0x0b;

    // add       ax, bx
    // sub       dx, dx
    // mov       bx, 0064h
    // add       ax, 0032h
    // div       bx
    uint8_t grey = (redScaled + greenScaled + blueScaled + 0x32) / 0x64;

    // mov       dh, al
    red = grey;

    // mov       cl, al
    green = grey;

    // mov       ch, al
    blue = grey;

    // pop       bx
    // ret
}

void Func0x1d41(uint8_t red, uint8_t green, uint8_t blue)//Offset 0x1d41
{
    using namespace Hag;
    using namespace Hag::System;

    //     push      ax
    //     push      dx
    //     test      byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_GrayScale OR BDA_VDDA_MonochromeMonitor;Offset 0x489 0x6
    //     je        Label0x1d4d               ;Offset 0x1d4d
    //     call      Func0x1e5a                ;Offset 0x1e5a
    if ((BDA::VideoDisplayDataArea::Get() & (BDA::VideoDisplayDataArea::GrayScale | BDA::VideoDisplayDataArea::MonochromeMonitor)) != 0)
        Func0x1e5a(red, green, blue);

    // Label0x1d4d:                            ;Offset 0x1d4d
    //     mov       al, dh
    //     mov       dx, VGA_RAMDACData        ;Port 0x3c9
    //     cli
    SYS_ClearInterrupts();

    //     out       dx, al
    VGA::RAMDACData::Write(red);

    //     mov       al, ch
    //     out       dx, al
    VGA::RAMDACData::Write(green);

    //     mov       al, cl
    //     out       dx, al
    VGA::RAMDACData::Write(blue);

    //     sti
    SYS_RestoreInterrupts();

    //     pop       dx
    //     pop       ax
    //     ret
}

void Func0x54c(uint8_t* paletteData, uint8_t startIndex, uint16_t count)//Offset 0x54c
{
    using namespace Hag;

    uint8_t ColorTable[]
    {
        0x00, 0x15, 0x2a, 0x3f
    };

    //     mov       bx, offset ColorTable      ;Offset 0x539
    //     mov       dx, VGA_DACWriteIndex     ;Port 0x3c8
    //     out       dx, al
    VGA::DACWriteIndex::Write(startIndex);

    for (uint16_t index = 0; index < count; ++index)
    {
        // Label0x553:                             ;Offset 0x553
        //     mov       ah, byte ptr es:[si]
        uint8_t entry = paletteData[index];

        //     inc       si
        //     mov       al, ah
        //     and       al, 03h
        //     xlatb     cs:[bx]
        uint8_t red = ColorTable[entry & 0x03];

        //     mov       dh, al
        //     mov       al, ah
        //     and       al, 0ch
        //     shr       al, 02h
        //     xlatb     cs:[bx]
        uint8_t green = ColorTable[(entry >> 2) & 0x03];

        //     mov       ch, al
        //     shr       ax, 0ch
        //     xlatb     cs:[bx]
        uint8_t blue = ColorTable[entry >> 4];

        //     mov       cl, al
        //     call      Func0x1d41                ;Offset 0x1d41
        Func0x1d41(red, green, blue);

        //     dec       di
        //     jne       Label0x553                ;Offset 0x553
    }

    //     ret
}

uint8_t Data0x73eb[] =
{
    0x00, 0x20, 0x08, 0x28, 0x02, 0x22, 0x06, 0x2A, 0x00, 0x20, 0x08, 0x28, 0x02, 0x22, 0x06, 0x2A,
    0x15, 0x35, 0x1D, 0x3D, 0x17, 0x37, 0x1F, 0x3F, 0x15, 0x35, 0x1D, 0x3D, 0x17, 0x37, 0x1F, 0x3F
};

void Func0x578()//Offset 0x578
{
    // mov       si, offset Data0x73eb     ;Offset 0x73eb
    // mov       di, 0020h
    // sub       al, al
    // push      si
    // push      di
    // call      Func0x54c                 ;Offset 0x54c
    Func0x54c(Data0x73eb, 0, 0x20);

    // pop       di
    // pop       si
    // mov       al, 20h
    // jmp       Func0x54c                 ;Offset 0x54c
    Func0x54c(Data0x73eb, 0x20, 0x20);
}

uint8_t Data0x73ab[] =
{
    0x00, 0x20, 0x08, 0x28, 0x02, 0x22, 0x0A, 0x2A, 0x10, 0x30, 0x18, 0x38, 0x12, 0x32, 0x1A, 0x3A,
    0x04, 0x24, 0x0C, 0x2C, 0x06, 0x26, 0x0E, 0x2E, 0x14, 0x34, 0x1C, 0x3C, 0x16, 0x36, 0x1E, 0x3E,
    0x01, 0x21, 0x09, 0x29, 0x03, 0x23, 0x0B, 0x2B, 0x11, 0x31, 0x19, 0x39, 0x13, 0x33, 0x1B, 0x3B,
    0x05, 0x25, 0x0D, 0x2D, 0x07, 0x27, 0x0F, 0x2F, 0x15, 0x35, 0x1D, 0x3D, 0x17, 0x37, 0x1F, 0x3F
};

void Func0x544()//Offset 0x544
{
    // mov       si, offset Data0x73ab     ;Offset 0x73ab
    // mov       di, 0040h
    // sub       al, al
    //Func0x54c
    Func0x54c(Data0x73ab, 0, 0x40);
}

void Func0x53d()//Offset 0x53d
{
    using namespace Hag::System;
    
    // test      byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_LineMode200;Offset 0x489 0x80
    // jne       Func0x578                 ;Offset 0x578
    //else Func0x544
    if ((BDA::VideoDisplayDataArea::Get() & BDA::VideoDisplayDataArea::LineMode200) != 0)
        Func0x578();
    else Func0x544();
}

uint8_t Data0x740b[] =
{
    0x00, 0x2A, 0x00, 0x3F
};

void Func0x58b()//Offset 0x58b
{
    using namespace Hag;

    //     mov       si, offset Data0x740b     ;Offset 0x740b
    //     mov       dx, VGA_DACWriteIndex     ;Port 0x3c8
    //     sub       al, al
    //     out       dx, al
    VGA::DACWriteIndex::Write(0);

    //     inc       dx
    //     mov       cx, 0002h
    for (uint32_t i = 0; i < 2; ++i)
    {
        uint32_t index = 0;
        // Label0x598:                             ;Offset 0x598
        //     push      cx
        //     push      si
        //     mov       cx, 0004h
        for (uint32_t j = 0; j < 4; ++j)
        {
            // Label0x59d:                             ;Offset 0x59d
            //     lodsb     byte ptr es:[si]

            uint8_t color = Data0x740b[index];
            ++index;

            //     mov       bx, 0018h
            for (uint32_t k = 0; k < 0x18; ++k)
            {
                // Label0x5a2:                             ;Offset 0x5a2
                //     out       dx, al
                VGA::RAMDACData::Write(color);

                //     dec       bx
                //     jne       Label0x5a2                ;Offset 0x5a2
            }
            //     loop      Label0x59d                ;Offset 0x59d
        }
        //     pop       si
        //     pop       cx
        //     loop      Label0x598                ;Offset 0x598
    }
    //     ret
}

void Func0x1d6d(uint8_t* paletteData, uint8_t startIndex, uint16_t count)//Offset 0x1d6d
{
    using namespace Hag;

    //     mov       al, bl
    //     mov       dx, VGA_DACWriteIndex     ;Port 0x3c8
    //     out       dx, al
    VGA::DACWriteIndex::Write(startIndex);
    
    //     mov       bx, cx
    uint16_t index = 0;
    for (uint16_t i  = 0; i < count; ++i)
    {
        // Label0x1d75:                            ;Offset 0x1d75
        //     mov       dh, byte ptr es:[si]
        uint8_t red = paletteData[index];

        //     inc       si
        ++index;

        //     mov       ch, byte ptr es:[si]
        uint8_t green = paletteData[index];

        //     inc       si
        ++index;

        //     mov       cl, byte ptr es:[si]
        uint8_t blue = paletteData[index];

        //     inc       si
        ++index;

        //     call      Func0x1d41                ;Offset 0x1d41
        Func0x1d41(red, green, blue);

        //     dec       bx
        //     jne       Label0x1d75               ;Offset 0x1d75
    }
    //     ret
}

uint8_t Data0x740f[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x00, 0x2A, 0x2A, 0x2A, 0x00, 0x00, 0x2A,
    0x00, 0x2A, 0x2A, 0x15, 0x00, 0x2A, 0x2A, 0x2A, 0x15, 0x15, 0x15, 0x15, 0x15, 0x3F, 0x15, 0x3F,
    0x15, 0x15, 0x3F, 0x3F, 0x3F, 0x15, 0x15, 0x3F, 0x15, 0x3F, 0x3F, 0x3F, 0x15, 0x3F, 0x3F, 0x3F,
    0x00, 0x00, 0x00, 0x05, 0x05, 0x05, 0x08, 0x08, 0x08, 0x0B, 0x0B, 0x0B, 0x0E, 0x0E, 0x0E, 0x11,
    0x11, 0x11, 0x14, 0x14, 0x14, 0x18, 0x18, 0x18, 0x1C, 0x1C, 0x1C, 0x20, 0x20, 0x20, 0x24, 0x24,
    0x24, 0x28, 0x28, 0x28, 0x2D, 0x2D, 0x2D, 0x32, 0x32, 0x32, 0x38, 0x38, 0x38, 0x3F, 0x3F, 0x3F,
    0x00, 0x00, 0x3F, 0x10, 0x00, 0x3F, 0x1F, 0x00, 0x3F, 0x2F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F,
    0x00, 0x2F, 0x3F, 0x00, 0x1F, 0x3F, 0x00, 0x10, 0x3F, 0x00, 0x00, 0x3F, 0x10, 0x00, 0x3F, 0x1F,
    0x00, 0x3F, 0x2F, 0x00, 0x3F, 0x3F, 0x00, 0x2F, 0x3F, 0x00, 0x1F, 0x3F, 0x00, 0x10, 0x3F, 0x00,
    0x00, 0x3F, 0x00, 0x00, 0x3F, 0x10, 0x00, 0x3F, 0x1F, 0x00, 0x3F, 0x2F, 0x00, 0x3F, 0x3F, 0x00,
    0x2F, 0x3F, 0x00, 0x1F, 0x3F, 0x00, 0x10, 0x3F, 0x1F, 0x1F, 0x3F, 0x27, 0x1F, 0x3F, 0x2F, 0x1F,
    0x3F, 0x37, 0x1F, 0x3F, 0x3F, 0x1F, 0x3F, 0x3F, 0x1F, 0x37, 0x3F, 0x1F, 0x2F, 0x3F, 0x1F, 0x27,
    0x3F, 0x1F, 0x1F, 0x3F, 0x27, 0x1F, 0x3F, 0x2F, 0x1F, 0x3F, 0x37, 0x1F, 0x3F, 0x3F, 0x1F, 0x37,
    0x3F, 0x1F, 0x2F, 0x3F, 0x1F, 0x27, 0x3F, 0x1F, 0x1F, 0x3F, 0x1F, 0x1F, 0x3F, 0x27, 0x1F, 0x3F,
    0x2F, 0x1F, 0x3F, 0x37, 0x1F, 0x3F, 0x3F, 0x1F, 0x37, 0x3F, 0x1F, 0x2F, 0x3F, 0x1F, 0x27, 0x3F,
    0x2D, 0x2D, 0x3F, 0x31, 0x2D, 0x3F, 0x36, 0x2D, 0x3F, 0x3A, 0x2D, 0x3F, 0x3F, 0x2D, 0x3F, 0x3F,
    0x2D, 0x3A, 0x3F, 0x2D, 0x36, 0x3F, 0x2D, 0x31, 0x3F, 0x2D, 0x2D, 0x3F, 0x31, 0x2D, 0x3F, 0x36,
    0x2D, 0x3F, 0x3A, 0x2D, 0x3F, 0x3F, 0x2D, 0x3A, 0x3F, 0x2D, 0x36, 0x3F, 0x2D, 0x31, 0x3F, 0x2D,
    0x2D, 0x3F, 0x2D, 0x2D, 0x3F, 0x31, 0x2D, 0x3F, 0x36, 0x2D, 0x3F, 0x3A, 0x2D, 0x3F, 0x3F, 0x2D,
    0x3A, 0x3F, 0x2D, 0x36, 0x3F, 0x2D, 0x31, 0x3F, 0x00, 0x00, 0x1C, 0x07, 0x00, 0x1C, 0x0E, 0x00,
    0x1C, 0x15, 0x00, 0x1C, 0x1C, 0x00, 0x1C, 0x1C, 0x00, 0x15, 0x1C, 0x00, 0x0E, 0x1C, 0x00, 0x07,
    0x1C, 0x00, 0x00, 0x1C, 0x07, 0x00, 0x1C, 0x0E, 0x00, 0x1C, 0x15, 0x00, 0x1C, 0x1C, 0x00, 0x15,
    0x1C, 0x00, 0x0E, 0x1C, 0x00, 0x07, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x07, 0x00, 0x1C,
    0x0E, 0x00, 0x1C, 0x15, 0x00, 0x1C, 0x1C, 0x00, 0x15, 0x1C, 0x00, 0x0E, 0x1C, 0x00, 0x07, 0x1C,
    0x0E, 0x0E, 0x1C, 0x11, 0x0E, 0x1C, 0x15, 0x0E, 0x1C, 0x18, 0x0E, 0x1C, 0x1C, 0x0E, 0x1C, 0x1C,
    0x0E, 0x18, 0x1C, 0x0E, 0x15, 0x1C, 0x0E, 0x11, 0x1C, 0x0E, 0x0E, 0x1C, 0x11, 0x0E, 0x1C, 0x15,
    0x0E, 0x1C, 0x18, 0x0E, 0x1C, 0x1C, 0x0E, 0x18, 0x1C, 0x0E, 0x15, 0x1C, 0x0E, 0x11, 0x1C, 0x0E,
    0x0E, 0x1C, 0x0E, 0x0E, 0x1C, 0x11, 0x0E, 0x1C, 0x15, 0x0E, 0x1C, 0x18, 0x0E, 0x1C, 0x1C, 0x0E,
    0x18, 0x1C, 0x0E, 0x15, 0x1C, 0x0E, 0x11, 0x1C, 0x14, 0x14, 0x1C, 0x16, 0x14, 0x1C, 0x18, 0x14,
    0x1C, 0x1A, 0x14, 0x1C, 0x1C, 0x14, 0x1C, 0x1C, 0x14, 0x1A, 0x1C, 0x14, 0x18, 0x1C, 0x14, 0x16,
    0x1C, 0x14, 0x14, 0x1C, 0x16, 0x14, 0x1C, 0x18, 0x14, 0x1C, 0x1A, 0x14, 0x1C, 0x1C, 0x14, 0x1A,
    0x1C, 0x14, 0x18, 0x1C, 0x14, 0x16, 0x1C, 0x14, 0x14, 0x1C, 0x14, 0x14, 0x1C, 0x16, 0x14, 0x1C,
    0x18, 0x14, 0x1C, 0x1A, 0x14, 0x1C, 0x1C, 0x14, 0x1A, 0x1C, 0x14, 0x18, 0x1C, 0x14, 0x16, 0x1C,
    0x00, 0x00, 0x10, 0x04, 0x00, 0x10, 0x08, 0x00, 0x10, 0x0C, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10,
    0x00, 0x0C, 0x10, 0x00, 0x08, 0x10, 0x00, 0x04, 0x10, 0x00, 0x00, 0x10, 0x04, 0x00, 0x10, 0x08,
    0x00, 0x10, 0x0C, 0x00, 0x10, 0x10, 0x00, 0x0C, 0x10, 0x00, 0x08, 0x10, 0x00, 0x04, 0x10, 0x00,
    0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0x00, 0x10, 0x08, 0x00, 0x10, 0x0C, 0x00, 0x10, 0x10, 0x00,
    0x0C, 0x10, 0x00, 0x08, 0x10, 0x00, 0x04, 0x10, 0x08, 0x08, 0x10, 0x0A, 0x08, 0x10, 0x0C, 0x08,
    0x10, 0x0E, 0x08, 0x10, 0x10, 0x08, 0x10, 0x10, 0x08, 0x0E, 0x10, 0x08, 0x0C, 0x10, 0x08, 0x0A,
    0x10, 0x08, 0x08, 0x10, 0x0A, 0x08, 0x10, 0x0C, 0x08, 0x10, 0x0E, 0x08, 0x10, 0x10, 0x08, 0x0E,
    0x10, 0x08, 0x0C, 0x10, 0x08, 0x0A, 0x10, 0x08, 0x08, 0x10, 0x08, 0x08, 0x10, 0x0A, 0x08, 0x10,
    0x0C, 0x08, 0x10, 0x0E, 0x08, 0x10, 0x10, 0x08, 0x0E, 0x10, 0x08, 0x0C, 0x10, 0x08, 0x0A, 0x10,
    0x0B, 0x0B, 0x10, 0x0C, 0x0B, 0x10, 0x0D, 0x0B, 0x10, 0x0F, 0x0B, 0x10, 0x10, 0x0B, 0x10, 0x10,
    0x0B, 0x0F, 0x10, 0x0B, 0x0D, 0x10, 0x0B, 0x0C, 0x10, 0x0B, 0x0B, 0x10, 0x0C, 0x0B, 0x10, 0x0D,
    0x0B, 0x10, 0x0F, 0x0B, 0x10, 0x10, 0x0B, 0x0F, 0x10, 0x0B, 0x0D, 0x10, 0x0B, 0x0C, 0x10, 0x0B,
    0x0B, 0x10, 0x0B, 0x0B, 0x10, 0x0C, 0x0B, 0x10, 0x0D, 0x0B, 0x10, 0x0F, 0x0B, 0x10, 0x10, 0x0B,
    0x0F, 0x10, 0x0B, 0x0D, 0x10, 0x0B, 0x0C, 0x10
};

void Func0x5ad()//Offset 0x5ad
{
    // mov       si, offset Data0x740f     ;Offset 0x740f
    // mov       cx, 0f8h
    // sub       bl, bl
    // jmp       Func0x1d6d                ;Offset 0x1d6d
    Func0x1d6d(Data0x740f, 0x00, 0xf8);//0x2E8
}

void Func0x6ca()//Offset 0x6ca
{
    //ret
}

void Func0x3d04()//Offset 0x3d04
{
    // jmp    Func0x5ad                    ;Offset 0x5ad
    Func0x5ad();
}

void Func0x3d07()//Offset 0x3d07
{
    // jmp    Func0x5ad                    ;Offset 0x5ad
    Func0x5ad();
}

void Func0x509()//Offset 0x509
{
    using namespace Hag;
    using namespace Hag::System;

    ModeData* modeData = nullptr;

    // PaletteSetCallTable     DW offset Func0x53d;0x53d
    //                         DW offset Func0x58b;0x58b
    //                         DW offset Func0x578;0x578
    //                         DW offset Func0x58b;0x58b
    //                         DW offset Func0x544;0x544
    //                         DW offset Func0x544;0x544
    //                         DW offset Func0x5ad;0x5ad
    //                         DW offset Func0x3d04;0x3d04
    //                         DW offset Func0x3d07;0x3d07
    //                         DW offset Func0x6ca;0x6ca

    //     mov       dx, VGA_DACMask           ;Port 0x3c6
    //     mov       al, 0ffh
    //     out       dx, al
    VGA::DACMask::Write(0xff);

    //     mov       al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    VGA::VideoMode_t mode = BDA::DisplayMode::Get();

    //     mov       bx, 04h
    uint16_t index = 2;
    //     cmp       al, BDA_DM_320x200_16_Color_Graphics;0xd
    //     je        Label0x52f                ;Offset 0x52f
    if (mode == VGA::VideoMode::G320x200x4bppC)
        goto Label0x52f;

    //     cmp       al, BDA_DM_640x200_16_Color_Graphics;0xe
    //     je        Label0x52f                ;Offset 0x52f
    if (mode == VGA::VideoMode::G640x200x4bppC)
        goto Label0x52f;

    //     call      FindModeData              ;Offset 0x40d9
    FindModeData(mode, modeData);

    //     mov       bl, byte ptr es:[bx + 04h]
    index = modeData->Flags;

    //     sub       bh, bh
    //     cmp       bl, 0ah
    //     jb        Label0x52d                ;Offset 0x52d
    if (index < 0x0a)
        goto Label0x52d;

    //     mov       bl, 09h
    index = 0x09;

    // Label0x52d:                             ;Offset 0x52d
    Label0x52d:

    //     shl       bx, 01h
    //index <<= 1;

    // Label0x52f:                             ;Offset 0x52f
    Label0x52f:

    //     push      es
    //     push      cs
    //     pop       es
    //     call      word ptr cs:[bx + PaletteSetCallTable];Offset 0x4f5
    switch(index)
    {
    case 0:
        Func0x53d();
        break;
    case 1:
        Func0x58b();
        break;
    case 2:
        Func0x578();
        break;
    case 3:
        Func0x58b();
        break;
    case 4:
        Func0x544();
        break;
    case 5:
        Func0x544();
        break;
    case 6:
        Func0x5ad();
        break;
    case 7:
        Func0x3d04();
        break;
    case 8:
        Func0x3d07();
        break;
    case 9:
        Func0x6ca();
        break;
    default:
        break;
    }
    //     pop       es
    //     ret
}

void Func0x687(Hag::VGA::Register_t inputStatus1, Hag::System::BDA::VideoParameterTable& parameters)//Offset 0x687
{
    using namespace Hag;

    //     push      dx
    //     push      di
    //     push      ds
    //     push      es
    //     push      es
    //     les       di, ds:[BDA_VideoParameterControlBlockPointer];Offset 0x4a8
    //     les       di, es:[di + BDA_VPCB_DynamicParamSaveArea];Offset 0x4
    //     pop       ds
    //     mov       ax, es
    //     or        ax, di
    //     je        Label0x6a4                ;Offset 0x6a4
    //     mov       cx, 0010h
    //     push      si
    //     rep movsb
    //     inc       si
    //     movsb
    //     pop       si
    // Label0x6a4:                             ;Offset 0x6a4

    //     sub       bl, bl
    //     mov       cx, 0014h
    //     cli
    SYS_ClearInterrupts();

    //     in        al, dx
    VGA::InputStatus1::Read(inputStatus1);

    //     mov       dl, VGA_AttributeControllerIndex_lowbyte;Port 0x3c0
    // Label0x6ad:                             ;Offset 0x6ad
    //     mov       al, bl
    //     out       dx, al
    //     lodsb
    //     out       dx, al
    //     inc       bx
    //     loop      Label0x6ad                ;Offset 0x6ad
    VGA::AttributeControllerData::Write(0, parameters.AttributeControllerRegisters, 0x10);

    //     sti
    SYS_RestoreInterrupts();

    //     pop       es
    //     pop       ds
    //     pop       di
    //     pop       dx
    //     ret
}

bool CheckModeList(Hag::VGA::VideoMode_t* modeList)//Offset 0x6bb
{
    using namespace Hag::System;

    //     mov       ah, byte ptr ds:[BDA_DisplayMode]    ;Offset 0x449
    while (*modeList != 0xff)
    {
        // Label0x6bf:                             ;Offset 0x6bf
        //     lodsb     byte ptr es:[si]
        //     cmp       ah, al
        //     je        Label0x6ca                ;Offset 0x6ca
        //     cmp       al, 0ffh
        //     jne       Label0x6bf                ;Offset 0x6bf
        if (*modeList == BDA::DisplayMode::Get())
            return true;

        //     dec       ax
        ++modeList;
    }
    // Label0x6ca:                             ;Offset 0x6ca
    //     ret
    return false;
}

void SetAttributePalette(Hag::VGA::Register_t inputStatus1)//Offset 0x1e7f
{
    using namespace Hag;

    //     cli
    SYS_ClearInterrupts();

    //     in        al, dx
    VGA::InputStatus1::Read(inputStatus1);

    //     mov       dl, VGA_AttributeControllerIndex_lowbyte;Port 0x3c0h
    // Label0x1e83:                            ;Offset 0x1e83
    //     cmp       ah, 10h
    //     jae       Label0x1e96               ;Offset 0x1e96
    //     mov       al, ah
    //     out       dx, al
    //     lodsb
    //     out       dx, al
    //     inc       ah
    //     loop      Label0x1e83               ;Offset 0x1e83
    // Label0x1e91:                            ;Offset 0x1e91
    //     mov       al, VGA_ATTR_PaletteAddressSource;0x20
    //     out       dx, al
    //     sti
    SYS_RestoreInterrupts();

    //     ret
    // Label0x1e96:                            ;Offset 0x1e96
    //     mov       al, VGA_ATTR_OverscanColor;0x11
    //     out       dx, al
    //     lodsb
    //     out       dx, al
    //     jmp       Label0x1e91               ;Offset 0x1e91
}

void Func0x48a(Hag::System::BDA::VideoParameterTable& parameters)//Offset 0x48a
{
    using namespace Hag;
    using namespace Hag::System;

    //     push      di
    //     push      es
    //     mov       dx, word ptr ds:[BDA_VideoBaseIOPort];Offset 0x463
    //     add       dl, 06h                   ;Port 0x3?a
    //     push      dx
    //     lea       si, [di + 23h]
    //     call      Func0x687                 ;Offset 0x687
    Func0x687(BDA::VideoBaseIOPort::Get() + 0x6, parameters);

    //     cli
    SYS_ClearInterrupts();

    //     in        al, dx
    VGA::InputStatus1::Read(BDA::VideoBaseIOPort::Get() + 0x6);

    //     mov       dl, VGA_AttributeControllerIndex_lowbyte;Port 0x3c0
    //     mov       al, VGA_ATTR_ColorSelect  ;0x14
    //     out       dx, al
    //     sub       al, al
    //     out       dx, al
    VGA::AttributeController::PixelPadding::Write(0);

    //     sti
    SYS_RestoreInterrupts();

    //     test      byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_PaletteLoadingEnabled;Offset 0x489 0x8
    //     jne       Label0x4af                ;Offset 0x4af
    if ((BDA::VideoDisplayDataArea::Get() & BDA::VideoDisplayDataArea::PaletteLoadingDisabled) == 0)
    {
        //     call      Func0x509                 ;Offset 0x509
        Func0x509();

        // Label0x4af:                             ;Offset 0x4af
    }
    
    //     pop       dx
    //     les       di, ds:[BDA_VideoParameterControlBlockPointer];Offset 0x4a8
    //     les       di, es:[di + BDA_VPCB_SecondarySavePointerTbl];Offset 0x10
    //     mov       ax, es
    //     or        ax, di
    //     je        Label0x4f2                ;Offset 0x4f2
    //     les       di, es:[di + BDA_VPCB_PaletterProfileTable];Offset 0xa
    //     mov       ax, es
    //     or        ax, di
    //     je        Label0x4f2                ;Offset 0x4f2
    //     lea       si, [di + BDA_PPT_ApplicableModeList];Offset 0x14
    //     call      CheckModeList             ;Offset 0x6bb
    //     jne       Label0x4f2                ;Offset 0x4f2
    //     push      ds
    //     mov       cx, word ptr es:[di + BDA_PPT_AttributeRegCount];Offset 0x4
    //     mov       ah, byte ptr es:[di + BDA_PPT_AttributeRegStartIndex];Offset 0x6
    //     lds       si, es:[di + BDA_PPT_AttributeRegsPtr];Offset 0x8
    //     call      SetAttributePalette       ;Offset 0x1e7f
    //     mov       ax, 1012h                 ;Dac functions - Set block of dac registers
    //     mov       cx, word ptr es:[di + BDA_PPT_DACRegCount];Offset 0xc
    //     mov       bx, word ptr es:[di + BDA_PPT_DACRegStartIndex];Offset 0xe
    //     les       dx, es:[di + BDA_PPT_DacRegsPtr];Offset 0x10
    //     int       10h
    //     pop       ds
    // Label0x4f2:                             ;Offset 0x4f2
    //     pop       es
    //     pop       di
    //     ret
}

void Func0x363c()//Offset 0x363c
{
    using namespace Hag::System;
    using namespace Hag::TDfx;

    //     pushad
    //     push      es
    //     mov       ax, 0b102h                ;Find PCI Device
    //     sub       si, si
    //     mov       cx, PCI_DEVICE_Banshee    ;0003h
    //     mov       dx, PCI_VENDOR_3Dfx       ;0x121a
    //     int       1ah
    PCI::Device_t device = 0;
    PCI::FindDevice(0x121a, 0x0003, device);

    //     mov       ax, 0b109h                ;Read Configuration Word
    //     mov       di, PCI_Header_Word_Command;0x4
    //     int       1ah
    //     and       cl, NOT PCI_Cmd_VGAPaletteSnoop;0dfh
    //     mov       ax, 0b10ch                ;Write Configuration Word
    //     int       1ah
    PCI::Write16(device, PCI::PreHeader::Command,
    PCI::Read16(device, PCI::PreHeader::Command) & ~PCI::Command::VGAPaletteSnoop);

    //     mov       al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    //     call      FindModeData              ;Offset 0x40d9
    //     jb        Label0x373c               ;Offset 0x373c
    ModeData* modeData = nullptr;
    if (!FindModeData(BDA::DisplayMode::Get(), modeData))
    {
        //     mov       ax, word ptr es:[bx + 0bh]
        //     push      ax
        uint16_t saveAX = modeData->Stride;

        //     movzx     eax, word ptr es:[bx + 09h]
        uint32_t saveEAX = modeData->Height;

        //     shl       eax, 0ch
        //     push      eax
        saveEAX <<= 12;
        
        //     mov       cx, word ptr es:[bx + 07h]
        //     and       cx, 0fffh
        uint32_t saveEAX2 = modeData->Width & Shared::VideoScreenSize::Width;

        //     or        ax, cx
        //     push      eax
        saveEAX2 |= saveEAX;
        
        //     call      GetExtraModeData          ;Offset 0x3f29
        ExtraModeData* extraModeData = GetExtraModeData(*modeData);

        //     mov       dx, word ptr ds:[BDA_VideoBaseIOPort];Offset 0x463
        //     mov       ax, TDFX_CRTC_HorizontalExtension;0x1a
        //     out       dx, ax
        Shared::CRTController::HorizontalExtension::Write(BDA::VideoBaseIOPort::Get(), 0);

        //     inc       ax
        //     mov       ah, byte ptr es:[si + 01h]
        //     out       dx, ax                    ;Vertical Extension Register
        Shared::CRTController::VerticalExtension::Write(BDA::VideoBaseIOPort::Get(), extraModeData->VerticalExtension);

        //     mov       al, TDFX_CRTC_ExtensionByte1;0x1d
        //     call      ReadIndexedRegister       ;Offset 0x3f84
        //     and       ah, 7fh
        //     out       dx, ax
        Shared::CRTController::Extension1::Write(BDA::VideoBaseIOPort::Get(),
            Shared::CRTController::Extension1::Read(BDA::VideoBaseIOPort::Get()) & 0x7f);

        //     call      GetIOBaseAddress          ;Offset 0x3d69
        uint16_t baseAddress = GetIOBaseAddress();

        //     mov       di, dx
        //     add       dx, TDFX_IO_PLLControl0   ;0x40
        //     sub       eax, eax
        //     mov       ax, word ptr es:[si + 04h]
        //     test      ax, ax
        //     je        Label0x36b2               ;Offset 0x36b2
        //     out       dx, eax
        if (extraModeData->PLLControl0 != 0)
            Shared::IO::PLLControl0::Write(baseAddress, extraModeData->PLLControl0);

        // Label0x36b2:                            ;Offset 0x36b2
        //     movzx     ecx, byte ptr es:[si]
        //     lea       dx, [di + TDFX_IO_DACMode];0x4c
        //     sub       eax, eax
        //     out       dx, eax
        Shared::IO::DACMode::Write(baseAddress, 0);

        //     lea       dx, [di + TDFX_IO_VideoDesktopStartAddress];0xe4
        //     sub       eax, eax
        //     out       dx, eax
        Shared::IO::VideoDesktopStartAddress::Write(baseAddress, 0);

        //     pop       eax
        //saveEAX2

        //     pop       edx
        //saveEAX

        //     test      cl, 04h
        //     je        Label0x36d4               ;Offset 0x36d4
        //     add       eax, edx
        if ((extraModeData->Unknown0 & 0x4) != 0)
            saveEAX += saveEAX2;
            
        // Label0x36d4:                            ;Offset 0x36d4
        //     lea       dx, [di + TDFX_IO_VideoScreenSize];0x98
        //     out       dx, eax
        Shared::IO::VideoScreenSize::Write(baseAddress, saveEAX);

        //     sub       eax, eax
        //     pop       ax
        //saveAX

        //     lea       dx, [di + TDFX_IO_VideoDesktopOverlayStride];0xe8
        //     out       dx, eax
        Shared::IO::VideoDesktopOverlayStride::Write(baseAddress, saveAX);

        //     mov       bl, cl
        //     lea       dx, [di + TDFX_IO_VGAInit0];0x28
        //     in        eax, dx
        //     and       eax, 00000100h
        //     and       bl, 01h
        //     shl       bx, 0ch
        //     or        bx, 0040h
        //     or        ax, bx
        //     out       dx, eax
        Shared::IO::VGAInit0::Write(baseAddress,
            (Shared::IO::VGAInit0::Read(baseAddress) & Shared::VGAInit0::WakeUpSelect) |
            ((extraModeData->Unknown0 & 1) << 12) |
            Shared::VGAInit0::ExtensionsEnabled);

        //     lea       dx, [di + TDFX_IO_VGAInit1];0x2c
        //     mov       eax, ecx
        //     and       eax, 00000001h
        //     shl       eax, 14h
        //     out       dx, eax
        Shared::IO::VGAInit1::Write(baseAddress, (extraModeData->Unknown0 & 1) << 20);

        //     lea       dx, [di + TDFX_IO_VideoProcessorConfig];0x5c
        //     mov       eax, ecx
        //     and       al, 38h
        //     shl       eax, 0fh
        uint32_t val = (extraModeData->Unknown0 & 0x38) << 0xf;

        //     test      cl, 01h
        //     je        Label0x3731               ;Offset 0x3731
        if ((extraModeData->Unknown0 & 1) != 0)
        {
            //     or        al, 81h
            val |= 0x81;

            //     test      cl, 38h
            //     je        Label0x3729               ;Offset 0x3729
            if ((extraModeData->Unknown0 & 0x38) != 0)
            {
                //     or        ah, 0ch
                val |= 0x0c00;

                // Label0x3729:                            ;Offset 0x3729
            }

            //     and       cl, 06h
            //     shl       cl, 02h
            //     or        al, cl
            val |= (extraModeData->Unknown0 & 0x06) << 2;

            // Label0x3731:                            ;Offset 0x3731
        }

        //     out       dx, eax
        Shared::IO::VideoProcessorConfiguration::Write(baseAddress, val);

        //     lea       dx, [di + TDFX_IO_DRamInit1];0x1c
        //     in        eax, dx
        //     or        al, 01h
        //     out       dx, eax
        Shared::IO::DRAMInit1::Write(baseAddress,
            Shared::IO::DRAMInit1::Read(baseAddress) |
            Shared::DRAMInit1::SGRAMRefreshEnable);

        // Label0x373c:                            ;Offset 0x373c
    }
    //     pop       es
    //     popad
    //     ret
}

bool Func0x3faf(Hag::VGA::VideoMode_t mode)//Offset 0x3faf
{
    //     push   bx
    //     push   es
    //     call   FindModeData                 ;Offset 0x40d9
    //     jb     Label0x3fc2                  ;Offset 0x3fc2
    ModeData* modeData = nullptr;
    if (!FindModeData(mode, modeData))
    {
        //     cmp    byte ptr es:[bx + 04h], 00h
        //     je     Label0x3fc2                  ;Offset 0x3fc2
        //     cmp    byte ptr es:[bx + 04h], 01h
        // Label0x3fc2:                            ;Offset 0x3fc2
        if ((modeData->Flags != 0x00) &&
            (modeData->Flags != 0x01))
            return true;
    }
    //     pop    es
    //     pop    bx
    //     ret
    return false;
}

void Func0x1ee5()//Offset 0x1ee5
{
    using namespace Hag;
    // push      dx
    // mov       dx, VGA_GraphicsControllerIndex;Port 0x3ce
    // mov       ax, VGA_GCTLIdx_GraphicMode;0x5
    // out       dx, ax
    VGA::GraphicsController::GraphicsControllerMode::Write(0);

    // mov       al, VGA_GCTLIdx_Miscellaneous;0x6
    // call      ReadIndexedRegister       ;Offset 0x3f84
    // and       ah, VGA_GCTL6_GfxMode     ;0x1
    // or        ah, VGA_GCTL6_Mem_A0000_AFFFF;0x4
    // out       dx, ax
    VGA::GraphicsController::MemoryMapModeControl::Write(
        (VGA::GraphicsController::MemoryMapModeControl::Read() &
         VGA::GraphicsController::MemoryMapModeControl::SelectTextGraphicsMode) |
        VGA::GraphicsController::MemoryMapModeControl::A0000HtoAFFFFH);

    // mov       dl, VGA_SequenceIndex_lowbyte;Port 0x3c4
    // mov       ax, VGA_SEQIdx_MapMask OR (VGA_SEQ2_Mask2 SHL 8);0x402
    // out       dx, ax
    VGA::Sequencer::EnableWritePlane::Write(VGA::Sequencer::EnableWritePlane::Plane3);

    // mov       ax, VGA_SEQIdx_MemoryMode OR ((VGA_SEQ4_MemSize256k OR VGA_SEQ4_CPUAnyMap) SHL 8);0x604
    // out       dx, ax
    VGA::Sequencer::MemoryModeControl::Write(VGA::Sequencer::MemoryModeControl::ExtendedMemoryAddress |
                                             VGA::Sequencer::MemoryModeControl::SequentialAddressingMode);

    // pop       dx
    // ret
}

uint8_t Font8x8[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E,
    0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E, 0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00,
    0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x7C, 0x38, 0x7C,
    0x10, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,
    0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF, 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,
    0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, 0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78,
    0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0,
    0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0, 0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99,
    0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00, 0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00,
    0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
    0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00, 0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0xCC, 0x78,
    0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF,
    0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00,
    0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00,
    0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00,
    0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
    0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
    0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00, 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
    0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00, 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
    0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00,
    0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00, 0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00,
    0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00, 0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,
    0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00, 0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
    0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00, 0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
    0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00,
    0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
    0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00,
    0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00,
    0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00, 0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00,
    0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00, 0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00,
    0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00,
    0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00, 0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00,
    0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00, 0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00,
    0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,
    0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,
    0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x1C, 0x00,
    0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00, 0x78, 0xCC, 0xE0, 0x70, 0x1C, 0xCC, 0x78, 0x00,
    0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00,
    0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00,
    0xC6, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00,
    0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00, 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
    0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
    0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
    0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,
    0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
    0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
    0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00, 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00,
    0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00,
    0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
    0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E,
    0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00,
    0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
    0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, 0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00,
    0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
    0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00, 0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00,
    0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, 0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00,
    0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00,
    0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x18, 0x0C, 0x78, 0x00, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00,
    0x1C, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00, 0x7E, 0xC3, 0x3C, 0x06, 0x3E, 0x66, 0x3F, 0x00,
    0xCC, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00, 0xE0, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00,
    0x30, 0x30, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00, 0x00, 0x00, 0x78, 0xC0, 0xC0, 0x78, 0x0C, 0x38,
    0x7E, 0xC3, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, 0xCC, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
    0xE0, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00, 0xCC, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x7C, 0xC6, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00, 0xE0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0xC6, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x30, 0x30, 0x00, 0x78, 0xCC, 0xFC, 0xCC, 0x00,
    0x1C, 0x00, 0xFC, 0x60, 0x78, 0x60, 0xFC, 0x00, 0x00, 0x00, 0x7F, 0x0C, 0x7F, 0xCC, 0x7F, 0x00,
    0x3E, 0x6C, 0xCC, 0xFE, 0xCC, 0xCC, 0xCE, 0x00, 0x78, 0xCC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
    0x00, 0xCC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0xE0, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
    0x78, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00, 0x00, 0xE0, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00,
    0x00, 0xCC, 0x00, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8, 0xC3, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x18, 0x00,
    0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x18, 0x18, 0x7E, 0xC0, 0xC0, 0x7E, 0x18, 0x18,
    0x38, 0x6C, 0x64, 0xF0, 0x60, 0xE6, 0xFC, 0x00, 0xCC, 0xCC, 0x78, 0xFC, 0x30, 0xFC, 0x30, 0x30,
    0xF8, 0xCC, 0xCC, 0xFA, 0xC6, 0xCF, 0xC6, 0xC7, 0x0E, 0x1B, 0x18, 0x3C, 0x18, 0x18, 0xD8, 0x70,
    0x1C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00, 0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x00, 0x1C, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x1C, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00,
    0x00, 0xF8, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0x00, 0xFC, 0x00, 0xCC, 0xEC, 0xFC, 0xDC, 0xCC, 0x00,
    0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00,
    0x30, 0x00, 0x30, 0x60, 0xC0, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xC0, 0xC0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFC, 0x0C, 0x0C, 0x00, 0x00, 0xC3, 0xC6, 0xCC, 0xDE, 0x33, 0x66, 0xCC, 0x0F,
    0xC3, 0xC6, 0xCC, 0xDB, 0x37, 0x6F, 0xCF, 0x03, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
    0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00, 0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00,
    0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,
    0xDB, 0x77, 0xDB, 0xEE, 0xDB, 0x77, 0xDB, 0xEE, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36,
    0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36,
    0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00,
    0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36,
    0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36,
    0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x76, 0xDC, 0xC8, 0xDC, 0x76, 0x00, 0x00, 0x78, 0xCC, 0xF8, 0xCC, 0xF8, 0xC0, 0xC0,
    0x00, 0xFC, 0xCC, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0xFE, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x00,
    0xFC, 0xCC, 0x60, 0x30, 0x60, 0xCC, 0xFC, 0x00, 0x00, 0x00, 0x7E, 0xD8, 0xD8, 0xD8, 0x70, 0x00,
    0x00, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0xC0, 0x00, 0x76, 0xDC, 0x18, 0x18, 0x18, 0x18, 0x00,
    0xFC, 0x30, 0x78, 0xCC, 0xCC, 0x78, 0x30, 0xFC, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x6C, 0x38, 0x00,
    0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x6C, 0xEE, 0x00, 0x1C, 0x30, 0x18, 0x7C, 0xCC, 0xCC, 0x78, 0x00,
    0x00, 0x00, 0x7E, 0xDB, 0xDB, 0x7E, 0x00, 0x00, 0x06, 0x0C, 0x7E, 0xDB, 0xDB, 0x7E, 0x60, 0xC0,
    0x38, 0x60, 0xC0, 0xF8, 0xC0, 0x60, 0x38, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00,
    0x00, 0xFC, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0xFC, 0x00,
    0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xFC, 0x00, 0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xFC, 0x00,
    0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0x70,
    0x30, 0x30, 0x00, 0xFC, 0x00, 0x30, 0x30, 0x00, 0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00,
    0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0F, 0x0C, 0x0C, 0x0C, 0xEC, 0x6C, 0x3C, 0x1C,
    0x78, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

uint8_t Font8x14[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7E, 0x81, 0xA5, 0x81, 0x81, 0xBD, 0x99, 0x81, 0x7E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7E, 0xFF, 0xDB, 0xFF, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x6C, 0xFE, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x3C, 0xE7, 0xE7, 0xE7, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x7E, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x1E, 0x0E, 0x1A, 0x32, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x30, 0x70, 0xF0, 0xE0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7F, 0x63, 0x7F, 0x63, 0x63, 0x63, 0x67, 0xE7, 0xE6, 0xC0, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0xDB, 0x3C, 0xE7, 0x3C, 0xDB, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x06, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7F, 0xDB, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x1B, 0x00, 0x00, 0x00,
    0x00, 0x7C, 0xC6, 0x60, 0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x38, 0x0C, 0xC6, 0x7C, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x7E, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x28, 0x6C, 0xFE, 0x6C, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7C, 0x7C, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFE, 0xFE, 0x7C, 0x7C, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x7C, 0xC6, 0xC2, 0xC0, 0x7C, 0x06, 0x86, 0xC6, 0x7C, 0x18, 0x18, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xC2, 0xC6, 0x0C, 0x18, 0x30, 0x66, 0xC6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC6, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0x06, 0x06, 0x3C, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x1E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xFC, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x60, 0xC0, 0xC0, 0xFC, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0x0C, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xDE, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0xFC, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xDE, 0xC6, 0x66, 0x3A, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xE6, 0x66, 0x6C, 0x6C, 0x78, 0x6C, 0x6C, 0x66, 0xE6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xDE, 0x7C, 0x0C, 0x0E, 0x00, 0x00,
    0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x60, 0x38, 0x0C, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0x7C, 0x6C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0x6C, 0x38, 0x38, 0x38, 0x6C, 0xC6, 0xC6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC6, 0x8C, 0x18, 0x30, 0x60, 0xC2, 0xC6, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00, 0x00, 0x00,
    0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
    0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xE0, 0x60, 0x60, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1C, 0x0C, 0x0C, 0x3C, 0x6C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0x64, 0x60, 0xF0, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xCC, 0x78, 0x00,
    0x00, 0x00, 0xE0, 0x60, 0x60, 0x6C, 0x76, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x06, 0x06, 0x00, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C, 0x00,
    0x00, 0x00, 0xE0, 0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xD6, 0xC6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C, 0x1E, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0x70, 0x1C, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x36, 0x1C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0xF8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xCC, 0x18, 0x30, 0x66, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x0C, 0x06, 0x7C, 0x00,
    0x00, 0x00, 0xCC, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x0C, 0x18, 0x30, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x38, 0x6C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xCC, 0xCC, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x6C, 0x38, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x60, 0x66, 0x3C, 0x0C, 0x06, 0x3C, 0x00, 0x00,
    0x00, 0x10, 0x38, 0x6C, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xCC, 0xCC, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x3C, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0xC6, 0xC6, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x00, 0x00,
    0x38, 0x6C, 0x38, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x00, 0x00,
    0x18, 0x30, 0x60, 0x00, 0xFE, 0x66, 0x60, 0x7C, 0x60, 0x66, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xCC, 0x76, 0x36, 0x7E, 0xD8, 0xD8, 0x6E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3E, 0x6C, 0xCC, 0xCC, 0xFE, 0xCC, 0xCC, 0xCC, 0xCE, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x38, 0x6C, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x30, 0x78, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0x78, 0x00,
    0x00, 0xC6, 0xC6, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00,
    0x00, 0xC6, 0xC6, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x18, 0x3C, 0x66, 0x60, 0x60, 0x66, 0x3C, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x6C, 0x64, 0x60, 0xF0, 0x60, 0x60, 0x60, 0xE6, 0xFC, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0xF8, 0xCC, 0xCC, 0xF8, 0xC4, 0xCC, 0xDE, 0xCC, 0xCC, 0xC6, 0x00, 0x00, 0x00,
    0x00, 0x0E, 0x1B, 0x18, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x18, 0xD8, 0x70, 0x00,
    0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x0C, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x30, 0x60, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x30, 0x60, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x76, 0xDC, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
    0x76, 0xDC, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0x00, 0x00, 0x00,
    0x00, 0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC0, 0xC0, 0xC6, 0xCC, 0xD8, 0x30, 0x60, 0xDC, 0x86, 0x0C, 0x18, 0x3E, 0x00,
    0x00, 0xC0, 0xC0, 0xC6, 0xCC, 0xD8, 0x30, 0x66, 0xCE, 0x9E, 0x3E, 0x06, 0x06, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x36, 0x6C, 0xD8, 0x6C, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xD8, 0x6C, 0x36, 0x6C, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
    0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,
    0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0xD8, 0xD8, 0xDC, 0x76, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xFC, 0xC6, 0xC6, 0xFC, 0xC0, 0xC0, 0x40, 0x00,
    0x00, 0x00, 0xFE, 0xC6, 0xC6, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFE, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xC6, 0xFE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xD8, 0xD8, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xC0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7E, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x6C, 0x6C, 0xEE, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1E, 0x30, 0x18, 0x0C, 0x3E, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xDB, 0xDB, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0x06, 0x7E, 0xDB, 0xDB, 0xF3, 0x7E, 0x60, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1C, 0x30, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x30, 0x1C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x00, 0x7E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00, 0x7E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xEC, 0x6C, 0x3C, 0x1C, 0x00, 0x00, 0x00,
    0x00, 0xD8, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x70, 0xD8, 0x30, 0x60, 0xC8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

uint8_t Font8x16[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7E, 0x81, 0xA5, 0x81, 0x81, 0xA5, 0x99, 0x81, 0x81, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7E, 0xFF, 0xDB, 0xFF, 0xFF, 0xDB, 0xE7, 0xFF, 0xFF, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x6C, 0xFE, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0xE7, 0xE7, 0xE7, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x7E, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x1E, 0x06, 0x0E, 0x1A, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x30, 0x30, 0x70, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7F, 0x63, 0x7F, 0x63, 0x63, 0x63, 0x63, 0x67, 0xE7, 0xE6, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x18, 0xDB, 0x3C, 0xE7, 0x3C, 0xDB, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFE, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x02, 0x06, 0x0E, 0x1E, 0x3E, 0xFE, 0x3E, 0x1E, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7F, 0xDB, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7C, 0xC6, 0x60, 0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6C, 0xFE, 0x6C, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7C, 0x7C, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x7C, 0x7C, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x7C, 0xC6, 0xC2, 0xC0, 0x7C, 0x06, 0x06, 0x86, 0xC6, 0x7C, 0x18, 0x18, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xC2, 0xC6, 0x0C, 0x18, 0x30, 0x60, 0xC6, 0x86, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xD6, 0xD6, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0x06, 0x06, 0x3C, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x0C, 0x1E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xFC, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x60, 0xC0, 0xC0, 0xFC, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC6, 0x06, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0x06, 0x0C, 0x78, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x0C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xDE, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x66, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xDE, 0xC6, 0xC6, 0x66, 0x3A, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xE6, 0x66, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xDE, 0x7C, 0x0C, 0x0E, 0x00, 0x00,
    0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x60, 0x38, 0x0C, 0x06, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xD6, 0xFE, 0xEE, 0x6C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0xC6, 0x6C, 0x7C, 0x38, 0x38, 0x7C, 0x6C, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC6, 0x86, 0x0C, 0x18, 0x30, 0x60, 0xC2, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
    0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xE0, 0x60, 0x60, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1C, 0x0C, 0x0C, 0x3C, 0x6C, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0x64, 0x60, 0xF0, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xCC, 0x78, 0x00,
    0x00, 0x00, 0xE0, 0x60, 0x60, 0x6C, 0x76, 0x66, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x06, 0x06, 0x00, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C, 0x00,
    0x00, 0x00, 0xE0, 0x60, 0x60, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xD6, 0xD6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C, 0x1E, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0x60, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0xF8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xCC, 0x18, 0x30, 0x60, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x0C, 0x06, 0x7C, 0x00, 0x00,
    0x00, 0x00, 0xCC, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0C, 0x18, 0x30, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x38, 0x6C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xCC, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x6C, 0x38, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x60, 0x60, 0x66, 0x3C, 0x0C, 0x06, 0x3C, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x38, 0x6C, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x3C, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC6, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x38, 0x6C, 0x38, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x30, 0x60, 0x00, 0xFE, 0x66, 0x60, 0x7C, 0x60, 0x60, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x76, 0x36, 0x7E, 0xD8, 0xD8, 0x6E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3E, 0x6C, 0xCC, 0xCC, 0xFE, 0xCC, 0xCC, 0xCC, 0xCC, 0xCE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x38, 0x6C, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x30, 0x78, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xC6, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0x78, 0x00,
    0x00, 0xC6, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC6, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x18, 0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x6C, 0x64, 0x60, 0xF0, 0x60, 0x60, 0x60, 0x60, 0xE6, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xF8, 0xCC, 0xCC, 0xF8, 0xC4, 0xCC, 0xDE, 0xCC, 0xCC, 0xCC, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0E, 0x1B, 0x18, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0x70, 0x00, 0x00,
    0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0C, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x30, 0x60, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x30, 0x60, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x76, 0xDC, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
    0x76, 0xDC, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xC0, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC0, 0xC0, 0xC2, 0xC6, 0xCC, 0x18, 0x30, 0x60, 0xDC, 0x86, 0x0C, 0x18, 0x3E, 0x00, 0x00,
    0x00, 0xC0, 0xC0, 0xC2, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xCE, 0x9E, 0x3E, 0x06, 0x06, 0x00, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6C, 0xD8, 0x6C, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x6C, 0x36, 0x6C, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
    0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,
    0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0xD8, 0xD8, 0xD8, 0xDC, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xD8, 0xCC, 0xC6, 0xC6, 0xC6, 0xCC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFE, 0xC6, 0xC6, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFE, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFE, 0xC6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7E, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x6C, 0x6C, 0x6C, 0xEE, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1E, 0x30, 0x18, 0x0C, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xDB, 0xDB, 0xDB, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x06, 0x7E, 0xDB, 0xDB, 0xF3, 0x7E, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1C, 0x30, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x30, 0x1C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xEC, 0x6C, 0x6C, 0x3C, 0x1C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xD8, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x70, 0xD8, 0x30, 0x60, 0xC8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//out: di = font, bh = charHeight
void GetFontAndCharHeight(uint8_t*& font, uint8_t& charHeight)//Offset 0x1ec8
{
    using namespace Hag::System;

    //     push      cs
    //     pop       es
    //     mov       di, offset Font8x8        ;Offset 0x4b3a
    font = Font8x8;
    
    //     mov       bh, 08h
    charHeight = 8;
    
    //     mov       al, byte ptr ds:[BDA_PointHeightOfCharacterMatrix];Offset 0x485
    //     cmp       al, 09h
    //     jbe       Label0x1ee4               ;Offset 0x1ee4
    if (BDA::PointHeightOfCharacterMatrix::Get() > 9)
    {
        //     mov       bh, 0eh
        charHeight = 14;

        //     mov       di, offset Font8x14       ;Offset 0x533a
        font = Font8x14;

        //     cmp       al, 0eh
        //     jbe       Label0x1ee4               ;Offset 0x1ee4
        if (BDA::PointHeightOfCharacterMatrix::Get() > 14)
        {
            //     mov       bh, 10h
            charHeight = 16;

            //     mov       di, offset Font8x16       ;Offset 0x613a
            font = Font8x16;

            // Label0x1ee4:                            ;Offset 0x1ee4
        }
    }
    //     ret
}

//in: bx = bankIndex, dx = characterIndex
//out: di = offset
uint16_t GetCharacterBankOffset(uint16_t bankIndex, uint16_t characterIndex)//Offset 0x2267
{
    static uint16_t bankOffset[]
    {
        0x0000,
        0x4000,
        0x8000,
        0xc000,
        0x2000,
        0x6000,
        0xa000,
        0xe000
    };

    // push bx
    // push dx
    // and  bx, 07h
    // shl  bx, 01h
    // call GetA000SelectorInES            ;Offset 0x3f4c
    // mov  di, word ptr cs:[bx + Data0x2257];Offset 0x2257
    // shl  dx, 05h
    // add  di, dx
    // pop  dx
    // pop  bx
    // ret
    return bankOffset[(bankIndex & 7)] + (characterIndex << 5);
}

//in: bl = bankIndex, bh = charHeight, dx = characterIndex, cx = count, di = font
void UploadCharacters(uint8_t bankIndex, uint8_t charHeight, uint16_t characterIndex, uint16_t count, uint8_t* font)//Offset 0x1f3d
{
    //     push      bx
    //     push      ds
    //     push      es
    //     mov       si, di
    //     push      es
    //     pop       ds
    //     call      GetCharacterBankOffset    ;Offset 0x2267
    //     jcxz      Label0x1f5f               ;Offset 0x1f5f
    if (count != 0)
    {
        //     mov       dx, cx
        //     mov       bl, bh
        //     sub       bh, bh
        //     push      bp
        //     mov       bp, 0020h
        //     sub       bp, bx
        uint16_t offset = GetCharacterBankOffset(bankIndex, characterIndex);
        uint8_t* ptr = FARPointer(0xa000, offset).ToPointer<uint8_t>(count * 0x20);
        for (uint16_t i = 0; i < count; ++i)
        {
            // Label0x1f55:                            ;Offset 0x1f55
            //     mov       cx, bx
            //     rep movsb
            //     add       di, bp

            memcpy(ptr, font, charHeight);
            ptr += 0x20;
            font += charHeight;

            //     dec       dx
            //     jne       Label0x1f55               ;Offset 0x1f55
        }
        //     pop       bp
        // Label0x1f5f:                            ;Offset 0x1f5f
    }
    //     pop       es
    //     pop       ds
    //     pop       bx
    //     ret
}

void Func0x37b5(uint8_t bankIndex, uint8_t charHeight, uint16_t characterIndex)//Offset 0x37b5
{
    using namespace Hag;
    using namespace Hag::System;

    //     pushaw
    //     push      ds
    //     push      es
    //     sub       dx, dx
    //     mov       ds, dx
    //     mov       cl, byte ptr ds:[BDA_PointHeightOfCharacterMatrix];Offset 0x485
    //     sub       cl, bh
    //     jbe       Label0x37f3               ;Offset 0x37f3
    if (charHeight > BDA::PointHeightOfCharacterMatrix::Get())
    {
        //     call      GetCharacterBankOffset    ;Offset 0x2267
        uint16_t offset = GetCharacterBankOffset(bankIndex, characterIndex);
        (void)offset;

        //     sub       ch, ch
        //     mov       dx, VGA_GraphicsControllerIndex;Port 0x3ce
        //     mov       ax, VGA_GCTLIdx_ReadMapSelect OR (VGA_GCTL4_Map2 SHL 8);0x204
        //     out       dx, ax
        VGA::GraphicsController::ReadPlaneSelect::Write(VGA::GraphicsController::ReadPlaneSelect::Plane3);

        //     mov       dx, 0020h
        //     sub       dx, cx
        //     mov       al, bh
        //     cbw
        //     add       di, ax
        //     mov       si, 0100h
        //     mov       bl, cl
        // Label0x37df:                            ;Offset 0x37df
        //     mov       al, byte ptr es:[di - 01h]
        //     mov       cl, bl
        //     rep stosb
        //     add       di, dx
        //     dec       si
        //     jne       Label0x37df               ;Offset 0x37df
        //     mov       dx, VGA_GraphicsControllerIndex;Port 0x3ce
        //     mov       ax, 0004h
        //     out       dx, ax
    }
    // Label0x37f3:                            ;Offset 0x37f3
    //     pop       es
    //     pop       ds
    //     popaw
    //     ret
}

bool Is8Dot()//Offset 0x3fc5
{
    // pushaw
    // mov    dx, VGA_SequenceIndex        ;Port 0x3c4
    // mov    al, VGA_SEQIdx_ClockingMode  ;0x1
    // call   ReadIndexedRegister          ;Offset 0x3f84
    // test   ah, VGA_SEQ1_8DotChar        ;0x1
    // popaw
    // ret
    return (Hag::VGA::Sequencer::ClockingMode::Read() & Hag::VGA::Sequencer::ClockingMode::DotClockSelect) != 0;
}

uint8_t Font8x14Patch[] =
{
    0x1D, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x22, 0x00, 0x63, 0x63, 0x63, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x2B, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4D, 0x00, 0x00, 0xC3, 0xE7, 0xFF, 0xDB, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x00, 0x00, 0x00,
    0x54, 0x00, 0x00, 0xFF, 0xDB, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x56, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00,
    0x57, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xC3, 0xDB, 0xDB, 0xFF, 0x66, 0x66, 0x00, 0x00, 0x00,
    0x58, 0x00, 0x00, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0xC3, 0xC3, 0x00, 0x00, 0x00,
    0x59, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00,
    0x5A, 0x00, 0x00, 0xFF, 0xC3, 0x86, 0x0C, 0x18, 0x30, 0x61, 0xC3, 0xFF, 0x00, 0x00, 0x00,
    0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0xFF, 0xDB, 0xDB, 0xDB, 0xDB, 0x00, 0x00, 0x00,
    0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00,
    0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xC3, 0xDB, 0xDB, 0xFF, 0x66, 0x00, 0x00, 0x00,
    0x91, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x3B, 0x1B, 0x7E, 0xD8, 0xDC, 0x77, 0x00, 0x00, 0x00,
    0x9B, 0x00, 0x18, 0x18, 0x7E, 0xC3, 0xC0, 0xC0, 0xC3, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x9D, 0x00, 0x00, 0xC3, 0x66, 0x3C, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x9E, 0x00, 0xFC, 0x66, 0x66, 0x7C, 0x62, 0x66, 0x6F, 0x66, 0x66, 0xF3, 0x00, 0x00, 0x00,
    0xF1, 0x00, 0x00, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0xF6, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00
};

uint8_t Font8x16Patch[] =
{
    0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x00, 0x00, 0x3C, 0x66, 0xC3, 0xC3, 0xDB, 0xDB, 0xC3, 0xC3, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x4D, 0x00, 0x00, 0xC3, 0xE7, 0xFF, 0xFF, 0xDB, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00,
    0x54, 0x00, 0x00, 0xFF, 0xDB, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x56, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x57, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xDB, 0xDB, 0xFF, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
    0x58, 0x00, 0x00, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x66, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00,
    0x59, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0x5A, 0x00, 0x00, 0xFF, 0xC3, 0x86, 0x0C, 0x18, 0x30, 0x60, 0xC1, 0xC3, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0xFF, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x00, 0x00, 0x00, 0x00,
    0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xDB, 0xDB, 0xFF, 0x66, 0x00, 0x00, 0x00, 0x00,
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0xC3, 0x00, 0x00, 0x00, 0x00,
    0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x3B, 0x1B, 0x7E, 0xD8, 0xDC, 0x77, 0x00, 0x00, 0x00, 0x00,
    0x9B, 0x00, 0x18, 0x18, 0x7E, 0xC3, 0xC0, 0xC0, 0xC0, 0xC3, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x9D, 0x00, 0x00, 0xC3, 0x66, 0x3C, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x9E, 0x00, 0xFC, 0x66, 0x66, 0x7C, 0x62, 0x66, 0x6F, 0x66, 0x66, 0x66, 0xF3, 0x00, 0x00, 0x00, 0x00,
    0xAB, 0x00, 0xC0, 0xC0, 0xC2, 0xC6, 0xCC, 0x18, 0x30, 0x60, 0xCE, 0x9B, 0x06, 0x0C, 0x1F, 0x00, 0x00,
    0xAC, 0x00, 0xC0, 0xC0, 0xC2, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xCE, 0x96, 0x3E, 0x06, 0x06, 0x00, 0x00,
    0x00
};

//out: di = patch, bh = charHeight
void GetPatch(uint8_t*& patch, uint8_t& charHeight)//Offset 0x1f29
{
    //     push      cs
    //     pop       es
    //     mov       di, offset Font8x14Patch  ;Offset 0x713a
    patch = Font8x14Patch;

    //     mov       bh, 0eh
    charHeight = 0x0e;

    //     cmp       word ptr ds:[BDA_PointHeightOfCharacterMatrix], 0eh;Offset 0x485
    //     jbe       Label0x1f3c               ;Offset 0x1f3c
    if (Hag::System::BDA::PointHeightOfCharacterMatrix::Get() > 0x0e)
    {
        //     mov       di, Offset Font8x16Patch  ;Offset 0x7267
        patch = Font8x16Patch;

        //     mov       bh, 10h
        charHeight = 0x10;

        // Label0x1f3c:
    }
    //     ret
}

//bl = bankIndex, bh = charHeight, di = patch
void PatchFont(uint8_t bankIndex, uint8_t charHeight, uint8_t* patch)//Offset 0x1f63
{
    uint16_t bankOffset[] =
    {
        0x0000,
        0x4000,
        0x8000,
        0xc000,
        0x2000,
        0x6000,
        0xa000,
        0xe000
    };

    //     push      bx
    //     push      ds
    //     push      es

    //     mov       si, di
    //     push      es
    //     pop       ds
    //     push      bx
    //     sub       bh, bh
    //     shl       bx, 01h
    //     call      GetA000SelectorInES       ;Offset 0x3f4c
    //     mov       di, word ptr cs:[bx + Data0x2257];Offset 0x2257
    uint16_t offset = bankOffset[bankIndex];
    uint8_t* ptr = FARPointer(uint16_t(0xa0000), offset).ToPointer<uint8_t>(256 * 0x20);

    //     pop       bx
    //     mov       dl, 20h
    //     mov       bl, bh
    //     sub       bh, bh
    while (patch[0] != 0)
    {
        // Label0x1f7e:                            ;Offset 0x1f7e
        //     lodsb
        //     test      al, al
        //     je        Label0x1f8f               ;Offset 0x1f8f
        //     push      di
        //     mul       dl
        //     add       di, ax
        //     mov       cx, bx
        //     rep movsb
        memcpy(ptr + patch[0] * 0x20, patch + 1, charHeight);

        //     pop       di
        //     jmp       Label0x1f7e               ;Offset 0x1f7e
        patch += charHeight + 1;
    }
    // Label0x1f8f:                            ;Offset 0x1f8f
    //     pop       es
    //     pop       ds
    //     pop       bx
    //     ret       
}

void Func0x1f05()//Offset 0x1f05
{
    using namespace Hag;
    //     push      dx
    //     mov       dx, VGA_MiscellaneousRead ;Port 0x3cc
    //     in        al, dx
    //     test      al, VGA_Misc_IOAddressSel_CGA;0x1
    //     je        Label0x1f14               ;Offset 0x1f14
    //     mov       dl, VGA_GraphicsControllerIndex_lowbyte;Port 0x3ce
    if ((VGA::MiscellaneousOutput::Read() & VGA::MiscellaneousOutput::IOAddressSelect) == 0)
    {
        //     mov       bx, VGA_GCTLIdx_Miscellaneous OR ((VGA_GCTL6_ChainEven OR VGA_GCTL6_Mem_B0000_B7FFF) SHL 8);0xa06
        //     mov       ax, bx
        //     out       dx, ax
        VGA::GraphicsController::MemoryMapModeControl::Write(VGA::GraphicsController::MemoryMapModeControl::ChainOddEvenPlanes |
                                                             VGA::GraphicsController::MemoryMapModeControl::B0000HtoB7FFFH);
    }
    else
    {
        // Label0x1f14:                            ;Offset 0x1f14
        //     mov       bx, VGA_GCTLIdx_Miscellaneous OR ((VGA_GCTL6_ChainEven OR VGA_GCTL6_Mem_B8000_BFFFF) SHL 8);0xe06
        //     mov       ax, bx
        //     out       dx, ax
        VGA::GraphicsController::MemoryMapModeControl::Write(VGA::GraphicsController::MemoryMapModeControl::ChainOddEvenPlanes |
                                                             VGA::GraphicsController::MemoryMapModeControl::B8000HtoBFFFFH);
    }

    //     mov       ax, VGA_GCTLIdx_GraphicMode OR (VGA_GCTL5_OddEven SHL 8);0x1005
    //     out       dx, ax
    VGA::GraphicsController::GraphicsControllerMode::Write(VGA::GraphicsController::GraphicsControllerMode::OddEvenAddressing);

    //     mov       dl, VGA_SequenceIndex_lowbyte;Port 0x3c4
    //     mov       ax, VGA_SEQIdx_MapMask OR ((VGA_SEQ2_Mask0 OR VGA_SEQ2_Mask1) SHL 8);0x302
    //     out       dx, ax
    VGA::Sequencer::EnableWritePlane::Write(VGA::Sequencer::EnableWritePlane::Plane2);

    //     mov       ax, VGA_SEQIdx_MemoryMode OR (VGA_SEQ4_MemSize256k SHL 8);0x204
    //     out       dx, ax
    VGA::Sequencer::MemoryModeControl::Write(VGA::Sequencer::MemoryModeControl::ExtendedMemoryAddress);

    //     pop       dx
    //     ret
}

void Func0x5b8()//Offset 0x5b8
{
    using namespace Hag;
    using namespace Hag::System;

    //     push      bp
    //     mov       al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    //     call      Func0x3faf                ;Offset 0x3faf
    //     jne       Label0x650                ;Offset 0x650
    if (Func0x3faf(BDA::DisplayMode::Get()))
    {
        //     call      Func0x1ee5                ;Offset 0x1ee5
        Func0x1ee5();

        //     les       di, ds:[BDA_VideoParameterControlBlockPtrOfs];Offset 0x4a8
        //     les       di, es:[di + BDA_VPCB_AlphaNumCharSetOverride];Offset 0x8
        //     mov       dx, es
        //     or        dx, di
        //     je        Label0x5f6                ;Offset 0x5f6
        //     lea       si, [di + BDA_ACSO_ApplicableModeList];Offset 0xb
        //     call      CheckModeList             ;Offset 0x6bb
        //     jne       Label0x5f6                ;Offset 0x5f6
        //     mov       ax, 1110h                 ;Text functions - load user specified patterns
        //     mov       bh, byte ptr es:[di + BDA_ACSO_ChardDefLength];Offset 0x0
        //     mov       bl, byte ptr es:[di + BDA_ACSO_RamBankIndex];Offset 0x1
        //     mov       cx, word ptr es:[di + BDA_ACSO_NumCharacters];Offset 0x2
        //     mov       dx, word ptr es:[di + BDA_ACSO_StartIndex];Offset 0x4
        //     les       bp, es:[di + BDA_ACSO_FontData];Offset 0x6
        //     int       10h
        //     jmp       Label0x613                ;Offset 0x613
        // Label0x5f6:                             ;Offset 0x5f6
        //     call      GetFontAndCharHeight      ;Offset 0x1ec8   //out: di = font, bh = charHeight
        uint8_t* font = nullptr;
        uint8_t charHeight = 0;
        GetFontAndCharHeight(font, charHeight);
        //     sub       dx, dx                    ;characterIndex = 0
        //     mov       bl, dl                    ;bankIndex = 0
        //     mov       cx, 0100h                 ;count = 256
        //     call      UploadCharacters          ;Offset 0x1f3d   //in: bl = bankIndex, bh = charHeight, dx = characterIndex, cx = count, di = source data
        UploadCharacters(0, charHeight, 0, 0x100, font);

        //     call      Func0x37b5                ;Offset 0x37b5
        Func0x37b5(0, charHeight, 0);

        //     call      Is8Dot                    ;Offset 0x3fc5
        //     jne       Label0x613                ;Offset 0x613
        if (!Is8Dot())
        {
            //     call      GetPatch                  ;Offset 0x1f29
            uint8_t* patch = nullptr;
            GetPatch(patch, charHeight);
            
            //     sub       bl, bl
            //     call      PatchFont                 ;Offset 0x1f63
            PatchFont(0, charHeight, patch);

            // Label0x613:                             ;Offset 0x613
        }
        //     call      Func0x1f05                ;Offset 0x1f05
        Func0x1f05();

        //     les       di, ds:[BDA_VideoParameterControlBlockPointer];Offset 0x4a8
        //     les       di, es:[di + BDA_VPCB_SecondarySavePointerTbl];Offset 0x10
        //     les       di, es:[di + BDA_SSP_SecondaryAlphaOverr];Offset 0x6
        //     mov       dx, es
        //     or        dx, di
        //     je        Label0x685                ;Offset 0x685
        //     mov       al, byte ptr es:[di + BDA_SACSO_CharDefLength];Offset 0x0
        //     cmp       byte ptr ds:[BDA_PointHeightOfCharacterMatrix], al;Offset 0x485
        //     jne       Label0x685                ;Offset 0x685
        //     lea       si, [di + BDA_SACSO_ApplicableModeLst];Offset 0x7
        //     call      CheckModeList             ;Offset 0x6bb
        //     jne       Label0x685                ;Offset 0x685
        //     mov       ax, 1100h                 ;Text functions - load user specified patterns
        //     mov       bl, byte ptr es:[di + BDA_SACSO_RamBankIndex];Offset 0x1
        //     mov       bh, byte ptr es:[di + BDA_SACSO_CharDefLength]; Offset 0x0
        //     mov       cx, 0100h
        //     sub       dx, dx
        //     les       bp, es:[di + BDA_SACSO_FontData];Offset 0x3
        //     int       10h
        //     jmp       Label0x685                ;Offset 0x685
        // Label0x650:                             ;Offset 0x650
    }
    else
    {
        //     les       di, ds:[BDA_VideoParameterControlBlockPointer];Offset 0x4a8
        //     les       di, es:[di + BDA_VPCB_GrahicsCharSetOverride];Offset 0xc
        //     mov       dx, es
        //     or        dx, di
        //     je        Label0x67a                ;Offset 0x67a
        //     lea       si, [di + BDA_GCSO_ApplicableModeList];Offset 0x7
        //     call      CheckModeList             ;Offset 0x6bb
        //     jne       Label0x67a                ;Offset 0x67a
        //     mov       ax, 1121h                 ;Text functions - set user specified graphics characters
        //     sub       bl, bl
        //     mov       cx, word ptr es:[di + BDA_GCSO_CharDefLength];Offset 0x1
        //     mov       dl, byte ptr es:[di + BDA_GCSO_NumCharacters];Offset 0x0
        //     les       bp, es:[di + BDA_GCSO_FontData];Offset 0x3
        //     int       10h
        //     jmp       Label0x685                ;Offset 0x685
        // Label0x67a:                             ;Offset 0x67a
        //     call      GetFontAndCharHeight      ;Offset 0x1ec8
        uint8_t* font = nullptr;
        uint8_t charHeight = 0;
        GetFontAndCharHeight(font, charHeight);
        
        //     mov       word ptr ds:[INT_43_HandlerOfs], di;Offset 0x10c
        //     mov       word ptr ds:[INT_43_HandlerSeg], es;Offset 0x10e
        //TODO: Set proper font pointer.

        // Label0x685:                             ;Offset 0x685
    }
    //     pop       bp
    //     ret
}

bool ValidMode(Hag::VGA::VideoMode_t mode)//Offset 0x3f8d
{
    // pushaw
    // push   es
    // call   FindModeData                 ;Offset 0x40d9
    ModeData* modeData = nullptr;
    return FindModeData(mode, modeData);
    // lahf
    // test   ah, 01h
    // pop    es
    // popaw
    // ret
}

bool Func0x4152(Hag::VGA::VideoMode_t mode)//Offset 0x4152
{
    // push   ax
    // push   bx
    // push   es
    // and    al, 7fh
    // call   FindModeData                 ;Offset 0x40d9
    ModeData* modeData = nullptr;
    FindModeData(mode, modeData);

    // cmp    byte ptr es:[bx + 04h], 09h
    return modeData->Flags != 9;
    // pop    es
    // pop    bx
    // pop    ax
    // ret
}

bool Func0x3f99(Hag::VGA::VideoMode_t mode)//Offset 0x3f99
{
    //     push   bx
    //     push   es
    //     call   FindModeData                 ;Offset 0x40d9
    //     jb     Label0x3fac                  ;Offset 0x3fac
    ModeData* modeData = nullptr;
    if (FindModeData(mode, modeData))
    {
        //     cmp    byte ptr es:[bx + 04h], 01h
        //     je     Label0x3fac                  ;Offset 0x3fac
        if (modeData->Flags == 0x01)
            return true;
        //     cmp    byte ptr es:[bx + 04h], 03h
        if (modeData->Flags == 0x03)
            return true;
        // Label0x3fac:                            ;Offset 0x3fac
    }
    //     pop    es
    //     pop    bx
    //     ret
    return false;
}

bool SetupBDA(uint8_t mode)//Offset 0x2fc
{
    using namespace Hag;
    using namespace Hag::System;
    //     mov       ah, al
    //     and       ax, (BDA_DM_DONT_CLEAR_SCREEN SHL 8) OR (0ffh XOR BDA_DM_DONT_CLEAR_SCREEN);0x807f
    BDA::VideoModeOptions_t dontClearDisplay = mode & VGA::VideoMode::DontClearDisplay;
    mode &= ~VGA::VideoMode::DontClearDisplay;

    //     call      ValidMode                 ;Offset 0x3f8d
    //     jne       Label0x3cc                ;Offset 0x3cc
    if (ValidMode(mode))
    {
        //     mov       byte ptr ds:[BDA_DisplayMode], al ;Offset 0x449
        BDA::DisplayMode::Get() = mode;

        //     call      Func0x4152                ;Offset 0x4152
        //     je        Label0x3cc                ;Offset 0x3cc
        if (Func0x4152(mode))
        {
            //     mov       cl, byte ptr ds:[BDA_VideoModeOptions];Offset 0x487
            //     and       cl, NOT (BDA_VMO_Inactive OR BDA_VMO_DontClearDisplay);0x77
            //     or        cl, ah
            //     mov       byte ptr ds:[BDA_VideoModeOptions], cl;Offset 0x487
            BDA::VideoModeOptions::Get() =
                (BDA::VideoModeOptions::Get() &
                ~(BDA::VideoModeOptions::Inactive | BDA::VideoModeOptions::DontClearDisplay)) |
                dontClearDisplay;
            
            //     mov       bl, byte ptr ds:[BDA_DetectedHardware];Offset 0x410
            //     mov       bh, bl
            //     and       bx, ((NOT BDA_DH_InitialVideoModeMask) SHL 8) OR BDA_DH_InitialVideoModeMask;0xcf30
            BDA::DetectedHardware_t initialVideoMode = BDA::DetectedHardware::Get() & BDA::DetectedHardware::InitialVideoModeMask;
            BDA::DetectedHardware_t detectedHardware = BDA::DetectedHardware::Get() & ~BDA::DetectedHardware::InitialVideoModeMask;

            //     mov       dx, VGA_CRTControllerIndexB;Port 0x3b4
            VGA::Register_t crtControllerIndex = VGA::Register::CRTControllerIndexB;

            //     test      byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_VGA;Offset 0x489 0x1
            //     je        Label0x36a                ;Offset 0x36a
            if ((BDA::VideoDisplayDataArea::Get() & BDA::VideoDisplayDataArea::VGA) != 0)
            {
                //     or        bh, BDA_DH_80x25Monochrome;0x30
                detectedHardware |= BDA::DetectedHardware::Monochrome80x25;

                //     mov       bl, BDA_EFBS_CGAMono80x25_2;0xb
                BDA::EGAFeatureBitSwitches_t egaFeatureBitSwitches = BDA::EGAFeatureBitSwitches::CGAMono80x25_2;

                //     or        byte ptr ds:[BDA_VideoModeOptions], BDA_VMO_Monochrome;Offset 0x487 0x2
                BDA::VideoModeOptions::Get() |= BDA::VideoModeOptions::Monochrome;

                //     call      Func0x3f99                ;Offset 0x3f99
                //     je        Label0x357                ;Offset 0x357
                if (!Func0x3f99(mode))
                {
                    //     and       byte ptr ds:[BDA_VideoModeOptions], NOT BDA_VMO_Monochrome;Offset 0x487 0xfd
                    BDA::VideoModeOptions::Get() &= ~BDA::VideoModeOptions::Monochrome;

                    //     mov       dl, VGA_CRTControllerIndexD_lowbyte;Port 0x3d4
                    crtControllerIndex = VGA::Register::CRTControllerIndexD;

                    //     and       bh, NOT BDA_DH_40x25Color ;0xef
                    detectedHardware &= ~BDA::DetectedHardware::Color40x25;

                    //     mov       bl, BDA_EFBS_MDAHiRes80x25_2;0x8
                    egaFeatureBitSwitches = BDA::EGAFeatureBitSwitches::MDAHiRes80x25_2;

                    //     test      byte ptr ds:[BDA_VideoDisplayDataArea], BDA_VDDA_LineMode200;Offset 0x489 0x80
                    //     jne       Label0x357                ;Offset 0x357
                    if ((BDA::VideoDisplayDataArea::Get() & BDA::VideoDisplayDataArea::LineMode200) == 0)
                    {
                        //     mov       bl, BDA_EFBS_MDAHiResEnhanced_2;0x9
                        egaFeatureBitSwitches = BDA::EGAFeatureBitSwitches::MDAHiResEnhanced_2;

                        // Label0x357:                             ;Offset 0x357
                    }
                }
                //     mov       word ptr ds:[BDA_VideoBaseIOPort], dx;Offset 0x463
                BDA::VideoBaseIOPort::Get() = crtControllerIndex;

                //     mov       byte ptr ds:[BDA_DetectedHardware], bh;Offset 0x410
                BDA::DetectedHardware::Get() = detectedHardware;

                //     and       byte ptr ds:[BDA_EGAFeatureBitSwitches], NOT BDA_EFBS_AdapterTypeMask;Offset 0x488 0xf0
                BDA::EGAFeatureBitSwitches::Get() &= BDA::EGAFeatureBitSwitches::FeatureConnectorMask;

                //     or        byte ptr ds:[BDA_EGAFeatureBitSwitches], bl;Offset 0x488
                BDA::EGAFeatureBitSwitches::Get() |= egaFeatureBitSwitches;

                //     jmp       Label0x3b1                ;Offset 0x3b1
                // Label0x36a:                             ;Offset 0x36a
            }
            else
            {
                //     call      Func0x3f99                ;Offset 0x3f99
                //     je        Label0x391                ;Offset 0x391
                if (!Func0x3f99(mode))
                {
                    //     cmp       bl, 30h
                    //     je        Label0x381                ;Offset 0x381
                    if (initialVideoMode != BDA::DetectedHardware::Monochrome80x25)
                    {
                        //     mov       dl, VGA_CRTControllerIndexD_lowbyte;Port 0x3d4
                        crtControllerIndex = VGA::Register::CRTControllerIndexD;

                        //     test      cl, 02h
                        //     jne       Label0x3b3                ;Offset 0x3b3
                        if ((BDA::VideoModeOptions::Get() & BDA::VideoModeOptions::Monochrome) == 0)
                        {
                            //     mov       word ptr ds:[BDA_VideoBaseIOPort], dx;Offset 0x463
                            BDA::VideoBaseIOPort::Get() = crtControllerIndex;

                            //     jmp       Label0x3b1                ;Offset 0x3b1
                            return true;
                        }
                        else
                        {
                            // Label0x3b3:                             ;Offset 0x3b3
                            //     cbw
                            //     mov       bl, 0eh
                            //     cmp       al, 07h
                            //     je        Label0x3bc                ;Offset 0x3bc
                            //     mov       bl, 08h
                            // Label0x3bc:                             ;Offset 0x3bc
                            //     mov       byte ptr ds:[BDA_RowsOnScreen], 18h;Offset 0x484 0x18
                            //     mov       byte ptr ds:[BDA_PointHeightOfCharacterMatrix], bl;Offset 0x485
                            //     or        byte ptr ds:[BDA_VideoModeOptions], BDA_VMO_Inactive;Offset 0x487 0x8
                            //     int       42h
                            return false;
                        }
                        // Label0x381:                             ;Offset 0x381
                    }
                    else
                    {
                        //     test      cl, 02h
                        //     je        Label0x3b3                ;Offset 0x3b3
                        if ((BDA::VideoModeOptions::Get() & BDA::VideoModeOptions::Monochrome) == 0)
                        {
                            //     mov       al, BDA_DM_80x25_Monochrome_Text;0x7
                            //     mov       byte ptr ds:[BDA_DisplayMode], al;Offset 0x449
                            BDA::DisplayMode::Get() = VGA::VideoMode::T80x25x1bppM;

                            //     mov       word ptr ds:[BDA_VideoBaseIOPort], dx;Offset 0x463
                            BDA::VideoBaseIOPort::Get() = crtControllerIndex;

                            //     jmp       Label0x3b1                ;Offset 0x3b1
                            return true;
                        }
                        else
                        {
                            // Label0x3b3:                             ;Offset 0x3b3
                            //     cbw
                            //     mov       bl, 0eh
                            //     cmp       al, 07h
                            //     je        Label0x3bc                ;Offset 0x3bc
                            //     mov       bl, 08h
                            // Label0x3bc:                             ;Offset 0x3bc
                            //     mov       byte ptr ds:[BDA_RowsOnScreen], 18h;Offset 0x484 0x18
                            //     mov       byte ptr ds:[BDA_PointHeightOfCharacterMatrix], bl;Offset 0x485
                            //     or        byte ptr ds:[BDA_VideoModeOptions], BDA_VMO_Inactive;Offset 0x487 0x8
                            //     int       42h
                            return false;
                        }
                        // Label0x391:                             ;Offset 0x391
                    }
                }
                //     cmp       bl, 30h
                //     jne       Label0x3a1                ;Offset 0x3a1
                if (initialVideoMode == BDA::DetectedHardware::Monochrome80x25)
                {
                    //     test      cl, 02h
                    //     je        Label0x3b3                ;Offset 0x3b3
                    //     mov       word ptr ds:[BDA_VideoBaseIOPort], dx;Offset 0x463
                    //     jmp       Label0x3b1                ;Offset 0x3b1
                    return true;
                    // Label0x3a1:                             ;Offset 0x3a1
                }
                //     test      cl, 02h
                //     jne       Label0x3b3                ;Offset 0x3b3
                if ((BDA::VideoModeOptions::Get() & BDA::VideoModeOptions::Monochrome) != 0)
                {
                    //     sub       al, al                    ;BDA_DM_40x25_BW_Text
                    //     mov       byte ptr ds:[BDA_DisplayMode], al;Offset 0x449
                    BDA::DisplayMode::Get() = VGA::VideoMode::T40x25x4bppG;

                    //     mov       word ptr ds:[BDA_VideoBaseIOPort], VGA_CRTControllerIndexD;Offset 0x463 Port 0x3d4
                    BDA::VideoBaseIOPort::Get() = VGA::Register::CRTControllerDataD;

                    // Label0x3b1:                             ;Offset 0x3b1
                }
                else
                {
                    // Label0x3b3:                             ;Offset 0x3b3
                    //     cbw
                    //     mov       bl, 0eh
                    //     cmp       al, 07h
                    //     je        Label0x3bc                ;Offset 0x3bc
                    //     mov       bl, 08h
                    // Label0x3bc:                             ;Offset 0x3bc
                    //     mov       byte ptr ds:[BDA_RowsOnScreen], 18h;Offset 0x484 0x18
                    //     mov       byte ptr ds:[BDA_PointHeightOfCharacterMatrix], bl;Offset 0x485
                    //     or        byte ptr ds:[BDA_VideoModeOptions], BDA_VMO_Inactive;Offset 0x487 0x8
                    //     int       42h
                    return false;
                }
            }
            //     clc
            //     ret
            return true;

            // Label0x3cc:                             ;Offset 0x3cc
        }
    }
    //     stc
    //     ret
    return false;
}

void OutputListOfIndexedRegisters()//Offset 0x40a0
{
    // Label0x40a0:                            ;Offset 0x40a0
    //     mov    ah, bl
    //     lodsb
    //     xchg   al, ah
    //     out    dx, ax
    //     inc    bx
    //     loop   Label0x40a0                  ;Offset 0x40a0
    //     ret
}

void ApplyModeSettingsToVGARegisters(Hag::System::BDA::VideoParameterTable& parameters)//Offset 0x431
{
    using namespace Hag;
    using namespace Hag::System;

    // push      di
    // push      ds
    // push      es
    // mov       si, di
    // push      es
    // pop       ds
    // mov       dx, VGA_SequenceIndex     ;Port 0x3c4
    // mov       ax, VGA_SEQIdx_Reset OR (VGA_SEQ0_AsyncReset SHL 8);0x100
    // out       dx, ax
    VGA::Sequencer::Reset::Write(VGA::Sequencer::Reset::AsynchronousReset);
    
    // mov       dl, VGA_MiscellaneousWrite_lowbyte;Port 0x3c2
    // mov       al, byte ptr [si + 09h]
    // out       dx, al
    VGA::MiscellaneousOutput::Write(parameters.MiscellaneousOutputRegister);

    // mov       dl, VGA_SequenceIndex_lowbyte;Port 0x3c4
    // push      si
    // mov       cx, 0004h
    // mov       bl, 01h
    // lea       si, [si + 05h]
    // call      OutputListOfIndexedRegisters;Offset 0x40a0
    VGA::SequencerData::Write(VGA::Sequencer::Register::ClockingMode, parameters.SequencerRegisters, sizeof(parameters.SequencerRegisters));

    // pop       si
    // mov       ax, VGA_SEQIdx_Reset OR ((VGA_SEQ0_AsyncReset OR VGA_SEQ0_SyncReset) SHL 8);0x300
    // out       dx, ax
    VGA::Sequencer::Reset::Write(VGA::Sequencer::Reset::AsynchronousReset | VGA::Sequencer::Reset::SynchronousReset);

    // push      ds
    // call      GetBIOSDataSelectorInDS   ;Offset 0x3f40
    // mov       dx, word ptr ds:[BDA_VideoBaseIOPort];Offset 0x463
    // pop       ds
    // mov       ax, VGA_CRTCIdx_VertRetraceEnd OR (20h SHL 8);0x2011 Unlock CRTC registers 0-7
    // out       dx, ax
    VGA::CRTController::VerticalRetraceEnd::Write(BDA::VideoBaseIOPort::Get(), VGA::CRTController::VerticalRetraceEnd::DisableVerticalInterrupt);
    
    // sub       bl, bl
    // mov       cx, 0019h
    // push      si
    // lea       si, [si + 0ah]
    // call      OutputListOfIndexedRegisters;Offset 0x40a0
    VGA::CRTControllerData::Write(BDA::VideoBaseIOPort::Get(), VGA::CRTController::Register::HorizontalTotal, parameters.CRTCRegisters, sizeof(parameters.CRTCRegisters));

    // pop       si
    // mov       dl, VGA_GraphicsControllerIndex_lowbyte;Port 0x3ce
    // sub       bl, bl
    // mov       cx, 0009h
    // push      si
    // lea       si, [si + 37h]
    // call      OutputListOfIndexedRegisters;Offset 0x40a0
    VGA::GraphicsControllerData::Write(VGA::GraphicsController::Register::SetResetData, parameters.GraphicsControllerRegisters, sizeof(parameters.GraphicsControllerRegisters));

    // pop       si
    // mov       dl, VGA_FeatureControlWD_lowbyte;Offset 0x3da
    // sub       al, al
    // out       dx, al
    VGA::FeatureControl::Write(VGA::Register::FeatureControlWD, 0);

    // pop       es
    // pop       ds
    // pop       di
    // ret
}

void SetVideoMode(uint8_t mode)//Offset 0x02C2
{
    using namespace Hag::System;

    //     pushaw
    //     push      es

    //     call      SetupBDA                  ;Offset 0x2fc
    //     jb        Label0x2f7                ;Offset 0x2f7
    if (SetupBDA(mode))
    {
        //     mov       al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
        mode = BDA::DisplayMode::Get();

        //     call      GetVideoParameterTable                ;Offset 0x35a7
        BDA::VideoParameterTable& parameters = GetVideoParameterTable();

        //     call      ApplyModeSettingsToBDA    ;Offset 0x3d6
        ApplyModeSettingsToBDA(parameters);

        //     call      DisableAttributeControllerPaletteOutput;Offset 0x407d
        DisableAttributeControllerPaletteOutput();

        //     call      Func0x3615                ;Offset 0x3615
        Func0x3615();

        //     call      ApplyModeSettingsToVGARegisters;Offset 0x431
        ApplyModeSettingsToVGARegisters(parameters);

        //     call      TurnScreenOff             ;Offset 0x3f6a
        TurnScreenOff();

        //     call      Func0x48a                 ;Offset 0x48a
        Func0x48a(parameters);

        //     call      Func0x363c                ;Offset 0x363c
        Func0x363c();

        //     call      Func0x5b8                 ;Offset 0x5b8
        Func0x5b8();

        //     test      byte ptr ds:[BDA_VideoModeOptions], BDA_VMO_DontClearDisplay;Offset 0x487 0x80
        //     jne       Label0x2f1                ;Offset 0x2f1
        if ((BDA::VideoModeOptions::Get() & BDA::VideoModeOptions::DontClearDisplay) == 0)
        {
            //     call      ClearScreen               ;Offset 0x3740
            ClearScreen();

            // Label0x2f1:                             ;Offset 0x2f1
        }

        //     call      TurnScreenOn              ;Offset 0x3f77
        TurnScreenOn();

        //     call      EnableAttributeControllerPaletteOutput;Offset 0x408d
        EnableAttributeControllerPaletteOutput();

        // Label0x2f7:                             ;Offset 0x2f7
    }
    //     pop       es
    //     popaw
    //     pop       ds
    //     pop       si
    //     iret
}

// inputs:
//    ax = mode

// outputs:
//    al = legacy mode (byte)
//    ah = extra data index

void Func0x41ce()//Offset 0x41ce
{
    //     push   bx
    //     push   es
    //     call   FindVESAModeData             ;Offset 0x41a9
    //     mov    ax, 0ffffh
    //     jb     Label0x41df                  ;Offset 0x41df
    //     mov    al, byte ptr es:[bx]
    //     mov    ah, byte ptr es:[bx + 01h]
    // Label0x41df:                            ;Offset 0x41df
    //     pop    es
    //     pop    bx
    //     ret
}

//Check to see if there's enough memory for the mode.
void Func0x3863()//Offset 0x3863
{
    //     pushaw
    //     push      es
    //     call      FindModeData              ;Offset 0x40d9
    //     jb        Label0x3886               ;Offset 0x3886
    //     mov       ax, word ptr es:[bx + 0bh];Bytes per scanline
    //     mul       word ptr es:[bx + 09h]    ;Height in pixels or chars
    //     mov       cx, 8000h
    //     div       cx
    //     add       dx, 0ffffh
    //     adc       ax, 0000h
    //     xchg      ax, dx
    //     call      GetMemorySizeIn256KBlocks ;Offset 0x37fc
    //     shl       ax, 03h
    //     cmp       ax, dx
    // Label0x3886:                            ;Offset 0x3886
    //     pop       es
    //     popaw
    //     ret
}

void Func0x3824()//Offset 0x3824
{
    // push      ax
    // push      dx
    // call      GetCRTControllerIndexPort ;Offset 0x40aa
    // mov       al, TDFX_CRTC_ExtensionByte1;0x1d
    // call      ReadIndexedRegister       ;Offset 0x3f84
    // or        ah, 80h
    // out       dx, ax
    // pop       dx
    // pop       ax
    // ret
}

void Func0x3ee4()//Offset 0x3ee4
{
    // push   bx
    // push   ecx
    // push   edx
    // add    bh, 02h
    // add    ch, 02h
    // mov    cl, bl
    // mov    bl, 01h
    // shl    bl, cl
    // mov    eax, 00da7a64h
    // movzx  edx, ch
    // imul   edx
    // movzx  ecx, bh
    // idiv   ecx
    // sub    edx, edx
    // movzx  ecx, bl
    // idiv   ecx
    // pop    edx
    // pop    ecx
    // pop    bx
    // ret
}

void Func0x3e83()//Offset 0x3e83
{
    //     mov    ebp, eax
    //     mov    esi, 0ffffffffh
    //     sub    ebx, ebx
    //     mov    ecx, ebx
    //     sub    bl, bl
    // Label0x3e94:                            ;Offset 0x3e94
    //     cmp    bl, 04h
    //     jae    Label0x3ed2                  ;Offset 0x3ed2
    //     sub    bh, bh
    // Label0x3e9b:                            ;Offset 0x3e9b
    //     cmp    bh, 40h
    //     jae    Label0x3ece                  ;Offset 0x3ece
    //     sub    ch, ch
    // Label0x3ea2:                            ;Offset 0x3ea2
    //     cmp    ch, 0fdh
    //     jae    Label0x3eca                  ;Offset 0x3eca
    //     call   Func0x3ee4                   ;Offset 0x3ee4
    //     sub    eax, ebp
    //     jae    Label0x3eb2                  ;Offset 0x3eb2
    //     neg    eax
    // Label0x3eb2:                            ;Offset 0x3eb2
    //     cmp    esi, eax
    //     jb     Label0x3ec6                  ;Offset 0x3ec6
    //     mov    esi, eax
    //     push   bx
    //     shl    ebx, 10h
    //     pop    bx
    //     push   cx
    //     shl    ecx, 10h
    //     pop    cx
    // Label0x3ec6:                            ;Offset 0x3ec6
    //     inc    ch
    //     jmp    Label0x3ea2                  ;Offset 0x3ea2
    // Label0x3eca:                            ;Offset 0x3eca
    //     inc    bh
    //     jmp    Label0x3e9b                  ;Offset 0x3e9b
    // Label0x3ece:                            ;Offset 0x3ece
    //     inc    bl
    //     jmp    Label0x3e94                  ;Offset 0x3e94
    // Label0x3ed2:                            ;Offset 0x3ed2
    //     shr    ebx, 10h
    //     shr    ecx, 10h
    //     mov    al, bl
    //     shl    bh, 02h
    //     or     al, bh
    //     mov    ah, ch
    //     ret
}

void SetAndSelectVideoPLL()//Offset 0x3e64
{
    // pushad
    // call   Func0x3e83                   ;Offset 0x3e83
    // call   GetIOBaseAddress             ;Offset 0x3d69
    // add    dx, TDFX_IO_PLLControl0      ;0x40
    // and    eax, 0000ffffh
    // out    dx, eax
    // mov    dx, VGA_MiscellaneousRead    ;Port 0x3cc
    // in     al, dx
    // or     al, VGA_MISC_ClockSelectMask ;0xc
    // mov    dl, VGA_MiscellaneousWrite_lowbyte;Port 0x3c2
    // out    dx, al
    // popad
    // ret
}

void Func0x417c()//Offset 0x417c
{
    //     push   bx
    //     push   es
    //     call   FindModeData                 ;Offset 0x40d9
    //     mov    al, 00h
    //     jb     Label0x4189                  ;Offset 0x4189
    //     mov    al, byte ptr es:[bx + 06h]
    // Label0x4189:                            ;Offset 0x4189
    //     pop    es
    //     pop    bx
    //     ret
}

void Func0x39cd()//Offset 0x39cd
{
    //     pushad
    //     mov    dx, word ptr ds:[BDA_VideoBaseIOPort];Offset 0x463
    //     mov    ax, VGA_CRTCIdx_VertRetraceEnd OR (VGA_VRE_DisableVertRetrIntr SHL 8);0x2011
    //     out    dx, ax
    //     mov    al, byte ptr ds:[BDA_DisplayMode];Offset 0x449
    //     call   Func0x417c                   ;Offset 0x417c
    //     cmp    al, BDA_DM_Unknown1          ;0x8
    //     jb     Label0x3af4                  ;Offset 0x3af4
    //     mov    eax, dword ptr es:[di + 0dh]
    //     call   SetAndSelectVideoPLL         ;Offset 0x3e64
    //     mov    ax, word ptr es:[di]
    //     shr    ax, 03h
    //     sub    ax, 05h
    //     mov    ch, ah
    //     and    ch, 01h
    //     shl    ax, 08h
    //     out    dx, ax
    //     mov    bh, ah
    //     add    bh, 03h
    //     mov    al, 03h
    //     call   ReadIndexedRegister          ;Offset 0x3f84
    //     push   bx
    //     and    bh, 1fh
    //     and    ah, 0e0h
    //     or     ah, bh
    //     out    dx, ax
    //     mov    ax, word ptr es:[di + 02h]
    //     shr    ax, 03h
    //     bt     ax, 08h
    //     setb   cl
    //     shl    cl, 06h
    //     or     ch, cl
    //     mov    ah, al
    //     mov    al, 04h
    //     out    dx, ax
    //     mov    bx, word ptr es:[di + 04h]
    //     shr    bx, 03h
    //     mov    al, 05h
    //     call   ReadIndexedRegister          ;Offset 0x3f84
    //     and    ah, 60h
    //     and    bl, 1fh
    //     or     ah, bl
    //     pop    bx
    //     and    bh, 20h
    //     shl    bh, 02h
    //     or     ah, bh
    //     out    dx, ax
    //     mov    al, 1ah
    //     call   ReadIndexedRegister          ;Offset 0x3f84
    //     and    ah, 3ch
    //     or     ah, ch
    //     out    dx, ax
    //     mov    ax, word ptr es:[di + 06h]
    //     dec    ax
    //     dec    ax
    //     mov    ch, ah
    //     and    ch, 01h
    //     bt     ax, 09h
    //     setb   cl
    //     shl    cl, 05h
    //     or     ch, cl
    //     mov    bh, ah
    //     and    bh, 04h
    //     shr    bh, 02h
    //     mov    ah, al
    //     mov    al, 06h
    //     out    dx, ax
    //     mov    al, 16h
    //     sub    ah, 02h
    //     out    dx, ax
    //     mov    ax, word ptr es:[di + 08h]
    //     bt     ax, 08h
    //     setb   cl
    //     shl    cl, 02h
    //     or     ch, cl
    //     bt     ax, 09h
    //     setb   cl
    //     shl    cl, 07h
    //     or     ch, cl
    //     bt     ax, 0ah
    //     setb   cl
    //     shl    cl, 06h
    //     or     bh, cl
    //     mov    ah, al
    //     mov    al, 10h
    //     out    dx, ax
    //     mov    al, 07h
    //     call   ReadIndexedRegister          ;Offset 0x3f84
    //     and    ah, 5ah
    //     or     ah, ch
    //     out    dx, ax
    //     mov    al, 1bh
    //     call   ReadIndexedRegister          ;Offset 0x3f84
    //     and    ah, 3ch
    //     or     ah, bh
    //     out    dx, ax
    //     mov    ah, byte ptr es:[di + 0ah]
    //     and    ah, 0fh
    //     or     ah, 20h
    //     mov    al, 11h
    //     out    dx, ax
    //     mov    ah, byte ptr es:[di + 0ch]
    //     and    ah, 0ch
    //     shl    ah, 04h
    //     mov    dl, 0cch
    //     in     al, dx
    //     and    al, 3fh
    //     or     al, ah
    //     mov    dl, 0c2h
    //     out    dx, al
    //     call   GetIOBaseAddress             ;Offset 0x3d69
    //     add    dx, TDFX_IO_VideoProcessorConfig;0x5c
    //     in     eax, dx
    //     mov    bl, byte ptr es:[di + 0ch]
    //     and    bl, 02h
    //     shl    bl, 02h
    //     out    dx, eax
    // Label0x3af4:                            ;Offset 0x3af4
    //     popad
    //     ret
}


void SetSuperVGAVideoMode(Hag::Vesa::VideoMode_t mode)//Offset 0x2d4c
{
    //     push      bx
    //     push      cx
    //     push      dx
    //     mov       ax, bx
    //     and       ah, 07h
    //     cmp       ax, 0100h
    //     jb        Label0x2d5e               ;Offset 0x2d5e
    //     call      Func0x41ce                ;Offset 0x41ce
    //     jb        Label0x2d8d               ;Offset 0x2d8d
    // Label0x2d5e:                            ;Offset 0x2d5e
    //     call      Func0x3863                ;Offset 0x3863
    //     jb        Label0x2d8d               ;Offset 0x2d8d
    //     push      ax
    //     push      bx
    //     and       bh, 80h
    //     or        al, bh
    //     sub       ah, ah
    //     int       10h
    //     pop       bx
    //     pop       ax
    //     cmp       byte ptr ds:[BDA_DisplayMode], al;Offset 0x449
    //     jne       Label0x2d8d               ;Offset 0x2d8d
    //     test      bh, 40h
    //     je        Label0x2d7e               ;Offset 0x2d7e
    //     call      Func0x3824                ;Offset 0x3824
    // Label0x2d7e:                            ;Offset 0x2d7e
    //     test      bh, 08h
    //     je        Label0x2d86               ;Offset 0x2d86
    //     call      Func0x39cd                ;Offset 0x39cd
    // Label0x2d86:                            ;Offset 0x2d86
    //     mov       ax, 004fh
    // Label0x2d89:                            ;Offset 0x2d89
    //     pop       dx
    //     pop       cx
    //     pop       bx
    //     ret
    // Label0x2d8d:                            ;Offset 0x2d8d
    //     mov       ax, 014fh
    //     jmp       Label0x2d89               ;Offset 0x2d89
}


#ifdef MOCK

int Diff(const char* name)
{
    int ret = -1;
    if (Hag::Testing::Mock::HasDifferences())
    {
        printf("\n%s >----------------\n", name);
        Hag::Testing::Mock::Report();
        printf("\n\n\n");
        ret = 0;
    }
    Hag::Testing::Mock::Snapshot();
    return ret;
}

class MockBanshee : public Hag::Testing::Mock::PCI::Device
{
public:
    inline MockBanshee(Hag::IAllocator& allocator)
        : Device("Banshee")
        , m_allocator(allocator)
        , m_Config(nullptr)
        , m_ConfigSnapshot(nullptr)
    {
        m_Config = allocator.AllocateAs<uint8_t>(sizeof(s_Config));

        m_ConfigSnapshot = allocator.AllocateAs<uint8_t>(sizeof(s_Config));
        Reset();
    }

    virtual ~MockBanshee()
    {
        m_allocator.Free(m_ConfigSnapshot);
        m_ConfigSnapshot = nullptr;

        m_allocator.Free(m_Config);
        m_Config = nullptr;
    }

    virtual void Report(Device* instance1)
    {
        MockBanshee* banshee1 = (MockBanshee*)instance1;

        if (memcmp(m_Config, banshee1->m_Config, sizeof(s_Config)) != 0)
        {
            printf("PCI Config space differences:\n");
            uint32_t* config0 = (uint32_t*)m_Config;
            uint32_t* config1 = (uint32_t*)banshee1->m_Config;
            for (uint16_t idx = 0; idx < sizeof(s_Config) / sizeof(uint32_t); ++idx)
            {
                if (config0[idx] != config1[idx])
                {
                    printf("0x%02X : 0x%08lX != 0x%08lX\n", idx * 4, config0[idx], config1[idx]);
                }
            }
            printf("\n");
        }
    }

    virtual bool HasDifferences(Device* instance1)
    {
        MockBanshee* banshee1 = (MockBanshee*)instance1;

        if (memcmp(m_Config, banshee1->m_Config, sizeof(s_Config)) != 0)
            return true;

        return false;
    }

    virtual void Reset()
    {
        memcpy(m_Config, s_Config, sizeof(s_Config));
        memcpy(m_ConfigSnapshot, s_Config, sizeof(s_Config));
    }

    virtual void Snapshot()
    {
        memcpy(m_ConfigSnapshot, m_Config, sizeof(s_Config));
    }

    virtual void Rollback()
    {
        memcpy(m_Config, m_ConfigSnapshot, sizeof(s_Config));
    }

    virtual uint32_t Read32(uint8_t offset)
    {
        uint32_t val = *(uint32_t*)(m_Config + offset);
        return val;
    }

    virtual void Write8(uint8_t offset, uint8_t value)
    {
        m_Config[offset] = value;
    }

    virtual void Write16(uint8_t offset, uint16_t value)
    {
        ((uint16_t*)m_Config)[offset >> 1] = value;
    }

    virtual void Write32(uint8_t offset, uint32_t value)
    {
        ((uint32_t*)m_Config)[offset >> 2] = value;
    }

    virtual void Snoop8(uint16_t port, uint8_t value)
    {

    }

    virtual void Snoop16(uint16_t port, uint16_t value)
    {

    }

private:
    Hag::IAllocator& m_allocator;

    uint8_t* m_Config;

    uint8_t* m_ConfigSnapshot;

    static uint8_t s_Config[256];
};

uint8_t MockBanshee::s_Config[256] = 
{
    0x1A, 0x12, 0x03, 0x00, 0x03, 0x00, 0xB0, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xDE, 0x08, 0x00, 0x00, 0xE2, 0x01, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x11, 0x17, 0x10,
    0x00, 0x00, 0xFF, 0xE1, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x01, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x60, 0x10, 0x00, 0x21, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#endif

Support::Device PCIDevices[] =
{
    { 0x0001, "3Dfx Voodoo Graphics" },
    { 0x0002, "3Dfx Voodoo 2" },
    { 0x0003, "3Dfx Voodoo Banshee" },
    { 0x0004, "3Dfx Velocity 100" },
    { 0x0005, "3Dfx Voodoo 3" },
    { 0x0009, "3Dfx Voodoo 4/5" },
    { 0x0057, "3Dfx Voodoo 3/3000" }
};

int main(void)
{
    FILE* fp = fopen("pcidump.txt", "w");
    Support::PCIDump(fp, NULL, 0x121a, "3Dfx", PCIDevices, sizeof(PCIDevices) / sizeof(Support::Device));

    fclose(fp);
    return 0;
}
